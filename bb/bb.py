import aiohttp
import discord
from discord.ext import commands
from __main__ import send_cmd_help
try:   # check if BeautifulSoup4 is installed
    from bs4 import BeautifulSoup
    soupAvailable = True
except:
    soupAvailable = False
try:   # Check if Tabulate is installed
    from tabulate import tabulate
    tabulateAvailable = True
except:
    tabulateAvailable = False


class bb:
    """Blazblue Character Frame Data Search"""

    def __init__(self, bot):
        self.bot = bot

    @commands.group(pass_context=True)
    async def am(self, ctx):
        """Fashion Master"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)       
	
    @commands.group(pass_context=True)
    async def az(self, ctx):
        """Gorilla King"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx) 
	
    @commands.group(pass_context=True)
    async def ra(self, ctx):
        """Ragna Oni-san."""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def es(self, ctx):
        """SWWWWWWWWWWWWWWOOOOOOOOOORRRRRRRDDDD--YUKEN"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)  
		
    @commands.group(pass_context=True)
    async def hk(self, ctx):
        """White Susano'o"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
		
    @commands.group(pass_context=True)
    async def jin(self, ctx):
        """Jin Kisaragi, Former Paradise Island Owner."""
		
        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)  
		
    @commands.group(pass_context=True)
    async def su(self, ctx):
        """Black Susano'o"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def ce(self, ctx):
        """Aunt Celica"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def no(self, ctx):
        """Non-Mecha Noel"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def la(self, ctx):
        """Super Fighting Lambda"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def mu(self, ctx):
        """Mecha Noel"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def nu(self, ctx):
        """Ragna's Pyscho"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def te(self, ctx):
        """TERRRRRRRRRUUUUUMMMMMMMMMMMMMMMIIIIIIIIIIIIII"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def vk(self, ctx):
        """The Butler"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def ts(self, ctx):
        """Hammer Gorilla"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def tk(self, ctx):
        """Dancing Edge"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def re(self, ctx):
        """Best Dad Award Winner"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def rac(self, ctx):
        """Prim and Proper"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def pl(self, ctx):
        """The Queen Loli"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def ni(self, ctx):
        """Queen Gorilla"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def na(self, ctx):
        """Swwwwwwwwwaaaaaaaayyyyy Mastah"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def ma(self, ctx):
        """Fist of the Squirrel Star"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @ma.group(pass_context=True)
    async def asteroidA(self, ctx):
        """Asteroid Vision(A) follow-ups: a, b, c, or d"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @asteroidA.group(pass_context=True)
    async def rush(self, ctx):
        """Going into the Follow-ups used after Rush: a, b, c, d"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def mai(self, ctx):
        """She has a pointy thingy"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @mai.group(pass_context=True)
    async def vh(self, ctx):
        """Variant Heart Stance Follow-ups"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @mai.group(pass_context=True)
    async def jun(self, ctx):
        """Juncture Follow-ups"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @mai.group(pass_context=True)
    async def moon(self, ctx):
        """Moon Blossom Follow-ups"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
#########################################################################################################################################

    @am.command(name="5a", pass_context=False)  # Amane from blazblue
    async def _5a_am(self):
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = movesp.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
		
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4c/BBCP_Amane_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

			
            await self.bot.say(embed=embed)
            
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="5b", pass_context=False)  # Amane from blazblue
    async def _5b_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = movesp.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/07/BBCP_Amane_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
			
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="5c", pass_context=False)  # Amane from blazblue
    async def _5c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = movesp.find_all('li')[0].get_text()
            mp2 = movesp.find_all('li')[1].get_text()
            mp3 = movesp.find_all('li')[2].get_text()
            mp4 = movesp.find_all('li')[3].get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/28/BBCP_Amane_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="2a", pass_context=False)  # Amane from blazblue
    async def _2a_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]

            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6e/BBCP_Amane_2A.png')
            embed.add_field(name="2A", value=tab)
            embed.add_field(name="2AA", value=tab1)
            embed.add_field(name="2AAA", value=tab2)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="2b", pass_context=False)  # Amane from blazblue
    async def _2b_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/53/BBCP_Amane_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="2c", pass_context=False)  # Amane from blazblue
    async def _2c_am(self):   
        """Ground control from a distance"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7e/BBCP_Amane_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="6a", pass_context=False)  # Amane from blazblue
    async def _6a_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b0/BBCP_Amane_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="6b", pass_context=False)  # Amane from blazblue
    async def _6b_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find_all('li')[2].get_text()
            mp4 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b4/BBCP_Amane_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="6c", pass_context=False)  # Amane from blazblue
    async def _6c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find_all('li')[2].get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/26/BBCP_Amane_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="4c", pass_context=False)  # Amane from blazblue
    async def _4c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]

            Data = [head.get_text() for head in headers.find_all('td')]
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "4C"
            embed.set_image(url='http://www.howardcc.edu/sebin/t/g/no-picture.jpg') #no image as of implementation
            embed.add_field(name="Frame Data", value=tab)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="1c", pass_context=False)  # Amane from blazblue
    async def _1c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]

            Data = [head.get_text() for head in headers.find_all('td')]
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "1C"
            embed.set_image(url='http://www.howardcc.edu/sebin/t/g/no-picture.jpg') #no image found
            embed.add_field(name="Frame Data", value=tab)

            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="3c", pass_context=False)  # Amane from blazblue
    async def _3c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2a/BBCP_Amane_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="ja", pass_context=False)  # Amane from blazblue
    async def _ja_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "j.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ee/BBCP_Amane_jA.png')
            embed.add_field(name="J.A", value=tab)
            embed.add_field(name="J.AA", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="jb", pass_context=False)  # Amane from blazblue
    async def _jb_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "j.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c1/BBCP_Amane_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!

    @am.command(name="j2b", pass_context=False)  # Amane from blazblue
    async def _j2b_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n" + "*" + mps[1] + "\n" + "*" + mps[2] + "\n" + "*" + mps[3] +"```"
			
            embed = discord.Embed()
            embed.title = "j.2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b4/BBCP_Amane_j2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="jc", pass_context=False)  # Amane from blazblue
    async def _jc_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n" + "*" + mps[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "j.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4f/BBCP_Amane_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!		

    @am.command(name="j6c", pass_context=False)  # Amane from blazblue
    async def _j6c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "j.6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/18/BBCP_Amane_j6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!	
			
    @am.command(name="j4c", pass_context=False)  # Amane from blazblue
    async def _j4c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n" + "*" + mps[1] + "```"
			
            embed = discord.Embed()
            embed.title = "j.4C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9b/BBCP_Amane_j4C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="j2c", pass_context=False)  # Amane from blazblue
    async def _j2c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n" + "*" + mps[1] + "```"
			
            embed = discord.Embed()
            embed.title = "j.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9b/BBCP_Amane_j4C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="5d", pass_context=False)  # Amane from blazblue
    async def _5d_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head1.get_text() for head1 in headers1.find_all('td')]
            mps = [fo.get_text() for fo in info.find_all('li')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n" + "*" + mps[1] + "\n" + "*" + mps[2] + "\n" + "*" + mps[3] + "\n" + "*" + mps[4] + "\n" + "*" + mps[5] + "\n" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d0/BBCP_Amane_5D.png')
            embed.add_field(name="Lv. 1", value=tab)
            embed.add_field(name="Lv. 2", value=tab1)
            embed.add_field(name="Lv. 3", value=tab2)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="2d", pass_context=False)  # Amane from blazblue
    async def _2d_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head1.get_text() for head1 in headers1.find_all('td')]
            mps = [fo.get_text() for fo in info.find_all('li')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n" + "*" + mps[1] + "\n" + "*" + mps[2] + "\n" + "*" + mps[3] + "\n" + "*" + mps[4] + "\n" + "*" + mps[5] + "\n" + "*" + mps[6] + "\n" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCP_Amane_2D.png')
            embed.add_field(name="Lv. 1", value=tab)
            embed.add_field(name="Lv. 2", value=tab1)
            embed.add_field(name="Lv. 3", value=tab2)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="6d", pass_context=False)  # Amane from blazblue
    async def _6d_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head1.get_text() for head1 in headers1.find_all('td')]
            mps = [fo.get_text() for fo in info.find_all('li')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n" + "*" + mps[1] + "\n" + "*" + mps[2] + "\n" + "*" + mps[3] + "\n" + "*" + mps[4] + "\n" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d8/BBCP_Amane_6D.png')
            embed.add_field(name="Lv. 1", value=tab)
            embed.add_field(name="Lv. 2", value=tab1)
            embed.add_field(name="Lv. 3", value=tab2)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="jd", pass_context=False)  # Amane from blazblue
    async def _jd_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head1.get_text() for head1 in headers1.find_all('td')]
            mps = [fo.get_text() for fo in info.find_all('li')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n" + "*" + mps[1] + "\n" + "*" + mps[2] + "\n" + "*" + mps[3] + "\n" + "*" + mps[4] + "\n" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "j.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/60/BBCP_Amane_jD.png')
            embed.add_field(name="Lv. 1", value=tab)
            embed.add_field(name="Lv. 2", value=tab1)
            embed.add_field(name="Lv. 3", value=tab2)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="j6d", pass_context=False)  # Amane from blazblue
    async def _j6d_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head1.get_text() for head1 in headers1.find_all('td')]
            mps = [fo.get_text() for fo in info.find_all('li')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n" + "*" + mps[1] + "\n" + "*" + mps[2] + "\n" + "*" + mps[3] + "\n" + "*" + mps[4] + "\n" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "j.6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/44/BBCP_Amane_j6D.png')
            embed.add_field(name="Lv. 1", value=tab)
            embed.add_field(name="Lv. 2", value=tab1)
            embed.add_field(name="Lv. 3", value=tab2)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="ft", pass_context=False)  # Amane from blazblue
    async def _ft_am(self): 
        """Pinwheel"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find_all('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp[0] + "\n" + "*" + mp[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/75/BBCP_Amane_ForwardThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="bt", pass_context=False)  # Amane from blazblue
    async def _bt_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find_all('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp[0] + "\n" + "*" + mp[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5d/BBCP_Amane_BackThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="at", pass_context=False)  # Amane from blazblue
    async def _at_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find_all('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp[0] + "\n" + "*" + mp[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/68/BBCP_Amane_AirThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="ca", pass_context=False)  # Amane from blazblue
    async def _ca_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find_all('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp[0] + "\n" + "*" + mp[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/07/BBCP_Amane_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="ct", pass_context=False)  # Amane from blazblue
    async def _ct_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find_all('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp[0] + "\n" + "*" + mp[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/18/BBCP_Amane_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
	
    @am.command(name="236d", pass_context=False)  # Amane from blazblue
    async def _236d_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            headers2 = table_body.find_all('tr')[4]
            headers3 = table_body.find_all('tr')[5]
            headers4 = table_body.find_all('tr')[6]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[7]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            mps = [fo.get_text() for fo in info.find_all('li')]
            mps1 = [fo1.get_text() for fo1 in info1.find_all('li')]
            mp1 = info1.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n" + "*" + mps[1] + "\n" + "*" + mps[2] + "```"
            mp2 = "```" + "*" + mps1[0] + "\n" + "*" + mps1[1] + "\n" + "*" + mps1[2] + "\n" + "*" + mps1[3] + "\n" + "*" + mp1 +  "```"
			
            embed = discord.Embed()
            embed.title = "Ninpu Sengeki: Hariken"
            embed.set_image(url='http://www.dustloop.com/wiki/index.php/File:BBCP_Amane_Hariken.png')
            embed.add_field(name="Stance", value=tab)
            embed.add_field(name="Lv. 1", value=tab1)
            embed.add_field(name="Lv. 2", value=tab2)
            embed.add_field(name="Lv. 3", value=tab3)
            embed.add_field(name="Break", value=tab4)
            embed.add_field(name="Stance:", value=mp, inline='true')
            embed.add_field(name="Follow-up:", value=mp2, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!			

    @am.command(name="623c", pass_context=False)  # Amane from blazblue
    async def _623c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Jyuuken Dageki: Gekiren"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a1/BBCP_Amane_Gekiren.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="236c", pass_context=False)  # Amane from blazblue
    async def _236c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Choujyuu Rengeki: Raibu"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fa/BBCP_Amane_Raibu.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="j236c", pass_context=False)  # Amane from blazblue
    async def _j236c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp = [fo.get_text() for fo in info.find_all('li')]            
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp[0] + "\n" + "*" + mp[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Tensou Rakugeki: Gosei"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2c/BBCP_Amane_Gosei.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="214a", pass_context=False)  # Amane from blazblue
    async def _214a_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            headers4 = table_body.find_all('tr')[5]
            headers5 = table_body.find_all('tr')[6]
            headers6 = table_body.find_all('tr')[7]
            headers7 = table_body.find_all('tr')[8]
            info1 = table_body.find_all('tr')[9]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()
            vrs6 = headers6.find('th').get_text()
            vrs7 = headers7.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]
            Data7 = [head7.get_text() for head7 in headers7.find_all('td')]
            mps = [fo.get_text() for fo in info.find_all('li')]
            mp1 = info1.find_all('p')[0].get_text()
            mp2 = info1.find_all('p')[1].get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            tab6 = tabulate([["Version", vrs6], ["Damage", Data6[0]], ["Cancel", Data6[1]], ["Guard", Data6[2]], ["Startup", Data6[3]], ["Active", Data6[4]], ["Recovery", Data6[5]], ["Frame Adv.", Data6[6]], ["Attribute", Data6[7]]], tablefmt='simple', stralign='left')
            tab7 = tabulate([["Version", vrs7], ["Damage", Data7[0]], ["Cancel", Data7[1]], ["Guard", Data7[2]], ["Startup", Data7[3]], ["Active", Data7[4]], ["Recovery", Data7[5]], ["Frame Adv.", Data7[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mps[0] + "\n" + "*" + mps[1] + "\n" + "*" + mps[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Choujin Kaihi: Zettou"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCP_Amane_Zettou.png')
            embed.add_field(name="236A", value=tab)
            embed.add_field(name="214A", value=tab1)
            embed.add_field(name="236B", value=tab2)
            embed.add_field(name="214B", value=tab3)
            embed.add_field(name="J.236A", value=tab4)
            embed.add_field(name="J.214A", value=tab5)
            embed.add_field(name="J.236B", value=tab6)
            embed.add_field(name="J.214B", value=tab7)
            embed.add_field(name="Stance:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!		
			
    @am.command(name="214b", pass_context=False)  # Amane from blazblue
    async def _214b_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            headers4 = table_body.find_all('tr')[5]
            headers5 = table_body.find_all('tr')[6]
            headers6 = table_body.find_all('tr')[7]
            headers7 = table_body.find_all('tr')[8]
            info1 = table_body.find_all('tr')[9]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()
            vrs6 = headers6.find('th').get_text()
            vrs7 = headers7.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]
            Data7 = [head7.get_text() for head7 in headers7.find_all('td')]
            mps = [fo.get_text() for fo in info.find_all('li')]
            mp1 = info1.find_all('p')[0].get_text()
            mp2 = info1.find_all('p')[1].get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            tab6 = tabulate([["Version", vrs6], ["Damage", Data6[0]], ["Cancel", Data6[1]], ["Guard", Data6[2]], ["Startup", Data6[3]], ["Active", Data6[4]], ["Recovery", Data6[5]], ["Frame Adv.", Data6[6]], ["Attribute", Data6[7]]], tablefmt='simple', stralign='left')
            tab7 = tabulate([["Version", vrs7], ["Damage", Data7[0]], ["Cancel", Data7[1]], ["Guard", Data7[2]], ["Startup", Data7[3]], ["Active", Data7[4]], ["Recovery", Data7[5]], ["Frame Adv.", Data7[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mps[0] + "\n" + "*" + mps[1] + "\n" + "*" + mps[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Choujin Kaihi: Zettou"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCP_Amane_Zettou.png')
            embed.add_field(name="236A", value=tab)
            embed.add_field(name="214A", value=tab1)
            embed.add_field(name="236B", value=tab2)
            embed.add_field(name="214B", value=tab3)
            embed.add_field(name="J.236A", value=tab4)
            embed.add_field(name="J.214A", value=tab5)
            embed.add_field(name="J.236B", value=tab6)
            embed.add_field(name="J.214B", value=tab7)
            embed.add_field(name="Stance:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!	
			
    @am.command(name="236a", pass_context=False)  # Amane from blazblue
    async def _236a_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            headers4 = table_body.find_all('tr')[5]
            headers5 = table_body.find_all('tr')[6]
            headers6 = table_body.find_all('tr')[7]
            headers7 = table_body.find_all('tr')[8]
            info1 = table_body.find_all('tr')[9]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()
            vrs6 = headers6.find('th').get_text()
            vrs7 = headers7.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]
            Data7 = [head7.get_text() for head7 in headers7.find_all('td')]
            mps = [fo.get_text() for fo in info.find_all('li')]
            mp1 = info1.find_all('p')[0].get_text()
            mp2 = info1.find_all('p')[1].get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            tab6 = tabulate([["Version", vrs6], ["Damage", Data6[0]], ["Cancel", Data6[1]], ["Guard", Data6[2]], ["Startup", Data6[3]], ["Active", Data6[4]], ["Recovery", Data6[5]], ["Frame Adv.", Data6[6]], ["Attribute", Data6[7]]], tablefmt='simple', stralign='left')
            tab7 = tabulate([["Version", vrs7], ["Damage", Data7[0]], ["Cancel", Data7[1]], ["Guard", Data7[2]], ["Startup", Data7[3]], ["Active", Data7[4]], ["Recovery", Data7[5]], ["Frame Adv.", Data7[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mps[0] + "\n" + "*" + mps[1] + "\n" + "*" + mps[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Choujin Kaihi: Zettou"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCP_Amane_Zettou.png')
            embed.add_field(name="236A", value=tab)
            embed.add_field(name="214A", value=tab1)
            embed.add_field(name="236B", value=tab2)
            embed.add_field(name="214B", value=tab3)
            embed.add_field(name="J.236A", value=tab4)
            embed.add_field(name="J.214A", value=tab5)
            embed.add_field(name="J.236B", value=tab6)
            embed.add_field(name="J.214B", value=tab7)
            embed.add_field(name="Stance:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!	
			
    @am.command(name="236b", pass_context=False)  # Amane from blazblue
    async def _236b_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            headers4 = table_body.find_all('tr')[5]
            headers5 = table_body.find_all('tr')[6]
            headers6 = table_body.find_all('tr')[7]
            headers7 = table_body.find_all('tr')[8]
            info1 = table_body.find_all('tr')[9]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()
            vrs6 = headers6.find('th').get_text()
            vrs7 = headers7.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]
            Data7 = [head7.get_text() for head7 in headers7.find_all('td')]
            mps = [fo.get_text() for fo in info.find_all('li')]
            mp1 = info1.find_all('p')[0].get_text()
            mp2 = info1.find_all('p')[1].get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            tab6 = tabulate([["Version", vrs6], ["Damage", Data6[0]], ["Cancel", Data6[1]], ["Guard", Data6[2]], ["Startup", Data6[3]], ["Active", Data6[4]], ["Recovery", Data6[5]], ["Frame Adv.", Data6[6]], ["Attribute", Data6[7]]], tablefmt='simple', stralign='left')
            tab7 = tabulate([["Version", vrs7], ["Damage", Data7[0]], ["Cancel", Data7[1]], ["Guard", Data7[2]], ["Startup", Data7[3]], ["Active", Data7[4]], ["Recovery", Data7[5]], ["Frame Adv.", Data7[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mps[0] + "\n" + "*" + mps[1] + "\n" + "*" + mps[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Choujin Kaihi: Zettou"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCP_Amane_Zettou.png')
            embed.add_field(name="236A", value=tab)
            embed.add_field(name="214A", value=tab1)
            embed.add_field(name="236B", value=tab2)
            embed.add_field(name="214B", value=tab3)
            embed.add_field(name="J.236A", value=tab4)
            embed.add_field(name="J.214A", value=tab5)
            embed.add_field(name="J.236B", value=tab6)
            embed.add_field(name="J.214B", value=tab7)
            embed.add_field(name="Stance:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="214c", pass_context=False)  # Amane from blazblue
    async def _214c_am(self): 
        """A patch for his dead zone"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]

            Data = [head.get_text() for head in headers.find_all('td')]         

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Gangan Senbu: Ginga"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/93/BBCF_Amane_Ginga.png')
            embed.add_field(name="Frame Data", value=tab)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @am.command(name="236236d", pass_context=False)  # Amane from blazblue
    async def _236236d_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mps = [fo.get_text() for fo in info1.find_all('li')]
            mp1 = info1.find_all('p')[0].get_text()
            mp2 = info1.find_all('p')[1].get_text()
            mp3 = info1.find_all('p')[2].get_text()
            mp4 = info1.find_all('p')[3].get_text()
            mp5 = info1.find_all('p')[4].get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n" + "*" + mps[1] + "\n" + "*" + mps[2] + "\n" + "*" + mps[3] + "\n" + mps[4] + "\n" + "*" + mps[5] + "\n" + "*" + mps[6] + "\n" + "*" + mps[7] + "\n" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "\n" + "*" + mps[8] + "\n" + "*" + mps[9] + "\n" + "*" + mp4 + "\n" + "*" + mps[10] + "\n" + "*" + mp5 + "\n" + "*" + mps[11] + "```"
			
            embed = discord.Embed()
            embed.title = "Kyouryuu Tokkou: Seijyuu Rensoukyaku"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8f/BBCP_Amane_SeijyuuRensoukyaku.png')
            embed.add_field(name="Lv. 1", value=tab)
            embed.add_field(name="Lv. 2", value=tab1)
            embed.add_field(name="Lv. 3", value=tab2)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!	
			
    @am.command(name="632146d", pass_context=False)  # Amane from blazblue
    async def _632146d_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mps = [fo.get_text() for fo in info1.find_all('li')]
            mp1 = info1.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n" + "*" + mps[1] + "\n" + "*" + mps[2] + "\n" + "*" + mps[3] + "\n"  + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Kaizoku Senkou: Goukai Rasen Renpa"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/79/BBCP_Amane_GoukaiRasenRenpa.png')
            embed.add_field(name="Lv. 1", value=tab)
            embed.add_field(name="Lv. 2", value=tab1)
            embed.add_field(name="Lv. 3", value=tab2)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!	
			
    @am.command(name="abcd", pass_context=False)  # Amane from blazblue
    async def _abcd_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[3]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mps = [fo.get_text() for fo in info1.find_all('li')]
            mp1 = info1.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n" + "*" + mps[1] + "\n"  + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Hazan Gekisou: Jakua Dengekitai"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f9/BBCF_Amane_JiyakuoDengekitai.png')
            embed.add_field(name="Normal", value=tab)
            embed.add_field(name="Active Flow", value=tab1)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!	
			
    @am.command(name="222d", pass_context=False)  # Amane from blazblue
    async def _222d_am(self):   
        """I wanna be, forever young"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = info1.find('li').get_text()
            mp1 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps + "\n"  + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Jyatoku Meika: Gouha Houyou"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e5/BBCP_Amane_GouhaHouyou.png')
            embed.add_field(name="Normal", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!	
			
			
#################################################################################################################################################			
    @ra.command(name="5a", pass_context=False)  # Amane from blazblue
    async def _5a_ra(self): 
        """Although the start-up is fast, 5A only sees somewhat occasional use"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info1.find_all('li')]
            mp1 = [ti.get_text() for ti in info1.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n"  + "*" + mps[1] + "\n"  + "*" + mp1[0] + "\n"  + "*" + mp1[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f7/BBCS_Ragna_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!	
			
    @ra.command(name="5b", pass_context=False)  # Amane from blazblue
    async def _5b_ra(self):   
        """Fast and powerful, but can be dangerous to use in certain situations"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info1.find_all('li')]
            mp1 = [ti.get_text() for ti in info1.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n"  + "*" + mps[1] + "\n"  + "*" + mps[2] + "\n"  + "*" + mps[3] + "```"
            mpd = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a6/BBCS_Ragna_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5B Cont:"
            embed1.add_field(name='Attack Props', value=mpd, inline='true')
            
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!	
			
    @ra.command(name="5c", pass_context=False)  # Amane from blazblue
    async def _5c_ra(self):   
        """The slower, but longer alternative to 5B"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info1.find_all('li')]
            mp1 = [ui.get_text() for ui in info1.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n"  + "*" + mps[1] + "\n"  + "*" + mps[2] + "\n"  + "*" + mps[3] + "\n"  + "*" + mps[4] + "```"
            mpd ="```" + "\n" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5C Cont:"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/93/BBCS_Ragna_5C.png')
            embed1.add_field(name='Attack Props', value=mpd, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!

    @ra.command(name="2a", pass_context=False)  # Amane from blazblue
    async def _2a_ra(self):   
        """The ±0 frame advantage makes 2A a useful pressure tool"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info1.find_all('li')]
            mp1 = [ui.get_text() for ui in info1.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n"  + "*" + mps[1] + "\n"  + "*" + mp1[0] + "\n"  + "*" + mp1[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "2a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/03/BBCS_Ragna_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!			

    @ra.command(name="2b", pass_context=False)  # Amane from blazblue
    async def _2b_ra(self):  
        """Fast low, and can also be used as a footsie"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info1.find_all('li')]
            mp1 = [ui.get_text() for ui in info1.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n"  + "*" + mps[1] + "\n"  + "*" + mp1[0] + "\n"  + "*" + mp1[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c6/BBCS_Ragna_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!		

    @ra.command(name="2c", pass_context=False)  # Amane from blazblue
    async def _2c_ra(self): 
        """No longer a fatal, but still a very good move"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info1.find_all('li')]
            mp1 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n"  + "*" + mps[1] + "\n"  + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/28/BBCS_Ragna_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!				

    @ra.command(name="6a", pass_context=False)  # Amane from blazblue
    async def _6a_ra(self):   
        """An anti-air that has been buffed"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info1.find_all('li')]
            mp1 = [ui.get_text() for ui in info1.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n"  + "*" + mps[1] + "\n"  + "*" + mps[2] + "\n"  + "*" + mp1[0] + "\n"  + "*" + mp1[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fd/BBCS_Ragna_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!		
			
    @ra.command(name="6b", pass_context=False)  # Amane from blazblue
    async def _6b_ra(self):  
        """No chains into C make this move a dangerous one to use"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info1.find_all('li')]
            mp1 = [ui.get_text() for ui in info1.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n"  + "*" + mps[1] + "\n"  + "*" + mps[2] + "\n"  + "*" + mps[3] + "\n"  + "*" + mp1[0] + "\n"  + "*" + mp1[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/92/BBCS_Ragna_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!	

    @ra.command(name="6c", pass_context=False)  # Amane from blazblue
    async def _6c_ra(self):   
        """Staple launcher off crouching opponents"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = info1.find('li').get_text()
            mp1 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps + "\n"  + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ec/BBCS_Ragna_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!	
			
    @ra.command(name="3c", pass_context=False)  # Amane from blazblue
    async def _3c_ra(self):   
        """The okizeme setup off this move is still good, but not as versatile anymore"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info1.find_all('li')]
            mp1 = [ui.get_text() for ui in info1.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n"  + "*" + mp1[0] + "```" 
            mpd = "```" + "*" + mp1[1]  + "\n"  + "*" + mps[1] + "\n"  + "*" + mps[2] + "\n"  + "*" + mps[3] + "\n"  + "*" + mps[4] + "\n"  + "*" + mps[5] + "\n"  + "*" + mp1[2] + "```" 
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Cont:"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ee/BBCS_Ragna_3C.png')
            embed1.add_field(name='Attack Props', value=mpd, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!	
			
    @ra.command(name="ja", pass_context=False)  # Amane from blazblue
    async def _ja_ra(self):   
        """Simple aerial jab"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCS_Ragna_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!	
			
    @ra.command(name="jb", pass_context=False)  # Amane from blazblue
    async def _jb_ra(self): 
        """Aerial crossup move"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b4/BBCS_Ragna_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!	
			
    @ra.command(name="jc", pass_context=False)  # Amane from blazblue
    async def _jc_ra(self):  
        """Main aerial approach, due to the huge hitbox"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/07/BBCS_Ragna_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!	
			
    @ra.command(name="5d", pass_context=False)  # Amane from blazblue
    async def _5d_ra(self): 
        """Valuable in combos, not so much elsewhere"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[5]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp = [ninja.get_text() for ninja in info.find_all('li')]
            mpp = [nin.get_text() for nin in info1.find_all('li')]
            mp2 = info.find('p').get_text()
            mp22 = info1.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            fro = "```" + "*" + mp[0] + "\n" + "*" + mp[1] + "\n" + "*" + mp2 + "```"
            afro = "```" + "*" + mpp[0] + "\n" + "*" + mpp[1] + "\n" + "*" + mp22 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5b/BBCS_Ragna_5D.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=fro, inline='true')
            embed.add_field(name="OD Attack Props:", value=afro, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @ra.command(name="2d", pass_context=False)  # Amane from blazblue
    async def _2d_ra(self):   
        """Safe move when spaced properly"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[5]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp = [ninja.get_text() for ninja in info.find_all('li')]
            mpp = [nin.get_text() for nin in info1.find_all('li')]
            mp2 = info.find('p').get_text()
            mp22 = info1.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            fro = "```" + "*" + mp[0] + "\n" + "*" + mp[1] + "\n" + "*" + mp2 + "```"
            afro = "```" + "*" + mpp[0] + "\n" + "*" + mpp[1] + "\n" + "*" + mpp[2] + "\n" + "*" + mp22 + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f4/BBCS_Ragna_2D.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Normal Attack Props:", value=fro, inline='true')
            embed.add_field(name="OD Attack Props:", value=afro, inline='true')
			
            await self.bot.say(embed=embed)	
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @ra.command(name="6d", pass_context=False)  # Amane from blazblue
    async def _6d_ra(self): 
        """Great mix-up potential, but can be tricky to execute consistently"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[5]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp = [ninja.get_text() for ninja in info.find_all('li')]
            mpp = [nin.get_text() for nin in info1.find_all('li')]
            mp2 = [na.get_text() for na in info.find_all('p')]
            mp22 = info1.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            fro = "```" + "*" + mp[0] + "\n" + "*" + mp[1] + "\n" + "*" + mp[2] + "\n" + "*" + mp[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            froc = "```" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```" 
            afro = "```" + "*" + mpp[0] + "\n" + "*" + mpp[1] + "\n" + "*" + mpp[2] + "\n" + "*" + mpp[3] + "\n" + "*" + mp22 + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.add_field(name="Normal FD", value=tab)
            embed.add_field(name="OD FD", value=tab1)
            embed.add_field(name="Attack Props:", value=fro, inline='true')
            embed.add_field(name="OD Attack Props:", value=afro, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6D Norm Cont:"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8d/BBCS_Ragna_6D.png')
            embed1.add_field(name='Cont.', value=froc, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston
			
    @ra.command(name="jd", pass_context=False)  # Amane from blazblue
    async def _jd_ra(self):   
        """Trades damage for lifesteal"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[5]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp = info.find('li').get_text()
            mpp = info.find('p').get_text()
            mp2 = info1.find('li').get_text()
            mp22 = info1.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            fro = "```" + "*" + mp + "\n" + "*" + mpp + "```"
            afro = "```" + "*" + mp2 + "\n" + "*" + mp22 + "```"
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d5/BBCS_Ragna_jD.png')
            embed.add_field(name="Normal FD", value=tab)
            embed.add_field(name="OD FD", value=tab1)
            embed.add_field(name="Normal Attack Props:", value=fro, inline='true')
            embed.add_field(name="OD Attack Props:", value=afro, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @ra.command(name="ft", pass_context=False)  # Amane from blazblue
    async def _ft_ra(self):   
        """This will sting!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('li').get_text()
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            fro = "```" + "*" + mp + "\n" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c2/BBCS_Ragna_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=fro, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @ra.command(name="bt", pass_context=False)  # Amane from blazblue
    async def _bt_ra(self):   
        """Here comes the combo"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('li').get_text()
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            fro = "```" + "*" + mp + "\n" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCS_Ragna_BThrow.png')
            embed.add_field(name="J.A", value=tab)
            embed.add_field(name=" 5D Attack Props:", value=fro, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @ra.command(name="at", pass_context=False)  # Amane from blazblue
    async def _at_ra(self):   
        """Pretty much his only mandatory throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('li').get_text()
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            fro = "```" + "*" + mp + "\n" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/03/BBCS_Ragna_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=fro, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @ra.command(name="ca", pass_context=False)  # Amane from blazblue
    async def _ca_ra(self):   
        """Same animation as 5B, with the same start-up and hitbox"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('li').get_text()
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            fro = "```" + "*" + mp + "\n" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a6/BBCS_Ragna_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=fro, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @ra.command(name="ct", pass_context=False)  # Amane from blazblue
    async def _ct_ra(self): 
        """A Crush Trigger that is as basic as you can get"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp = [nin.get_text() for nin in info.find_all('li')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            fro = "```" + "*" + mp[0] + "\n" + "*" + mp[1] + "\n" + "*" + mp[2] + "\n" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a0/BBCP_Ragna_CrushTrigger.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=fro, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @ra.command(name="214a", pass_context=False)  # Amane from blazblue
    async def _214a_ra(self): 
        """Combo material for just about any mid-screen combo, Follow-up:  Typical combo ender for pushing your opponent towards the corner and for good corner okizeme"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            my_table1 = table[47]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[3]
            info = table_body1.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[4]

			
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            fro = [fo.get_text() for fo in info.find_all('li')]
            fur = [fo1.get_text() for fo1 in info1.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            ki = "```" + "*" + fro[0] + "\n" + "*" + fro[1] + "```"
            ur = "```" + "*" + fur[0] + "\n" + "*" + fur[1] + "```"
			
			
            embed = discord.Embed()
            embed.title = "Hell's Fang"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/70/BBCS_Ragna_HellsFang.png')
            embed.add_field(name="Hell's Fang Frame Data", value=tab)
			
            embed1 = discord.Embed()
            embed1.title = "Hell's Fang: Follow-up"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Ragna_HellsFangFollowup.png')
            embed1.add_field(name="214D Follw-up Normal Frame Data", value=tab1)
            embed1.add_field(name="214D Follow-up OverDrive Frame Data", value=tab2)
            embed1.add_field(name="Follow-up Normal Attack Properties", value=ki)
            embed1.add_field(name="Follow-up OverDrive Attack Properties", value=ur)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @ra.command(name="623c", pass_context=False)  # Amane from blazblue
    async def _623c_ra(self):
        """Wake up DP! C version is your go-to reversal"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            my_table1 = table[51]
            my_table2 = table[53]
            my_table3 = table[55]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            table_body3 = my_table3.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
			
            headers2 = table_body1.find_all('tr')[1]
            info = table_body1.find_all('tr')[2]
			
            headers3 = table_body2.find_all('tr')[1]
            info1 =table_body2.find_all('tr')[2]
			
            headers4 = table_body3.find_all('tr')[1]
            info2 = table_body3.find_all('tr')[2]
            headers5 = table_body3.find_all('tr')[3]
            info3 = table_body3.find_all('tr')[4]
			

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers4.find('th').get_text()
            vrs3 = headers5.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            po = info.find('li').get_text()
            po1 = info.find('p').get_text()
            po2 = [rs.get_text() for rs in info1.find_all('li')]
            po3 = info1.find('p').get_text()
            po4 = info2.find('li').get_text()
            po5 = [ns.get_text() for ns in info3.find_all('li')]
            po6 = info3.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs2], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs3], ["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            ki = "```" + "*" + po + "\n" + "*" + po1 + "```"
            ur = "```" + "*" + po2[0] + "\n" + "*" + po2[1] + "\n" + "*" + po3 + "```"
            jsa = "```" + "*" + po4 + "```"
            pol = "```" + "*" + po5[0] + "\n" + "*" + po5[1] + "\n" + "*" + po5[2] + "\n" + "*" + po6 + "```"
			
			
            embed = discord.Embed()
            embed.title = "C Inferno Divider"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/50/BBCS_Ragna_InfernoDivider.png')
            embed.add_field(name="C Inferno Divider", value=tab)
            embed.add_field(name="Aerial C Inferno Divider", value=tab1)
			
            embed1 = discord.Embed()
            embed1.title = "Upper: 236C during Inferno Divider"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/39/BBCS_Ragna_Upper.png')
            embed1.add_field(name="Frame Data", value=tab2)
            embed1.add_field(name="Attack Properties", value=ki)
			
            embed2 = discord.Embed()
            embed2.title = "Straight Punch: 236C after Upper"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/5/5a/BBCS_Ragna_Straight.png')
            embed2.add_field(name="Frame Data", value=tab3)
            embed2.add_field(name="Attack Properties", value=ur)
			
            embed3 = discord.Embed()
            embed3.title = "Ax Kick: 214D after Upper"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/1/19/BBCS_Ragna_AxKick.png')
            embed3.add_field(name="Normal:  Frame Data", value=tab4)
            embed3.add_field(name="OD:  Frame Data", value=tab5)
            embed3.add_field(name="Normal Attack Properties", value=jsa)
            embed3.add_field(name="OD Attack Properties", value=pol)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @ra.command(name="623d", pass_context=False)  # Amane from blazblue
    async def _623d_ra(self):  
        """Damage DP, D version is your go-to combo ender for damage and light okizeme"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            my_table1 = table[51]
            my_table2 = table[53]
            my_table3 = table[55]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            table_body3 = my_table3.find("table")
            headers = table_body.find_all('tr')[3]
            info4 = table_body.find_all('tr')[4]
            headers1 = table_body.find_all('tr')[5]
            info5 = table_body.find_all('tr')[6]
            headers6 = table_body.find_all('tr')[7]
            info6 = table_body.find_all('tr')[8]
            headers7 = table_body.find_all('tr')[9]
            info7 = table_body.find_all('tr')[10]
			
            headers2 = table_body1.find_all('tr')[1]
            info = table_body1.find_all('tr')[2]
			
            headers3 = table_body2.find_all('tr')[1]
            info1 =table_body2.find_all('tr')[2]
			
            headers4 = table_body3.find_all('tr')[1]
            info2 = table_body3.find_all('tr')[2]
            headers5 = table_body3.find_all('tr')[3]
            info3 = table_body3.find_all('tr')[4]
			

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers4.find('th').get_text()
            vrs3 = headers5.find('th').get_text()
            vrs4 = headers6.find('th').get_text()
            vrs5 = headers7.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]
            Data7 = [head7.get_text() for head7 in headers7.find_all('td')]
            po = info.find('li').get_text()
            po1 = info.find('p').get_text()
            po2 = [rs.get_text() for rs in info1.find_all('li')]
            po3 = info1.find('p').get_text()
            po4 = info2.find('li').get_text()
            po5 = [ns.get_text() for ns in info3.find_all('li')]
            po6 = info3.find('p').get_text()
            po7 = info4.find('li').get_text()
            po8 = info5.find('li').get_text()
            po9 = info6.find('li').get_text()
            po10 = info7.find('li').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab6 = tabulate([["Version", vrs4], ["Damage", Data6[0]], ["Cancel", Data6[1]], ["Guard", Data6[2]], ["Startup", Data6[3]], ["Active", Data6[4]], ["Recovery", Data6[5]], ["Frame Adv.", Data6[6]], ["Attribute", Data6[7]]], tablefmt='simple', stralign='left')
            tab7 = tabulate([["Version", vrs5], ["Damage", Data7[0]], ["Cancel", Data7[1]], ["Guard", Data7[2]], ["Startup", Data7[3]], ["Active", Data7[4]], ["Recovery", Data7[5]], ["Frame Adv.", Data7[6]], ["Attribute", Data7[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs2], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs3], ["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            ki = "```" + "*" + po + "\n" + "*" + po1 + "```"
            ur = "```" + "*" + po2[0] + "\n" + "*" + po2[1] + "\n" + "*" + po3 + "```"
            jsa = "```" + "*" + po4 + "```"
            pol = "```" + "*" + po5[0] + "\n" + "*" + po5[1] + "\n" + "*" + po5[2] + "\n" + "*" + po6 + "```"
            bji = "```" + "*" + po7 + "```"
            uja = "```" + "*" + po8 + "```"
            joa = "```" + "*" + po9 + "```"
            lop = "```" + "*" + po10 + "```"
			
			
            embed = discord.Embed()
            embed.title = "D Inferno Divider"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/50/BBCS_Ragna_InfernoDivider.png')
            embed.add_field(name="D Inferno Divider", value=tab)
            embed.add_field(name="Aerial D Inferno Divider", value=tab1)
            embed.add_field(name="Over Drive D Inferno Divider", value=tab6)
            embed.add_field(name="Over Drive Aerial D Inferno Divider", value=tab7)
            embed.add_field(name="D Inferno Divider:  Attack Properties", value=bji)
            embed.add_field(name="Aerial D Inferno Divider:  Attack Properties", value=uja)
            embed.add_field(name="OD D Inferno Divider:  Attack Properties", value=joa)
            embed.add_field(name="OD Aerial D Inferno Divider:  Attack Properties", value=lop)
			
            embed1 = discord.Embed()
            embed1.title = "Upper: 236C during Inferno Divider"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/39/BBCS_Ragna_Upper.png')
            embed1.add_field(name="Frame Data", value=tab2)
            embed1.add_field(name="Attack Properties", value=ki)
			
            embed2 = discord.Embed()
            embed2.title = "Straight Punch: 236C after Upper"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/5/5a/BBCS_Ragna_Straight.png')
            embed2.add_field(name="Frame Data", value=tab3)
            embed2.add_field(name="Attack Properties", value=ur)
			
            embed3 = discord.Embed()
            embed3.title = "Ax Kick: 214D after Upper"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/1/19/BBCS_Ragna_AxKick.png')
            embed3.add_field(name="Normal:  Frame Data", value=tab4)
            embed3.add_field(name="OD:  Frame Data", value=tab5)
            embed3.add_field(name="Normal Attack Properties", value=jsa)
            embed3.add_field(name="OD Attack Properties", value=pol)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @ra.command(name="214b", pass_context=False)  # Amane from blazblue
    async def _214b_ra(self):   
        """A risky overhead that now functions as a mid-screen combo part"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            my_table1 = table[59]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body1.find_all('tr')[1]
            headers3 = table_body1.find_all('tr')[3]
            info = table_body1.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[4]

			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            fro = info.find('li').get_text()
            fur = info1.find('li').get_text()
            bur = [bo.get_text() for bo in info1.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            ki = "```" + "*" + fro + "```"
            ur = "```" + "*" + fur + "\n" + "*" + bur[0] + "\n" + "*" + bur[1] + "```"
			
			
            embed = discord.Embed()
            embed.title = "Gauntlet Hades"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/de/BBCS_Ragna_GauntletHades.png')
            embed.add_field(name="Frame Data", value=tab)
			
            embed1 = discord.Embed()
            embed1.title = "Gauntlet Hades: Spin Kick"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/6f/BBCS_Ragna_SpinKick.png')
            embed1.add_field(name="214D Follw-up Normal Frame Data", value=tab1)
            embed1.add_field(name="214D Follow-up OverDrive Frame Data", value=tab2)
            embed1.add_field(name="Follow-up Normal Attack Properties", value=ki)
            embed1.add_field(name="Follow-up OverDrive Attack Properties", value=ur)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @ra.command(name="236d", pass_context=False)  # Amane from blazblue
    async def _236d_ra(self):   
        """A beefy projectile used for resetting pressure. Now actually moves!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [nin.get_text() for nin in info1.find_all('p')]
            mp2 = info1.find('li').get_text()
            mp = info.find('li').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            fro = "```" + "*" + mp2 + "\n" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
            fur = "```" + "*" + mp + "```"
			
            embed = discord.Embed()
            embed.title = "Dead Spike"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5f/BBCP_Ragna_DeadSpike.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name=" Normal Dead Spike Attack Props:", value=fur, inline='true')
            embed.add_field(name=" OD  Dead Spike Attack Props:", value=fro, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @ra.command(name="22c", pass_context=False)  # Amane from blazblue
    async def _22c_ra(self):   
        """Massive corner carry potential mid-screen and a fantastic combo part in the corner"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [nin.get_text() for nin in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            fro = "```" + "\n" + "*" + mp1[0] + "```"
            doh = "```" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Not Over Yet"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=fro, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Attack Properties Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/13/BBCS_Ragna_NotOverYet.png')
            embed1.add_field(name="Part 2:", value=doh, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @ra.command(name="214d", pass_context=False)  # Amane from blazblue
    async def _214d_ra(self):  
        """The new king of lifesteal specials. Ground version is incredibly slow but advantageous."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            table_body1 = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[6]

			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            fro = info.find_all('li')[0].get_text()
            fro1 = info.find_all('li')[1].get_text()
            fur = info1.find_all('li')[0].get_text()
            fur1 = info1.find_all('li')[1].get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            ki = "```" + "*" + fro + "\n" + "*" + fro1 + "```"
            ur = "```" + "*" + fur + "\n" + "*" + fur1 + "```"
			
            embed = discord.Embed()
            embed.title = "Blood Scythe"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ec/BBCP_Ragna_BloodScythe.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="OverDrive Frame Data", value=tab1)
            embed.add_field(name="Normal Attack Properties", value=ki, inline='true')
            embed.add_field(name="OverDrive Attack Properties", value=ur, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @ra.command(name="j214d", pass_context=False)  # Amane from blazblue
    async def _j214d_ra(self):   
        """The new king of lifesteal specials.  Aerial version is great for corner carry."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            table_body1 = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[7]
            info = table_body.find_all('tr')[4]
            info1 = table_body.find_all('tr')[8]

			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            fro = info.find('li').get_text()
            fur = info1.find('li').get_text()
            fur1 = [furry.get_text() for furry in info1.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            ki = "```" + "*" + fro + "```"
            ur = "```" + "*" + fur + "\n" + "*" + fur1[0] + "```"
            za = "```" + "*" + fur1[1] + "\n" + "*" + fur1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Aerial Blood Scythe"
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="OverDrive Frame Data", value=tab1)
			
            embed1 = discord.Embed()
            embed1.title = "Attack Properties"
            embed1.add_field(name="Normal Attack Properties", value=ki, inline='true')
            embed1.add_field(name="OverDrive Attack Properties", value=ur, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Attack Properties Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/e/ec/BBCP_Ragna_BloodScythe.png')
            embed2.add_field(name="OverDrive Attack Properties", value=za, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @ra.command(name="j214c", pass_context=False)  # Amane from blazblue
    async def _j214c_ra(self):   
        """When ending air combos, do you choose between okizeme, or damage?"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            my_table1 = table[69]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[3]
            info = table_body1.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[4]

			
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            fro = info.find('li').get_text()
            fur = info1.find('li').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            ki = "```" + "*" + fro + "```"
            ur = "```" + "*" + fur + "```"
			
			
            embed = discord.Embed()
            embed.title = "Nightmare Edge"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fa/BBCF_Ragna_NightmareEdge.png')
            embed.add_field(name="Frame Data", value=tab)
			
            embed1 = discord.Embed()
            embed1.title = "Nightmare Edge: Follow-up"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/fc/BBCF_Ragna_NightmareEdgeFollowUp.png')
            embed1.add_field(name="214D Follow-up Normal Frame Data", value=tab1)
            embed1.add_field(name="214D Follow-up OverDrive Frame Data", value=tab2)
            embed1.add_field(name="Follow-up Normal Attack Properties", value=ki, inline='true')
            embed1.add_field(name="Follow-up OverDrive Attack Properties", value=ur, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @ra.command(name="632146d", pass_context=False)  # Amane from blazblue
    async def _632146d_ra(self):  
        """Use this outside of Overdrive if it will kill. Use this during Overdrive for Soul Eater progression and possible relaunches in the corner."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[4]

			
            vrs1 = headers.find('th').get_text()
            vrs2 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            fro = info.find_all('li')[0].get_text()
            fro1 = info.find_all('li')[1].get_text()
            fur = info1.find_all('li')[0].get_text()
            fur1 = info1.find_all('li')[1].get_text()
            fur2 = [furs.get_text() for furs in info1.find_all('p')]

            tab = tabulate([["Version", vrs1], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs2], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            ki = "```" + "*" + fro + "\n" + "*" + fro1 + "```"
            ur = "```" + "*" + fur + "\n" + "*" + fur1 + "\n" + "*" + fur2[0] + "\n" + "*" + fur2[1] + "\n" + "*" + fur2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Carnage Scissors"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1b/BBCS_Ragna_CarnageScissors.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="OverDrive Frame Data", value=tab1)
            embed.add_field(name="Normal Attack Properties", value=ki, inline='true')
            embed.add_field(name="OverDrive Attack Properties", value=ur, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @ra.command(name="214214d", pass_context=False)  # Amane from blazblue
    async def _214214d_ra(self):  
        """A useless, blockable move without Overdrive. In OD, it's unblockable and actually a very good move."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[4]
			
            vrs1 = headers.find('th').get_text()
            vrs2 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            fro = info.find_all('li')[0].get_text()
            fro1 = info.find_all('li')[1].get_text()
            fur = info1.find_all('li')[0].get_text()
            fur1 = info1.find_all('li')[1].get_text()
            fur2 = [furs.get_text() for furs in info1.find_all('p')]

            tab = tabulate([["Version", vrs1], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs2], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            ki = "```" + "*" + fro + "\n" + "*" + fro1 + "```"
            ur = "```" + "*" + fur + "\n" + "*" + fur1 + "\n" + "*" + fur2[0] + "\n" + "*" + fur2[1] + "\n" + "*" + fur2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Devoured by Darkness"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6f/BBCS_Ragna_DevouredByDarkness.png')
            embed.add_field(name="214D Follow-up Normal Frame Data", value=tab)
            embed.add_field(name="214D Follow-up OverDrive Frame Data", value=tab1)
            embed.add_field(name="Follow-up Normal Attack Properties", value=ki, inline='true')
            embed.add_field(name="Follow-up OverDrive Attack Properties", value=ur, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @ra.command(name="abcd", pass_context=False)  # Amane from blazblue
    async def _abcd_ra(self):  
        """Exceed Accel:  A+B+C+D during Overdrive"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            vrs1 = headers.find('th').get_text()
            vrs2 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            fro = info.find_all('li')[0].get_text()
            fro1 = info.find_all('li')[1].get_text()
            fro2 = info.find('p').get_text()

            tab = tabulate([["Version", vrs1], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs2], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            ur = "```" + "*" + fro + "\n" + "*" + fro1 + "\n" + "*" + fro2 + "```"
			
            embed1 = discord.Embed()
            embed1.title = "Seed of Tartarus"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/1f/BBCF_Ragna_SeedOfTartarus.png')
            embed1.add_field(name="Normal Frame Data", value=tab)
            embed1.add_field(name="Active Flow Frame Data", value=tab1)
            embed1.add_field(name="Attack Properties", value=ur, inline='true')
			
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @ra.command(name="2141236c", pass_context=False)  # Amane from blazblue
    async def _2141236c_ra(self):  
        """There is no Hell, only darkness."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            fro2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            ur = "```" + "*" + fro2 + "```"
			
            embed1 = discord.Embed()
            embed1.title = "Black Onslaught"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/cc/BBCS_Ragna_BlackOnslaught2.png')
            embed1.add_field(name="Normal Frame Data", value=tab)
            embed1.add_field(name="Attack Properties", value=ur, inline='true')
			
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
#################################################################################################################################################

    @es.command(name="5a", pass_context=False)  # Es from blazblue
    async def _5a_es(self):
        """5a"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find('li').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "```"
            
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/thumb/1/15/BBCF_Es_5A.png/175px-BBCF_Es_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

			
            await self.bot.say(embed=embed)
            
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @es.command(name="5b", pass_context=False)  # Es from blazblue
    async def _5b_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/09/BBCF_Es_5B.png')
            embed.add_field(name="Frame Data", value=tab)
			
            await self.bot.say(embed=embed)
			
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @es.command(name="5c", pass_context=False)  # Es from blazblue
    async def _5c_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7b/BBCF_Es_5C.png')
            embed.add_field(name="Frame Data", value=tab)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
	
    @es.command(name="2a", pass_context=False)  # Es from blazblue
    async def _2a_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/62/BBCF_Es_2A.png')
            embed.add_field(name="Frame Data", value=tab)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @es.command(name="2b", pass_context=False)  # Es from blazblue
    async def _2b_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ee/BBCF_Es_2B.png')
            embed.add_field(name="Frame Data", value=tab)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @es.command(name="2c", pass_context=False)  # Es from blazblue
    async def _2c_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/91/BBCF_Es_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @es.command(name="6a", pass_context=False)  # Es from blazblue
    async def _6a_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find_all('li')[2].get_text()
            mp4 = info.find_all('li')[3].get_text()            

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3  + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/dc/BBCF_Es_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @es.command(name="6b", pass_context=False)  # Es from blazblue
    async def _6b_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()           

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ea/BBCF_Es_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @es.command(name="6c", pass_context=False)  # Es from blazblue
    async def _6c_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()           

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/43/BBCF_Es_6C.png')
            embed.add_field(name="Normal 6C", value=tab)
            embed.add_field(name="Dash 6C", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @es.command(name="3c", pass_context=False)  # Es from blazblue
    async def _3c_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find_all('li')[2].get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4f/BBCF_Es_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @es.command(name="ja", pass_context=False)  # Es from blazblue
    async def _ja_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1b/BBCF_Es_jA.png')
            embed.add_field(name="Frame Data", value=tab)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @es.command(name="jb", pass_context=False)  # Es from blazblue
    async def _jb_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()           

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9f/BBCF_Es_jB.png')
            embed.add_field(name="Normal", value=tab)
            embed.add_field(name="Follow-up", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @es.command(name="jc", pass_context=False)  # Es from blazblue
    async def _jc_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "JC"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7f/BBCF_Es_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @es.command(name="5d", pass_context=False)  # Es from blazblue
    async def _5d_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]

			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs3 = headers3.find('th').get_text()
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]  			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f0/BBCF_Es_5D.png')
            embed.add_field(name="Normal", value=tab)
            embed.add_field(name="OD", value=tab1)
            embed.add_field(name="Crest", value=tab2)
            embed.add_field(name="OD Crest", value=tab3)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @es.command(name="2d", pass_context=False)  # Es from blazblue
    async def _2d_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]

			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs3 = headers3.find('th').get_text()
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')] 			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6a/BBCF_Es_2D.png')
            embed.add_field(name="Normal", value=tab)
            embed.add_field(name="OD", value=tab1)
            embed.add_field(name="Crest", value=tab2)
            embed.add_field(name="OD Crest", value=tab3)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @es.command(name="6d", pass_context=False)  # Es from blazblue
    async def _6d_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]

			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs3 = headers3.find('th').get_text()
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')] 			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/60/BBCF_Es_6D.png')
            embed.add_field(name="Normal", value=tab)
            embed.add_field(name="OD", value=tab1)
            embed.add_field(name="Crest", value=tab2)
            embed.add_field(name="OD Crest", value=tab3)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @es.command(name="jd", pass_context=False)  # Es from blazblue
    async def _jd_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]

			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs3 = headers3.find('th').get_text()
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')] 			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')		

			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a6/BBCF_Es_jD.png')
            embed.add_field(name="Normal", value=tab)
            embed.add_field(name="OD", value=tab1)
            embed.add_field(name="Crest", value=tab2)
            embed.add_field(name="OD Crest", value=tab3)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @es.command(name="ft", pass_context=False)  # Es from blazblue
    async def _ft_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/21/BBCF_Es_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @es.command(name="bt", pass_context=False)  # Es from blazblue
    async def _bt_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e5/BBCF_Es_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @es.command(name="at", pass_context=False)  # Es from blazblue
    async def _at_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[5]
            info =  table_body.find_all('tr')[6]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
		

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCF_Es_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @es.command(name="ca", pass_context=False)  # Es from blazblue
    async def _ca_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ea/BBCF_Es_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")		

    @es.command(name="ct", pass_context=False)  # Es from blazblue
    async def _ct_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/37/BBCF_Es_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @es.command(name="214d", pass_context=False)  # Es from blazblue
    async def _s1_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find('p').get_text()

		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Type: Enchanter Bors"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/aa/BBCF_Es_EnchanterBors.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @es.command(name="623c", pass_context=False)  # Es from blazblue
    async def _s2_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find_all('p')[0].get_text()
            mp4 = info.find_all('p')[1].get_text()         

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Type: Slasher Griflet"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/75/BBCF_Es_SlasherGriflet.png')
            embed.add_field(name="Normal 623C", value=tab)
            embed.add_field(name="Buffed", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @es.command(name="214a", pass_context=False)  # Es from blazblue
    async def _s3_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find_all('li')[2].get_text()        

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Type: Assaulter Erec"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/93/BBCF_Es_AssaulterErec.png')
            #embed.set_footer(icon_url='http://www.dustloop.com/wiki/index.php/File:BBCF_Es_AssaulterErec2.png') It does not look like it supports multiple inages being embedded, commented out until this changes.
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")		

    @es.command(name="214b", pass_context=False)  # Es from blazblue
    async def _s4_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[5]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs3 = headers3.find('th').get_text()
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
       

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "* Fatal Counter on Charged and Charged Enhanced" + "```"
			
            embed = discord.Embed()
            embed.title = "Type: Slasher Gawain"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/00/BBCF_Es_Gawain.png')
            embed.add_field(name="Uncharged", value=tab)
            embed.add_field(name="Enhanced Uncharged", value=tab1)
            embed.add_field(name="Charged", value=tab2)
            embed.add_field(name="Enhanced Charged", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")		

    @es.command(name="214c", pass_context=False)  # Es from blazblue
    async def _s5_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs3 = headers3.find('th').get_text()
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find('p').get_text()
       

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Type: Slasher Mordred"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c2/BBCF_Es_SlasherMordred2.png')
            embed.add_field(name="214C", value=tab)
            embed.add_field(name="Enhanced 214C", value=tab1)
            embed.add_field(name="214C->214C", value=tab2)
            embed.add_field(name="Enhanced 214C->214C", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @es.command(name="236ab", aliases="236b", pass_context=False)  # Es from blazblue
    async def _s6_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            headers4 = table_body.find_all('tr')[5]
            headers5 = table_body.find_all('tr')[6]
            info = table_body.find_all('tr')[7]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs3 = headers3.find('th').get_text()
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            vrs4 = headers4.find('th').get_text()
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            vrs5 = headers5.find('th').get_text()
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            mp3 = info.find('p').get_text()
       

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Type: Shooter Breunor"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCF_Es_ShooterBreunorAir.png')
            embed.add_field(name="Ground A", value=tab)
            embed.add_field(name="Ground B", value=tab1)
            embed.add_field(name="Ground AB", value=tab2)
            embed.add_field(name="Ground BA", value=tab3)
            embed.add_field(name="Air A", value=tab4)
            embed.add_field(name="Air B", value=tab5)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @es.command(name="j2b", pass_context=False)  # Es from blazblue
    async def _s7_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Type: Assaulter Tristan"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/64/BBCF_Es_j2BBB.png')
            embed.add_field(name="J.2B", value=tab)
            embed.add_field(name="J.2BB", value=tab1)
            embed.add_field(name="J.2BB", value=tab2)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @es.command(name="632146D", pass_context=False)  # Es from blazblue
    async def _dd1_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find_all('li')[2].get_text()
            mp4 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Type: Enchanter Percival"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/91/BBCF_Es_EnchanterPercival.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @es.command(name="632146A", pass_context=False)  # Es from blazblue
    async def _dd2_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            headers2 = table_body.find_all('tr')[5]
            headers3 = table_body.find_all('tr')[7]
            info = table_body.find_all('tr')[2]
            info2 = table_body.find_all('tr')[4]
            info3 = table_body.find_all('tr')[6]
            info4 = table_body.find_all('tr')[8]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs3 = headers3.find('th').get_text()
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            gnd = info.find('li').get_text()
            gndod = info2.find_all('li')[0].get_text()
            gndod1 = info2.find_all('li')[1].get_text()
            air = info3.find('li').get_text()
            airod = info4.find_all('li')[0].get_text()
            airod1 = info4.find_all('li')[1].get_text()
            airod2 = info4.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "Ground MP:" + gnd + "\n" + "Ground OD MP:" + gndod + "\n" + gndod1 + "\n" + "Air MP:" + air + "\n" + "Air OD MP:" + airod + "\n" + airod1 + "\n" + airod2 + "```"
			
            embed = discord.Embed()
            embed.title = "Type: Shooter Palamedes"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4a/BBCF_Es_ShooterPalamedes.png')
            embed.add_field(name="Ground", value=tab)
            embed.add_field(name="Ground(Overdrive)", value=tab1)
            embed.add_field(name="Air(Normal)", value=tab2)
            embed.add_field(name="Air(Overdrive)", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @es.command(name="632146C", pass_context=False)  # Es from blazblue
    async def _dd3_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[2]
            info2 = table_body.find_all('tr')[4]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            reg = info.find('li').get_text()
            od = info2.find('li').get_text()
            od1 = info2.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" +"Regular:" + reg + "\n" + "OverDrive:" + od + "\n" + od1 + "```"
			
            embed = discord.Embed()
            embed.title = "Type: Slasher Galahad"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b1/BBCF_Es_SlasherGalahad.png')
            embed.add_field(name="Regular", value=tab)
            embed.add_field(name="OverDrive", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @es.command(name="abcd", pass_context=False)  # Es from blazblue
    async def _abcd_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Type: Enchanter Percival"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCF_Es_BraverLancelot.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	
			
    @es.command(name="236236c", pass_context=False)  # Es from blazblue
    async def _236236c_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            
            Data = [head.get_text() for head in headers.find_all('td')]
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Type: Enchanter Percival"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/03/BBCF_Es_AH.png')
            embed.add_field(name="Frame Data", value=tab)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
####################################################################################################

    @az.command(name="5a", pass_context=False)  # Azrael from blazblue
    async def _5a_az(self):
        """Basic Poke"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info2 = movesp.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info2 + "```"
            
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a1/BBCP_Azrael_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

			
            await self.bot.say(embed=embed)
            
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @az.command(name="5b", pass_context=False)  # Azrael from blazblue
    async def _5b_az(self):   
        """Good Poke/Decent Anti-air"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            my_table1 = table[5]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
            movesp1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Info = movesp.find('p').get_text()
            Info1 = movesp1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "```"
            mp1 = "```" + "*" + Info1 + "```"
			
            embed = discord.Embed()
            embed.title = '5b'
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCP_Azrael_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = '5bb: Easy Hitconfirm'
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/cb/BBCP_Azrael_5BB.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mp1, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @az.command(name="5c", pass_context=False)  # Azrael from blazblue
    async def _5c_az(self): 
        """Mid-range Poke"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find('li').get_text()
            Info1 = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "\n" + "*" + Info1 + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/47/BBCP_Azrael_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
	
    @az.command(name="2a", pass_context=False)  # Azrael from blazblue
    async def _2a_az(self):   
        """Crouching Low Poke"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/71/BBCP_Azrael_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @az.command(name="2b", pass_context=False)  # Azrael from blazblue
    async def _2b_az(self): 
        """Further Crouching Poke/Combo Extender"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCP_Azrael_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @az.command(name="2c", pass_context=False)  # Azrael from blazblue
    async def _2c_az(self):   
        """Mostly Combo Filler/Somewhat Anti-air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b2/BBCP_Azrael_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @az.command(name="6a", pass_context=False)  # Azrael from blazblue
    async def _6a_az(self):  
        """Combo Filler/Decent Against Ground Attacks"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find('p').get_text()            

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3  + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bf/BBCP_Azrael_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @az.command(name="6b", pass_context=False)  # Azrael from blazblue
    async def _6b_az(self):  
        """Situational Anti-air"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text() 
            mp3 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/79/BBCP_Azrael_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @az.command(name="6c", pass_context=False)  # Azrael from blazblue
    async def _6c_az(self):  
        """Good Range"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()  
            mp3 = info.find_all('li')[2].get_text() 
            mp4 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/94/BBCP_Azrael_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @az.command(name="3c", pass_context=False)  # Azrael from blazblue
    async def _3c_az(self):   
        """Long-range Low"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]	
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1f/BBCP_Azrael_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @az.command(name="ja", pass_context=False)  # Azrael from blazblue
    async def _ja_az(self): 
        """Basic Air Poke"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c3/BBCP_Azrael_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @az.command(name="jb", pass_context=False)  # Azrael from blazblue
    async def _jb_az(self):   
        """Good Air Poke/Crosses-Up"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text() 
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/81/BBCP_Azrael_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @az.command(name="jc", pass_context=False)  # Azrael from blazblue
    async def _jc_az(self): 
        """Mostly Combo Filler"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "JC"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCP_Azrael_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @az.command(name="j2c", pass_context=False)  # Azrael from blazblue
    async def _j2c_az(self): 
        """Dive Kick"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ed/BBCP_Azrael_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @az.command(name="5d", pass_context=False)  # Azrael from blazblue
    async def _5d_az(self):   
        """Overhead"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = info.find('p').get_text()						

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/28/BBCP_Azrael_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @az.command(name="2d", pass_context=False)  # Azrael from blazblue
    async def _2d_az(self):  
        """Low"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/be/BBCP_Azrael_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @az.command(name="3d", pass_context=False)  # Azrael from blazblue
    async def _3d_az(self):  
        """Slightly ambiguous low"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "3D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e1/BBCP_Azrael_3D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @az.command(name="6d", pass_context=False)  # Azrael from blazblue
    async def _6d_az(self):  
        """Overhead"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCP_Azrael_6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @az.command(name="jd", pass_context=False)  # Azrael from blazblue
    async def _jd_az(self):  
        """Upper weakpoint air ender"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"			
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/23/BBCP_Azrael_jD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @az.command(name="j2d", pass_context=False)  # Azrael from blazblue
    async def _j2d_az(self):  
        """Lower weakpoint air ender"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"			
			
            embed = discord.Embed()
            embed.title = "J.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cd/BBCP_Azrael_j2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @az.command(name="ft", pass_context=False)  # Azrael from blazblue
    async def _ft_az(self):   
        """Launches upward"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cc/BBCP_Azrael_ForwardThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @az.command(name="bt", pass_context=False)  # Azrael from blazblue
    async def _bt_az(self):   
        """Slams behind him"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6f/BBCP_Azrael_BackThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @az.command(name="at", pass_context=False)  # Azrael from blazblue
    async def _at_az(self):   
        """Drops to the ground"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
		    
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cd/BBCP_Azrael_AirThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @az.command(name="ca", pass_context=False)  # Azrael from blazblue
    async def _ca_az(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]	
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bf/BBCP_Azrael_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @az.command(name="ct", pass_context=False)  # Azrael from blazblue
    async def _ct_az(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/44/BBCP_Azrael_CrushTrigger.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @az.command(name="236a", pass_context=False)  # Azrael from blazblue
    async def _s1_az(self):   
        """Neutral Attack/Pressure Ender"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()


            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Gustaf Buster"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6a/BBCP_Azrael_GustafBuster.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")		

    @az.command(name="236c", pass_context=False)  # Azrael from blazblue
    async def _s2_az(self):   
        """Combo filler/Big damage starter"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            my_table1 = table[57]
            my_table2 = table[59]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body2.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[2]
            info2 =  table_body2.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text() 
            mp3 = info2.find('p').get_text()     			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
            mp1 = "```" + "*" + mp2 + "```"
            mp2 = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Tiger Magnum"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/61/BBCP_Azrael_TigerMagnum.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Cobra Strike: 6C Follow-up after Tiger Magnum"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/c2/BBCP_Azrael_CobraStrike.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mp1, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Leopard Launcher: 6C after Cobra Strike"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCP_Azrael_LeopardLauncher.png')
            embed2.add_field(name="Frame Data", value=tab2)
            embed2.add_field(name="Attack Props:", value=mp2, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @az.command(name="214b", pass_context=False)  # Azrael from blazblue
    async def _s3_az(self):   
        """Reversal / Anti-projectile"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            my_table1 = table[63]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find('p').get_text()
            mp4 = info1.find('li').get_text()
            mp5 = info1.find('p').get_text()      			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
            mp1 = "```" + "*" + mp4 + "\n" + "*" + mp5 + "```"
			
            embed = discord.Embed()
            embed.title = "Growler Field"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCP_Azrael_Growler_Field.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Phalanx Cannon:  236B (After absorbing projectile with Growler Field)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/4a/BBCP_Azrael_Phalanx_Cannon.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mp1, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @az.command(name="214c", pass_context=False)  # Azrael from blazblue
    async def _s4_az(self):
        """Used for crouch confirm / Random attack"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp1[8] + "```"
			
            embed = discord.Embed()
            embed.title = "Sentinel Dump 214C (or 22C on downed opponent)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/db/BBCP_Azrael_SentinelDump.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")			

    @az.command(name="623b", pass_context=False)  # Azrael from blazblue
    async def _s5_az(self):   
        """Two-part move AKA DP"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
       

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
			
            embed = discord.Embed()
            embed.title = "Panzer Strike"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0e/BBCF_Azrael_PanzerStrike.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @az.command(name="236d", pass_context=False)  # Azrael from blazblue
    async def _s6_az(self): 
        """Overhead / Leads to corner carry / Big damage"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            my_table1 = table[71]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp3 = [fo1.get_text() for fo1 in info1.find_all('li')]
            mp2 = info.find('p').get_text()
            mp4 = info1.find('p').get_text()
       

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp2 + "```"
            mp1 = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Valiant Crash:  236D (Chargeable)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/66/BBCP_Azrael_ValiantCrash.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Valiant Charger:  Press [6] during Valiant Crash w/ upper weakpoint applied"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b9/BBCP_Azrael_ValiantCharger.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mp1, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @az.command(name="214d", pass_context=False)  # Azrael from blazblue
    async def _s7_az(self):   
        """Low / Slightly Useful"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            my_table1 = table[75]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp3 = [fo1.get_text() for fo1 in info1.find_all('li')]
            mp2 = info.find('p').get_text()
            mp4 = info1.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp2 + "```"
            mp1 = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Hornet Bunker:  214D (Chargeable)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/25/BBCP_Azrael_HornetBunker.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Hornet Chaser:  Press [8] during Hornet Bunker w/ lower weakpoint applied"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCP_Azrael_HornetChaser.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mp1, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @az.command(name="236236d", pass_context=False)  # Azrael from blazblue
    async def _dd1_az(self):   
        """Combo ender for extra damage"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Black Hawk Stinger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7b/BBCP_Azrael_BlackHawkStinger.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @az.command(name="214214d", pass_context=False)  # Azrael from blazblue
    async def _dd2_az(self):   
        """Gets both weakpoints / Special effect"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Scud Punishment"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e5/BBCP_Azrael_ScudPunishment.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")			

    @az.command(name="abcd", pass_context=False)  # Azrael from blazblue
    async def _abcd_az(self): 
        """Pretty much a souped-up TCL"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find_all('p')[0].get_text()
            mp3 = info.find_all('p')[1].get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Full Spartan"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/07/BBCF_Azrael_FullSpartan.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @az.command(name="632146c", pass_context=False)  # Azrael from blazblue
    async def _632146c_az(self):   
        """Enchant Dragunov"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Patriot Apocalypse"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cf/BBCP_Azrael_PatriotApocalypse1.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
####################################################################################################

    @jin.command(name="5a", pass_context=False)  # Jin from blazblue
    async def _5a_jin(self):
        """It leads into 5b"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "```"
            
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c9/BBCS_Jin_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

			
            await self.bot.say(embed=embed)
            
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @jin.command(name="5b", pass_context=False)  # Jin from blazblue
    async def _5b_jin(self):   
        """Great tool for its range and speed."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            info = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + info + "```"			
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3a/BBCS_Jin_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
			
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @jin.command(name="5c", pass_context=False)  # Jin from blazblue
    async def _5c_jin(self): 
        """Good zoning tool, but can lose to mash if you're not careful."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = movesp.find('li').get_text()
            mp2 = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/79/BBCS_Jin_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
	
    @jin.command(name="2a", pass_context=False)  # Jin from blazblue
    async def _2a_jin(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e6/BBCS_Jin_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @jin.command(name="2b", pass_context=False)  # Jin from blazblue
    async def _2b_jin(self):   
        """Surprisingly long range for its animation."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2d/BBCS_Jin_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @jin.command(name="2c", pass_context=False)  # Jin from blazblue
    async def _2c_jin(self):   
        """Long vertical range, has head invul before and through the first active frame."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c1/BBCS_Jin_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @jin.command(name="6a", pass_context=False)  # Jin from blazblue
    async def _6a_jin(self):  
        """Overhead, short range, fast, -4 on block. Requires resources or CH for conversions."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()         

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0b/BBCS_Jin_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @jin.command(name="6b", pass_context=False)  # Jin from blazblue
    async def _6b_jin(self):  
        """NOT an overhead. Goes over lows"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()           

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/69/BBCS_Jin_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @jin.command(name="6c", pass_context=False)  # Jin from blazblue
    async def _6c_jin(self):   
        """Combo filler, especially in the corner."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()           

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/91/BBCS_Jin_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @jin.command(name="3c", pass_context=False)  # Jin from blazblue
    async def _3c_jin(self):  
        """Combo ender, occasional zoning tool."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/54/BBCF_Jin_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @jin.command(name="ja", pass_context=False)  # Jin from blazblue
    async def _ja_jin(self):  
        """Good for an air-to-air battle."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCS_Jin_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @jin.command(name="jb", pass_context=False)  # Jin from blazblue
    async def _jb_jin(self):   
        """Hits above, in front, and below Jin. Has a cross-up hitbox."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()           

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/79/BBCS_Jin_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @jin.command(name="jc", pass_context=False)  # Jin from blazblue
    async def _jc_jin(self):   
        """Safe air poke at range, strong air-to-air."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "JC"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8f/BBCS_Jin_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @jin.command(name="j2c", pass_context=False)  # Jin from blazblue
    async def _j2c_jin(self):  
        """Primarily used for combos and jump-ins."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/63/BBCS_Jin_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @jin.command(name="5d", pass_context=False)  # Jin from blazblue
    async def _5d_jin(self): 
        """The infamous Wofhead"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()  			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"

			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/93/BBCS_Jin_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @jin.command(name="2d", pass_context=False)  # Jin from blazblue
    async def _2d_jin(self):   
        """Zoning tool."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

			

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text() 			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0c/BBCS_Jin_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @jin.command(name="6d", pass_context=False)  # Jin from blazblue
    async def _6d_jin(self):   
        """Pressure reset tool, combo filler."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c7/BBCS_Jin_6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp1)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @jin.command(name="jd", pass_context=False)  # Jin from blazblue
    async def _jd_jin(self):   
        """Combo filler, gimmicky crossup."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"

			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/54/BBCS_Jin_jD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @jin.command(name="236d", pass_context=False)  # Jin from blazblue
    async def _236d_jin(self):  
        """Snowflake"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
		
            mp1 = info.find('p').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]		
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"

			
            embed = discord.Embed()
            embed.title = "Hishousetsu"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8c/BBCF_Jin_Hishousetsu.png')
            embed.add_field(name="Ground:  Frame Data", value=tab)
            embed.add_field(name="Air:  Frame Data", value=tab1)
            embed.add_field(name="Attack Properties", value=mp)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @jin.command(name="623d", pass_context=False)  # Jin from blazblue
    async def _623d_jin(self):  
        """Dragon punch. Leads to good damage in the corner."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
		
            mp1 = info.find('p').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"

			
            embed = discord.Embed()
            embed.title = "Hirensou"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/28/BBCS_Jin_Hirensou.png')
            embed.add_field(name="Ground:  Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @jin.command(name="214d", pass_context=False)  # Jin from blazblue
    async def _214d_jin(self):  
        """Really fast. Used for combos. Can continue combo if semi-near corner."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
		
            mp1 = info.find('p').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]		
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"

			
            embed = discord.Embed()
            embed.title = "Musou Tousshugeki"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/df/BBCS_Jin_MusouTousshugeki.png')
            embed.add_field(name="1st hit Frame Data", value=tab)
            embed.add_field(name="2nd hit,214d-c, Frame Data", value=tab1)
            embed.add_field(name="Attack Properties", value=mp)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @jin.command(name="j214d", pass_context=False)  # Jin from blazblue
    async def _j214d_jin(self):   
        """Aerial combo ender or used as an overhead."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
		
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]					

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"

			
            embed = discord.Embed()
            embed.title = "Hizangeki"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8f/BBCP_Jin_Hizangeki.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @jin.command(name="ft", pass_context=False)  # Jin from blazblue
    async def _ft_jin(self):  
        """Can cancel into specials and supers on 3rd hit."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ac/BBCS_Jin_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @jin.command(name="bt", pass_context=False)  # Jin from blazblue
    async def _bt_jin(self): 
        """Can cancel into specials and supers on 2nd hit."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Jin_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @jin.command(name="at", pass_context=False)  # Jin from blazblue
    async def _at_jin(self):  
        """Has a variety of combo options depending on throw height."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/16/BBCS_Jin_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @jin.command(name="ca", pass_context=False)  # Jin from blazblue
    async def _ca_jin(self): 
        """Jin's Counter Assault, it uses 5C's animation."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/79/BBCS_Jin_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")		

    @jin.command(name="ct", pass_context=False)  # Jin from blazblue
    async def _ct_jin(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c2/BBCP_Jin_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @jin.command(name="236a", pass_context=False)  # Jin from blazblue
    async def _s1_jin(self):  
        """Zoning tool."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Hishouken"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1d/BBCS_Jin_Hishouken.png')
            embed.add_field(name="Ground:  Frame Data", value=tab)
            embed.add_field(name="Air:  Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @jin.command(name="623b", pass_context=False)  # Jin from blazblue
    async def _s2_jin(self):   
        """Head invincibility starting on frame 5 and lasts through initial active frames."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()       

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Fubuki"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/06/BBCS_Jin_Fubuki.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @jin.command(name="623c", pass_context=False)  # Jin from blazblue
    async def _s3_jin(self): 
        """Invincible from frame 1 through all active frames"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()    

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Rehhyou"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e4/BBCS_Jin_Rehhyou.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")		

    @jin.command(name="214b", pass_context=False)  # Jin from blazblue
    async def _s4_jin(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
       

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Musou Senshouzan"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/ba/BBCS_Jin_MusouSenshouzanB.png')
            embed.add_field(name="1st Hit", value=tab)
            embed.add_field(name="2nd Hit:  214b-c", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")		

    @jin.command(name="j214c", pass_context=False)  # Jin from blazblue
    async def _s5_jin(self):  
        """The new aerial combo ender."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp3 = info.find('p').get_text()
       

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Hizansen"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2f/BBCP_Jin_Hizansen.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @jin.command(name="22c", pass_context=False)  # Jin from blazblue
    async def _s6_jin(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[4]
            headers2 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[6]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp3 = info.find_all('p')[0].get_text()
            mp2 = info.find_all('p')[1].get_text()
            mp1 = info1.find('p').get_text()
       

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp3 + "\n" + "*" + mp2 + "```"
            mp1 = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Sekkajin"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7f/BBCS_Jin_Sekkajin.png')
            embed.add_field(name="1st Hit Frame Data", value=tab)
            embed.add_field(name="Follow-up Normal", value=tab1)
            embed.add_field(name="Follow-up OverDrive", value=tab2)
            embed.add_field(name="1st Hit:  Attack Props:", value=mp, inline='true')
            embed.add_field(name="Follow-up:  Attack Props:", value=mp1, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")		

    @jin.command(name="632146c", pass_context=False)  # Jin from blazblue
    async def _dd1_jin(self):  
        """	Punish tool"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp4 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Touga Hyojin"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6c/BBCS_Jin_IceWave.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @jin.command(name="632146d", pass_context=False)  # Jin from blazblue
    async def _dd2_jin(self): 
        """Invincible startup, damaging metered combo ender"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs3 = headers3.find('th').get_text()
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            gnd = info.find_all('p')[0].get_text()
            gndod = info.find_all('p')[1].get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + gnd + "\n" + "*" + gndod + "```"
			
            embed = discord.Embed()
            embed.title = "Hiyoku Getsume"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ad/BBCS_Jin_IceArrow.png')
            embed.add_field(name="Ground", value=tab)
            embed.add_field(name="Air", value=tab1)
            embed.add_field(name="Ground Over Drive", value=tab2)
            embed.add_field(name="Air Over Drive", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @jin.command(name="236236d", pass_context=False)  # Jin from blazblue
    async def _dd3_jin(self):   
        """Catches any blockable attack, Unblockable, invincible the whole time."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            od1 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + od1 + "```"
			
            embed = discord.Embed()
            embed.title = "Yukikaze"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/dc/BBCS_Jin_Yukikaze1.png')
            embed.add_field(name="Catch", value=tab)
            embed.add_field(name="Attack(Normal)", value=tab1)
            embed.add_field(name="Attack(OD)", value=tab2)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @jin.command(name="abcd", pass_context=False)  # Jin from blazblue
    async def _abcd_jin(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find_all('p')[0].get_text()
            mp2 = info.find_all('p')[1].get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Gekka Hyourou"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/10/BBCF_Jin_Gekka.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	
			
    @jin.command(name="28d", pass_context=False)  # Jin from blazblue
    async def _28d_jin(self):   
        """Hits the entire ground. Combos from ground throw."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Rengoku Hyouya"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/da/BBCS_Jin_Astral2.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
################################################################################################################################

    @su.command(name="5a", pass_context=False)  # Susano'o from blazblue
    async def _5a_su(self):
        """Short, but safe"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find_all('li')[0].get_text()
            Info1 = movesp.find_all('li')[1].get_text()
            Info2 = movesp.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "\n" + "*" + Info1 + "\n" + "*" + Info2 + "```"
            
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2e/BBCF_Susanoo_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

			
            await self.bot.say(embed=embed)
            
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @su.command(name="5b", pass_context=False)  # Susano'o from blazblue
    async def _5b_su(self):   
        """Every Susano'o starts the round with this. No Exceptions"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find_all('li')[0].get_text()
            Info1 = movesp.find_all('li')[1].get_text()
            Info2 = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "\n" + "*" + Info1 + "\n" + "*" + Info2 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8a/BBCF_Susanoo_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
			
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @su.command(name="5c", pass_context=False)  # Susano'o from blazblue
    async def _5c_su(self): 
        """Slow, but long-ranged."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find_all('li')[0].get_text()
            Info1 = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "\n" + "*" + Info1 + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/67/BBCF_Susanoo_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
	
    @su.command(name="2a", pass_context=False)  # Susano'o from blazblue
    async def _2a_su(self):   
        """Not a low"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find_all('li')[0].get_text()
            Info1 = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "\n" + "*" + Info1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e0/BBCF_Susanoo_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @su.command(name="2b", pass_context=False)  # Susano'o from blazblue
    async def _2b_su(self): 
        """Also not a low..."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find_all('li')[0].get_text()
            Info1 = movesp.find_all('li')[1].get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "\n" + "*" + Info1 + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8f/BBCF_Susanoo_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @su.command(name="2c", pass_context=False)  # Susano'o from blazblue
    async def _2c_su(self):   
        """A pretty decent anti-air."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b3/BBCF_Susanoo_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @su.command(name="6a", pass_context=False)  # Susano'o from blazblue
    async def _6a_su(self):  
        """Who needs anti-airs when you have hit scans?"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find_all('li')[2].get_text()
            mp4 = info.find('p').get_text()            

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3  + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/32/BBCF_Susanoo_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @su.command(name="6b", pass_context=False)  # Susano'o from blazblue
    async def _6b_su(self):  
        """Good ol' "Fatal! Fatal!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text() 
            mp3 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/07/BBCF_Susanoo_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @su.command(name="6c", pass_context=False)  # Susano'o from blazblue
    async def _6c_su(self):  
        """Hope you like 50/50s"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()  
            mp3 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a6/BBCF_Susanoo_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @su.command(name="3c", pass_context=False)  # Susano'o from blazblue
    async def _3c_su(self):   
        """Finally, a low!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/07/BBCF_Susanoo_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @su.command(name="ja", pass_context=False)  # Susano'o from blazblue
    async def _ja_su(self): 
        """Good air to air, but that's about it"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b5/BBCF_Susanoo_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")  # oh holy crap we have a houston!
			
    @su.command(name="jb", pass_context=False)  # Susano'o from blazblue
    async def _jb_su(self):   
        """Your staple jump-in"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text() 
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ee/BBCF_Susanoo_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @su.command(name="jc", pass_context=False)  # Susano'o from blazblue
    async def _jc_su(self): 
        """All-around air tool"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "JC"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/16/BBCF_Susanoo_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @su.command(name="5d", pass_context=False)  # Susano'o from blazblue
    async def _5d_su(self):   
        """The Key to the Kingdom!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find('p').get_text()						

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a0/BBCF_Susanoo_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @su.command(name="2d", pass_context=False)  # Susano'o from blazblue
    async def _2d_su(self):  
        """High risk, high reward low"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('li').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/45/BBCF_Susanoo_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @su.command(name="4d", pass_context=False)  # Susano'o from blazblue
    async def _4d_su(self):  
        """An unlock tool that doesn't require a hit"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCF_Susanoo_4D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @su.command(name="6d", pass_context=False)  # Susano'o from blazblue
    async def _6d_su(self):  
        """Nice to use raw on occasion, but will see most use in combos"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = [fo.get_text() for fo in info.find_all('li')]		
            mp2 = [fu.get_text() for fu in info.find_all('p')]			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/09/BBCF_Susanoo_6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @su.command(name="jd", pass_context=False)  # Susano'o from blazblue
    async def _jd_su(self):  
        """Staple air combo ender"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"			
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCF_Susanoo_jD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @su.command(name="ft", pass_context=False)  # Susano'o from blazblue
    async def _ft_su(self):   
        """Up we go!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0a/BBCF_Susanoo_ForwardThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @su.command(name="bt", pass_context=False)  # Susano'o from blazblue
    async def _bt_su(self):   
        """Sucks To Be You 2: Electric Boogaloo"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/06/BBCF_Susanoo_BackThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @su.command(name="at", pass_context=False)  # Susano'o from blazblue
    async def _at_su(self):   
        """Susano'o's throws can all lead to exceptional damage, even with scaling"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]	
		    
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3e/BBCF_Susanoo_AirThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @su.command(name="ca", pass_context=False)  # Susano'o from blazblue
    async def _ca_su(self):   
        """That thing which doesn't exist for Terumi"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a0/BBCF_Susanoo_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")		

    @su.command(name="ct", pass_context=False)  # Susano'o from blazblue
    async def _ct_su(self):   
        """Old habits die hard"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a6/BBCF_Susanoo_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @su.command(name="236a", pass_context=False)  # Susano'o from blazblue
    async def _s1_su(self):   
        """Only does the second hit at level 3"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find_all('p')[0].get_text()
            mp3 = info.find_all('p')[1].get_text()


            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Sundering Claws"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c4/BBCF_Susanoo_SunderingClaws.png')
            embed.add_field(name="Lv.1 Frame Data", value=tab)
            embed.add_field(name="Lv.2 Frame Data", value=tab1)
            embed.add_field(name="Lv.3 Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @su.command(name="623c", pass_context=False)  # Susano'o from blazblue
    async def _s2_su(self):   
        """Pray this attack hits"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()         

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Towering Flame"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5e/BBCF_Susanoo_ToweringFlame.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @su.command(name="214a", pass_context=False)  # Susano'o from blazblue
    async def _s3_su(self):   
        """Kicking Sand!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()        

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Megalith"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c0/BBCF_Susanoo_Megalith.png')
            embed.add_field(name="Lv.1 Frame Data", value=tab)
            embed.add_field(name="Lv.2 Frame Data", value=tab1)
            embed.add_field(name="Lv.3 Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")		

    @su.command(name="214b", pass_context=False)  # Susano'o from blazblue
    async def _s4_su(self):
        """Has more uses than you might think"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find_all('p')[0].get_text() 
            mp3 = info.find_all('p')[1].get_text()
       

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Hunter's Fang"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ea/BBCF_Susanoo_HuntersFang.png')
            embed.add_field(name="Lv.1 Frame Data", value=tab)
            embed.add_field(name="Lv.2 Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")		

    @su.command(name="236b", pass_context=False)  # Susano'o from blazblue
    async def _s5_su(self):   
        """Grand Vip - I mean, 236B!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Dancing Dual Kick"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/01/BBCF_Susanoo_DancingDualKick.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @su.command(name="ccc", pass_context=False)  # Susano'o from blazblue
    async def _s6_su(self): 
        """Damage Scaling: The Move."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Inevitable Calamity"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/18/BBCF_Susanoo_InevitableCalamity.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @su.command(name="63214c", pass_context=False)  # Susano'o from blazblue
    async def _s7_su(self):   
        """Putting the "God" back in God Press"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Splintering Thrust"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f4/BBCF_Susanoo_SplinteringThrust.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @su.command(name="236d", pass_context=False)  # Susano'o from blazblue
    async def _s8_su(self):   
        """Michael Swor - oops, wrong game"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Blade of Judgement"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0e/BBCF_Susanoo_BladeOfJudgement.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @su.command(name="236236d", pass_context=False)  # Susano'o from blazblue
    async def _dd1_su(self):   
        """This is a no-fireball zone"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Liberating Dagger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/73/BBCF_Susanoo_LiberatingDagger.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @su.command(name="632146d", pass_context=False)  # Susano'o from blazblue
    async def _dd2_su(self):   
        """Deadly Rave meets Gamma Ray"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Strike of the Possessed God"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/69/BBCF_Susanoo_StrikeOfThePossessedGod.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @su.command(name="28d", pass_context=False)  # Susano'o from blazblue
    async def _dd3_su(self):  
        """When 4D goes on as many steroids as Susano'o"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Collapsing Resentment"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6c/BBCF_Susanoo_CollapsingResentment.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")			

    @su.command(name="abcd", pass_context=False)  # Susano'o from blazblue
    async def _abcd_su(self): 
        """Cmon and slam!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Bloodsplitter"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9b/BBCF_Susanoo_Bloodsplitter.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	
			
    @su.command(name="2141236c", pass_context=False)  # Susano'o from blazblue
    async def _214236c_su(self):   
        """｢MUST DIE｣"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Roar of the Mad King"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e3/BBCF_Susanoo_RoarOfTheMadKing.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

##################################################################################################################################################################################################

    @hk.command(name="5a", pass_context=False)  # Hakumen from blazblue
    async def _5a_hk(self):
        """King of anti-airs"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            info = [op.get_text() for op in movesp.find_all('li')]
            info2 = movesp.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + info[0] + "\n" + "*" + info[1] + "\n" + "*" + info2 + "```"
            
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Hakumen_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

			
            await self.bot.say(embed=embed)
            
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @hk.command(name="5b", pass_context=False)  # Hakumen from blazblue
    async def _5b_hk(self):   
        """Good tool for pressure and mixup due to its frame advantage"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            info2 = movesp.find('p').get_text()
            info = [op.get_text() for op in movesp.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + info[0] + "\n" + "*" + info[1] + "\n" + "*" + info[2] + "\n" + "*" + info2 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b2/BBCS_Hakumen_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @hk.command(name="5c", pass_context=False)  # Hakumen from blazblue
    async def _5c_hk(self): 
        """King of damage"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = [op.get_text() for op in movesp.find_all('li')]
            Info1 = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info[0] + "\n" + "*" + Info[1] + "\n" + "*" + Info1 + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/86/BBCS_Hakumen_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
	
    @hk.command(name="2a", pass_context=False)  # Hakumen from blazblue
    async def _2a_hk(self):   
        """Quite the range for a 2A"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e6/BBCS_Hakumen_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @hk.command(name="2b", pass_context=False)  # Hakumen from blazblue
    async def _2b_hk(self): 
        """Poke their feet"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find('p').get_text()
            Info2 = movesp.find('li').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info2 + "\n" + "*" + Info + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c2/BBCS_Hakumen_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @hk.command(name="2c", pass_context=False)  # Hakumen from blazblue
    async def _2c_hk(self):   
        """Don't whiff"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/25/BBCS_Hakumen_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @hk.command(name="6a", pass_context=False)  # Hakumen from blazblue
    async def _6a_hk(self):  
        """Advancing position"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find('p').get_text()            

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3  + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/28/BBCS_Hakumen_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @hk.command(name="6b", pass_context=False)  # Hakumen from blazblue
    async def _6b_hk(self):  
        """Overhead"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text() 
            mp3 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d1/BBCS_Hakumen_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @hk.command(name="6c", pass_context=False)  # Hakumen from blazblue
    async def _6c_hk(self):  
        """FATAL!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[4]
            info1 = table_body.find_all('tr')[5]
            headers2 = table_body.find_all('tr')[7]
            info2 = table_body.find_all('tr')[8]
			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = [fo1.get_text() for fo1 in info1.find_all('li')]  
            mp3 = [fo2.get_text() for fo2 in info2.find_all('li')]
            mp4 = [fo3.get_text() for fo3 in info2.find_all('p')]			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
            mpA = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "\n" + "*" + mp4[2] + "```"
			
            embed = discord.Embed()
            embed.title = "6C No Charge"
            embed.add_field(name="No Charge Frame Data", value=tab)
            embed.add_field(name="No Charge Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6C Partial Charge"
            embed1.add_field(name="Partial Charge Frame Data", value=tab1)
            embed1.add_field(name="Partial Charge Attack Props:", value=mpA, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "6C"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/0/00/BBCS_Hakumen_6C.png')
            embed2.add_field(name="Full Charge Frame Data", value=tab2)
            embed2.add_field(name="Full Charge Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @hk.command(name="3c", pass_context=False)  # Hakumen from blazblue
    async def _3c_hk(self):   
        """Pain lies ahead"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/03/BBCS_Hakumen_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @hk.command(name="4c", pass_context=False)  # Hakumen from blazblue
    async def _4c_hk(self):   
        """Literal poke"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()	
            mp2 = info.find_all('li')[1].get_text()	
            mp3 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "4C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/54/BBCS_Hakumen_4C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @hk.command(name="ja", pass_context=False)  # Hakumen from blazblue
    async def _ja_hk(self): 
        """Jab your way to the ground"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f8/BBCS_Hakumen_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @hk.command(name="j2a", pass_context=False)  # Hakumen from blazblue
    async def _j2a_hk(self): 
        """Sword wall"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2f/BBCS_Hakumen_j2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @hk.command(name="jb", pass_context=False)  # Hakumen from blazblue
    async def _jb_hk(self):   
        """Kick your way to the ground"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text() 
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cc/BBCS_Hakumen_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @hk.command(name="jc", pass_context=False)  # Hakumen from blazblue
    async def _jc_hk(self): 
        """Air combo ender"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()	
            mp2 = info.find_all('li')[1].get_text()	
            mp3 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f9/BBCS_Hakumen_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @hk.command(name="j2c", pass_context=False)  # Hakumen from blazblue
    async def _j2c_hk(self): 
        """No one challenges this"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c3/BBCS_Hakumen_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @hk.command(name="5d", pass_context=False)  # Hakumen from blazblue
    async def _5d_hk(self):   
        """Standing counter"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
            headers2 = table_body.find_all('tr')[5]
            info2 = table_body.find_all('tr')[6]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info1.find('li').get_text()
            mp3 = [op2.get_text() for op2 in info2.find_all('li')]	
            mp4 = info2.find('p').get_text()		
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()	
            vrs2 = headers2.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')			
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpA = "```" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a9/BBCS_Hakumen_5D.png')
            embed.add_field(name="Catch Frame Data", value=tab)
            embed.add_field(name="Catch(held) Frame Data", value=tab1)
            embed.add_field(name="Attack Frame Data", value=tab2)
            embed.add_field(name="Catch Attack Props:", value=mp, inline='true')
            embed.add_field(name="Catch(Held) Attack Props:", value=mpA, inline='true')
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @hk.command(name="2d", pass_context=False)  # Hakumen from blazblue
    async def _2d_hk(self):  
        """Crouching counter"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp2 = info.find('li').get_text()
            mp3 = [op2.get_text() for op2 in info1.find_all('li')]	
            mp4 = info1.find('p').get_text()		
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6d/BBCS_Hakumen_2D.png')
            embed.add_field(name="Catch Frame Data", value=tab)
            embed.add_field(name="Attack Frame Data", value=tab1)
            embed.add_field(name="Catch Attack Props:", value=mpA, inline='true')
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @hk.command(name="6d", pass_context=False)  # Hakumen from blazblue
    async def _6d_hk(self):  
        """Best counter"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp2 = info.find('li').get_text()
            mp3 = [op2.get_text() for op2 in info1.find_all('li')]	
            mp4 = info1.find('p').get_text()		
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b5/BBCS_Hakumen_6D.png')
            embed.add_field(name="Catch Frame Data", value=tab)
            embed.add_field(name="Attack Frame Data", value=tab1)
            embed.add_field(name="Catch Attack Props:", value=mpA, inline='true')
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @hk.command(name="jd", pass_context=False)  # Hakumen from blazblue
    async def _jd_hk(self):  
        """Air counter"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp2 = info.find('li').get_text()
            mp3 = [op2.get_text() for op2 in info1.find_all('li')]	
            mp4 = info1.find('p').get_text()		
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "j.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0c/BBCS_Hakumen_jD.png')
            embed.add_field(name="Catch Frame Data", value=tab)
            embed.add_field(name="Attack Frame Data", value=tab1)
            embed.add_field(name="Catch Attack Props:", value=mpA, inline='true')
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @hk.command(name="ft", pass_context=False)  # Hakumen from blazblue
    async def _ft_hk(self):   
        """Crumple"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCS_Hakumen_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @hk.command(name="bt", pass_context=False)  # Hakumen from blazblue
    async def _bt_hk(self):   
        """Sick kicks"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/84/BBCS_Hakumen_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @hk.command(name="at", pass_context=False)  # Hakumen from blazblue
    async def _at_hk(self):   
        """To the ground with you!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
		    
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/08/BBCS_Hakumen_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @hk.command(name="ca", pass_context=False)  # Hakumen from blazblue
    async def _ca_hk(self):   
        """Costly, but effective: Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]	
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/28/BBCS_Hakumen_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @hk.command(name="ct", pass_context=False)  # Hakumen from blazblue
    async def _ct_hk(self):   
        """Plus on block: Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f2/BBCP_Hakumen_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @hk.command(name="fuu", pass_context=False)  # Hakumen from blazblue
    async def _s1_hk(self):   
        """Cut projectile, get Void"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()


            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Fuumajin"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/47/BBCP_Hakumen_Fuumajin.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")		

    @hk.command(name="214a", pass_context=False)  # Hakumen from blazblue
    async def _s2_hk(self):   
        """Pressure reset"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()  
            mp1 = [op.get_text() for op in info.find_all('li')] 			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Gurren"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3f/BBCS_Hakumen_gurren.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @hk.command(name="632a", pass_context=False)  # Hakumen from blazblue
    async def _s3_hk(self):   
        """Wavedash, and Certainly not an EWGF"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            my_table1 = table[57]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            mp3 = info.find('p').get_text()
            mp4 = info1.find('p').get_text()     			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp3 + "```"
            mp1 = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Kishuu"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/eb/BBCS_Hakumen_kishuu.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Enma:  A (after kishuu)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/1c/BBCS_Hakumen_enma.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mp1, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @hk.command(name="236b", pass_context=False)  # Hakumen from blazblue
    async def _s4_hk(self):
        """Combo filler"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Renka"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b4/BBCF_Hakumen_renka.png')
            embed.add_field(name="Lv.1 Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")			

    @hk.command(name="412236c", pass_context=False)  # Hakumen from blazblue
    async def _s5_hk(self):   
        """5C > 41236C = Damage"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Zantetsu"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3c/BBCS_Hakumen_zantetsu.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @hk.command(name="j214b", pass_context=False)  # Hakumen from blazblue
    async def _s6_hk(self): 
        """Aerial Houtenjin"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Hotaru"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/47/BBCS_Hakumen_hotaru.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @hk.command(name="j214c", pass_context=False)  # Hakumen from blazblue
    async def _s7_hk(self):   
        """The scariest thing"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Tsubaki"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d5/BBCS_Hakumen_tsubaki.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @hk.command(name="j214a", pass_context=False)  # Hakumen from blazblue
    async def _s8_hk(self):   
        """The other air ender"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Agito"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e0/BBCP_Hakumen_Agito.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @hk.command(name="214d", pass_context=False)  # Hakumen from blazblue
    async def _s9_hk(self):   
        """Say nope to zoning!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Yanagi"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/31/BBCF_Hakumen_Yanagi.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @hk.command(name="632146c", pass_context=False)  # Hakumen from blazblue
    async def _dd1_hk(self):   
        """Big damage"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[4]
            headers3 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = [fo1.get_text() for fo1 in info1.find_all('li')]
            mp3 = [fo2.get_text() for fo2 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp1[8] + "```"
            mpA = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Kokūjin: Shippu"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/55/BBCS_Hakumen_shippu.png')
            embed.add_field(name="Sword(Uncharged) Frame Data", value=tab)
            embed.add_field(name="Sword(Charged) Frame Data", value=tab1)
            embed.add_field(name="Sowrd Properties Attack Props:", value=mp, inline='true')
            embed.add_field(name="Wave Frame Data", value=tab2)
            embed.add_field(name="Wave(OD) Frame Data", value=tab3)
            embed.add_field(name="Wave Attack Props:", value=mpA)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @hk.command(name="236236d", pass_context=False)  # Hakumen from blazblue
    async def _dd2_hk(self):   
        """Super counter"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Kokūjin: Yukikaze"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/51/BBCS_Hakumen_yukikaze.png')
            embed.add_field(name="Catch Frame Data", value=tab)
            embed.add_field(name="Catch Attack Props:", value=mp, inline='true')
            embed.add_field(name="Attack Frame Data", value=tab1)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @hk.command(name="214214b", pass_context=False)  # Hakumen from blazblue
    async def _dd3_hk(self):   
        """Magatama install!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find_all('p')[0].get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Kokūjin Oūgi: Mugen"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/72/BBCS_Hakumen_mugen.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")				

    @hk.command(name="abcd", pass_context=False)  # Hakumen from blazblue
    async def _abcd_hk(self): 
        """MISOGI"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Tengai"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d0/BBCF_Hakumen_Tengai.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @hk.command(name="28d", pass_context=False)  # Hakumen from blazblue
    async def _28d_hk(self):   
        """I dare you press a button"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find_all('li')[2].get_text()
            mp4 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Kokūjin Oūgi: Akumetsu"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e2/BBCS_Hakumen_akumetsu.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
##################################################################################################################################################################################################
    @ce.command(name="5a", pass_context=False)  # Celica from blazblue
    async def _5a_ce(self):
        #"""King of anti-airs"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[2]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            info = [op.get_text() for op in movesp.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + info[0] + "\n" + "*" + info[1] + "\n" + "*" + info[2] + "```"
            
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/15/BBCP_Celica_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

			
            await self.bot.say(embed=embed)
            
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @ce.command(name="5b", pass_context=False)  # Celica from blazblue
    async def _5b_ce(self):   
        #"""Good tool for pressure and mixup due to its frame advantage"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[4]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            info = [op.get_text() for op in movesp.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + info[0] + "\n" + "*" + info[1] + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6f/BBCP_Celica_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @ce.command(name="5c", pass_context=False)  # Celica from blazblue
    async def _5c_ce(self): 
        #"""King of damage"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[6]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find('li').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/92/BBCP_Celica_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
	
    @ce.command(name="2a", pass_context=False)  # Celica from blazblue
    async def _2a_ce(self):   
        #"""Quite the range for a 2A"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[8]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3f/BBCP_Celica_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @ce.command(name="2b", pass_context=False)  # Celica from blazblue
    async def _2b_ce(self): 
        #"""Poke their feet"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[10]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = [op.get_text() for op in movesp.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info[0] + "\n" + "*" + Info[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f4/BBCP_Celica_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @ce.command(name="2c", pass_context=False)  # Celica from blazblue
    async def _2c_ce(self):   
        #"""Don't whiff"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[12]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f4/BBCP_Celica_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @ce.command(name="6a", pass_context=False)  # Celica from blazblue
    async def _6a_ce(self):  
        #"""Advancing position"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[14]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp3 = info.find('p').get_text()            

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/16/BBCP_Celica_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ce.command(name="6b", pass_context=False)  # Celica from blazblue
    async def _6b_ce(self):  
        #"""Overhead"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[16]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp3 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCP_Celica_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @ce.command(name="6c", pass_context=False)  # Celica from blazblue
    async def _6c_ce(self):  
        #"""FATAL!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[18]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ae/BBCP_Celica_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ce.command(name="3c", pass_context=False)  # Celica from blazblue
    async def _3c_ce(self):   
        #"""Pain lies ahead"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[20]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5f/BBCP_Celica_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @ce.command(name="ja", pass_context=False)  # Celica from blazblue
    async def _ja_ce(self): 
        #"""Jab your way to the ground"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[22]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/54/BBCP_Celica_j.A.png')
            embed.add_field(name="Frame Data", value=tab)
			
            await self.bot.say(embed=embed)			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
			
    @ce.command(name="jb", pass_context=False)  # Celica from blazblue
    async def _jb_ce(self):   
        #"""Kick your way to the ground"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[24]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')]	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ac/BBCP_Celica_j.B.png')
            embed.add_field(name="Frame Data", value=tab)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ce.command(name="jc", pass_context=False)  # Celica from blazblue
    async def _jc_ce(self): 
        #"""Air combo ender"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[26]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/64/BBCP_Celica_j.C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @ce.command(name="5d", pass_context=False)  # Celica from blazblue
    async def _5d_ce(self):   
        #"""Standing counter"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[28]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[4]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()	
            vrs2 = headers2.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')			
            mp = "```" + "*" + mp1[0] + "```"
            mpA = "```" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5DD"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/46/BBCP_Celica_5D.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "5DDD"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/f/f5/BBCP_Celica_D5D.png')
            embed2.add_field(name="Frame Data", value=tab2)
            embed2.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ce.command(name="2d", pass_context=False)  # Celica from blazblue
    async def _2d_ce(self):  
        #"""Crouching counter"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[30]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp3 = [op2.get_text() for op2 in info.find_all('li')]			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp3[0] + "```"
            mpB = "```" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e6/BBCP_Celica_2D1.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "2DD"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/ee/BBCP_Celica_2D2.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "2DD Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/f/fd/BBCP_Celica_D2D.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @ce.command(name="6d", pass_context=False)  # Celica from blazblue
    async def _6d_ce(self):  
        #"""Best counter"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[32]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp3 = [op2.get_text() for op2 in info.find_all('li')]			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp3[0] + "```"
            mpB = "```" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/81/BBCP_Celica_6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Catch Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6DD"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/6f/BBCP_Celica_D6D.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ce.command(name="jd", pass_context=False)  # Celica from blazblue
    async def _jd_ce(self):
       #"""Air counter"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[34]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	 
            mp3 = info.find('li').get_text()	
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')			
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "j.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/06/BBCP_Celica_j.D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ce.command(name="heal", pass_context=False)  # Celica from blazblue
    async def _heal_ce(self):  
        #"""Air counter"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[36]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	 
            mp3 = info.find('li').get_text()	
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')			
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Heal"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/06/BBCP_Celica_j.D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @ce.command(name="ft", pass_context=False)  # Celica from blazblue
    async def _ft_ce(self):   
        #"""Crumple"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[38]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/96/BBCP_Celica_ForwardThrow1.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Forward Throw Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f6/BBCP_Celica_ForwardThrow2.png')
			
            embed2 = discord.Embed()
            embed2.title = "Forward Throw Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/8/8e/BBCP_Celica_ForwardThrow3.png')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @ce.command(name="bt", pass_context=False)  # Celica from blazblue
    async def _bt_ce(self):   
        #"""Sick kicks"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[40]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')]		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed1 = discord.Embed()
            embed1.title = "Back Throw Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/1d/BBCP_Celica_BackThrow1.png')
            embed1.add_field(name="Frame Data", value=tab)
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e7/BBCP_Celica_BackThrow2.png')
			
            embed2 = discord.Embed()
            embed2.title = "Back Throw Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/8/8a/BBCP_Celica_BackThrow3.png')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @ce.command(name="at", pass_context=False)  # Celica from blazblue
    async def _at_ce(self):   
        #"""To the ground with you!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[42]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')]
		    
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e8/BBCP_Celica_AirThrow1.png')
            embed.add_field(name="Frame Data", value=tab)
			
            embed1 = discord.Embed()
            embed1.title = "Air Throw"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/49/BBCP_Celica_AirThrow2.png')
			
            embed2 = discord.Embed()
            embed2.title = "Air Throw"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/0/00/BBCP_Celica_AirThrow3.png')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ce.command(name="ca", pass_context=False)  # Celica from blazblue
    async def _ca_ce(self):   
        #"""Costly, but effective: Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[44]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')]			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/31/BBCP_Celica_CounterAssault.png')
            embed.add_field(name="Frame Data", value=tab)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @ce.command(name="ct", pass_context=False)  # Celica from blazblue
    async def _ct_ce(self):   
        #"""Plus on block: Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[46]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')]
		
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/24/BBCP_Celica_CrushTrigger1.png')
            embed.add_field(name="Frame Data", value=tab)
			
            embed1 = discord.Embed()
            embed1.title = "Crush Trigger Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/3b/BBCP_Celica_CrushTrigger2.png')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @ce.command(name="j214a", pass_context=False)  # Celica from blazblue
    async def _s1_ce(self):   
        #"""Cut projectile, get Void"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[48]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')]


            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Pic Confit"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/af/BBCP_Celica_Pic_Confit.png')
            embed.add_field(name="Frame Data", value=tab)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")		

    @ce.command(name="236b", pass_context=False)  # Celica from blazblue
    async def _s2_ce(self):   
        #"""How'd She make this gun???"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[50]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')] 			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Arc Griller"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cc/BBCP_Celica_Arc_Griller.png')
            embed.add_field(name="Frame Data", value=tab)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @ce.command(name="214b", pass_context=False)  # Celica from blazblue
    async def _s3_ce(self):   
        #"""Wavedash, and Certainly not an EWGF"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[52]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Marteau Flan"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/11/BBCP_Celica_Marteau_Flan.png')
            embed.add_field(name="No Charge Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @ce.command(name="236c", pass_context=False)  # Celica from blazblue
    async def _s4_ce(self):
        #"""Combo filler"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[54]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')] 
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()	
            vrs3 = headers3.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Hache Rotir"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d8/BBCP_Celica_Hache_Rotir.png')
            embed.add_field(name="Regular, No Charge Frame Data", value=tab)
            embed.add_field(name="Regular, Charged Frame Data", value=tab1)
            embed.add_field(name="Enhanced, No Charge Frame Data", value=tab2)
            embed.add_field(name="Enhanced, Charged Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")			

    @ce.command(name="214c", pass_context=False)  # Celica from blazblue
    async def _s5_ce(self):   
        #"""5C > 41236C = Damage"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[56]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Lance Quiche"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e1/BBCP_Celica_Lance_Quiche.png')
            embed.add_field(name="No Charge Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
		

    @ce.command(name="632146a", pass_context=False)  # Celica from blazblue
    async def _dd1_ce(self):   
        """Big Heal"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[58]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Armure Sorbet"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1c/BBCP_Celica_Armure_Sorbet.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @ce.command(name="632146b", pass_context=False)  # Celica from blazblue
    async def _dd2_ce(self):   
        """Imma Firing mah Laser!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[60]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')]
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Saber Anglaise"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/57/BBCP_Celica_Saber_Anglaise1.png')
            embed.add_field(name="Frame Data", value=tab)
			
            embed1 = discord.Embed()
            embed1.title = "Saber Anglaise Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/be/BBCP_Celica_Saber_Anglaise2.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @ce.command(name="632146c", pass_context=False)  # Celica from blazblue
    async def _dd3_ce(self):   
        """Oh god she's self aware!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[62]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Casque Veloute"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3c/BBCP_Celica_Casque_Veloute1.png')
            embed.add_field(name="Frame Data", value=tab)
			
            embed1 = discord.Embed()
            embed1.title = "Casque Veloute Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCP_Celica_Casque_Veloute2.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")				

    @ce.command(name="abcd", pass_context=False)  # Celica from blazblue
    async def _abcd_ce(self): 
        """Exceed Accel"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[64]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Pue Vapeur"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6b/BBCF_Celica_ExceedAccel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @ce.command(name="222a", pass_context=False)  # Celica from blazblue
    async def _22a_ce(self):   
        """Minerva Blackhawk"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[66]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            
            Data = [head.get_text() for head in headers.find_all('td')]
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Atout Rillettes"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b1/BBCP_Celica_Atout_Rillettes1.png')
            embed.add_field(name="Frame Data", value=tab)
			
            embed1 = discord.Embed()
            embed1.title = "Atout Rillettes Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCP_Celica_Atout_Rillettes2.png')
			
            embed2 = discord.Embed()
            embed2.title = "Atout Rillettes Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCP_Celica_Atout_Rillettes3.png')
			
            embed3 = discord.Embed()
            embed3.title = "Atout Rillettes Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/0/04/BBCP_Celica_Atout_Rillettes4.png')
			
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except:
            await self.bot.say("No Frame Data Found.....")	
#################################################################################################################################################################################################
    @no.command(name="5a", pass_context=False)  # Noel from blazblue
    async def _5a_no(self):
        """Quick gun jab."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            info = [op.get_text() for op in movesp.find_all('li')]
            info2 = movesp.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + info[0] + "\n" + "*" + info[1] + "\n" + "*" + info[2] + "\n" + "*" + info2 + "```"
            
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/be/BBCP_Noel_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

			
            await self.bot.say(embed=embed)
            
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @no.command(name="5b", pass_context=False)  # Noel from blazblue
    async def _5b_no(self):   
        """Mid-range spacing tool."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            info = [op.get_text() for op in movesp.find_all('li')]
            info2 = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + info[0] + "\n" + "*" + info[1] + "\n" + "*" + info2 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/23/BBCP_Noel_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @no.command(name="5c", pass_context=False)  # Noel from blazblue
    async def _5c_no(self): 
        """Farthest reaching normal."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            info = [op.get_text() for op in movesp.find_all('li')]
            info2 = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + info[0] + "\n" + "*" + info[1] + "\n" + "*" + info[2] + "\n" + "*" + info[3] + "\n" + "*" + info[4] + "\n" + "*" + info2 + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b1/BBCP_Noel_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
	
    @no.command(name="2a", pass_context=False)  # Noel from blazblue
    async def _2a_no(self):   
        """Crouching Gun Jab"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/73/BBCP_Noel_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @no.command(name="2b", pass_context=False)  # Noel from blazblue
    async def _2b_no(self): 
        """Her fastest Low."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5d/BBCP_Noel_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @no.command(name="2c", pass_context=False)  # Noel from blazblue
    async def _2c_no(self):   
        """+1 on Block."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/91/BBCP_Noel_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @no.command(name="6a", pass_context=False)  # Noel from blazblue
    async def _6a_no(self):  
        """Anti-Air"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()          

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b9/BBCP_Noel_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @no.command(name="6b", pass_context=False)  # Noel from blazblue
    async def _6b_no(self):  
        """Overhead"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()  			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fb/BBCP_Noel_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @no.command(name="6c", pass_context=False)  # Noel from blazblue
    async def _6c_no(self):  
        """Second hit isn't a projectile anymore."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]		
            mp2 = [fe.get_text() for fe in info.find_all('p')]	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6C Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/d4/BBCP_Noel_6C.png')
            embed1.add_field(name="Attack Props Continued:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @no.command(name="3c", pass_context=False)  # Noel from blazblue
    async def _3c_no(self):   
        """Not a Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]	
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5f/BBCP_Noel_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @no.command(name="ja", pass_context=False)  # Noel from blazblue
    async def _ja_no(self): 
        """Overhead."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/32/BBCP_Noel_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
			
    @no.command(name="jb", pass_context=False)  # Noel from blazblue
    async def _jb_no(self):   
        """Overhead."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a7/BBCP_Noel_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @no.command(name="jc", pass_context=False)  # Noel from blazblue
    async def _jc_no(self): 
        """NOT an Overhead."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8b/BBCP_Noel_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @no.command(name="j2c", pass_context=False)  # Noel from blazblue
    async def _j2c_no(self): 
        """NOT an Overhead."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp = [op.get_text() for op in info.find_all('li')]		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp[0] + "\n" + "*" + mp[1] + "```"
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCP_Noel_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @no.command(name="5d", pass_context=False)  # Noel from blazblue
    async def _5d_no(self):   
        """Projectile."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  		
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpA = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/84/BBCP_Noel_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @no.command(name="2d", pass_context=False)  # Noel from blazblue
    async def _2d_no(self):  
        """Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp4 = info1.find('p').get_text()
            mp3 = info1.find('li').get_text()
            mp2 = [op2.get_text() for op2 in info.find_all('p')]	
            mp1 = info.find('li').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
            mpC = "```" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "2D Normal Attack Props Cont:"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a9/BBCF_Noel_2D.png')
            embed1.add_field(name="Attack Props:", value=mpC, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @no.command(name="6d", pass_context=False)  # Noel from blazblue
    async def _6d_no(self):  
        """Low, NOT a Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp4 = info1.find('p').get_text()
            mp3 = info1.find('li').get_text()
            mp1 = [op2.get_text() for op2 in info.find_all('li')]	
            mp2 = info.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2f/BBCF_Noel_6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @no.command(name="4d", pass_context=False)  # Noel from blazblue
    async def _4d_no(self):  
        """Projectile."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()
            mp3 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8d/BBCP_Noel_4D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @no.command(name="jd", pass_context=False)  # Noel from blazblue
    async def _jd_no(self):  
        """Projectile, NOT an Overhead."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp3 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1c/BBCP_Noel_jD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @no.command(name="d.5a", pass_context=False)  # Noel from blazblue
    async def _d5a_no(self):  
        """Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()
            mp3 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "D.5A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8b/BBCP_Noel_d5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @no.command(name="d.6a", pass_context=False)  # Noel from blazblue
    async def _d6a_no(self):  
        """(D.4a)Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('p').get_text()	
            mp2 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "D.6A(D.4A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9a/BBCP_Noel_d6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @no.command(name="d.5b", pass_context=False)  # Noel from blazblue
    async def _d5b_no(self):  
        """Second Hit is a Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('p').get_text()	
            mp2 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "D.6A(D.4A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/11/BBCP_Noel_d5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @no.command(name="d.6b", pass_context=False)  # Noel from blazblue
    async def _d6b_no(self):  
        """(D.4b)Overhead, NOT a Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('p').get_text()	
            mp2 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "D.6B(D.4B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7b/BBCP_Noel_d6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @no.command(name="d.5c", pass_context=False)  # Noel from blazblue
    async def _d5c_no(self):  
        """Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('p').get_text()	
            mp2 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "D.5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/50/BBCP_Noel_d5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @no.command(name="d.6c", pass_context=False)  # Noel from blazblue
    async def _d6c_no(self):  
        """(D.4C)Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()
            mp3 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "D.6C(D.4C)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8b/BBCP_Noel_d6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @no.command(name="d.5d", pass_context=False)  # Noel from blazblue
    async def _d5d_no(self):  
        """Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = [po.get_text() for po in info.find_all('p')] 	
            mp2 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "D.5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/84/BBCP_Noel_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @no.command(name="d.2d", pass_context=False)  # Noel from blazblue
    async def _d2d_no(self):  
        """Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			
            mp3 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "D.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a9/BBCF_Noel_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @no.command(name="d.6d", pass_context=False)  # Noel from blazblue
    async def _d6d_no(self):  
        """Low, NOT a Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = [po.get_text() for po in info.find_all('p')]		
            mp2 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "D.6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2f/BBCF_Noel_6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @no.command(name="d.4d", pass_context=False)  # Noel from blazblue
    async def _d4d_no(self):  
        """Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()	
            mp3 = info1.find('li').get_text()			
            mp4 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "D.4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8d/BBCP_Noel_4D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @no.command(name="d.236d", pass_context=False)  # Noel from blazblue
    async def _d236d_no(self):  
        """Second Hit is a Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()				
            mp3 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "D.236D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/20/BBCP_Noel_Bloom_Trigger.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @no.command(name="d.214d", pass_context=False)  # Noel from blazblue
    async def _d214d_no(self):  
        """NOT a Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()	
            mp3 = info1.find('li').get_text()	
            mp4 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "D.214D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6c/BBCP_Noel_Assault_Through.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @no.command(name="d.623d", pass_context=False)  # Noel from blazblue
    async def _d623d_no(self):  
        """NOT a Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()	
            mp3 = info1.find('li').get_text()	
            mp4 = [po.get_text() for po in info1.find_all('p')]			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "\n" + "*" + mp4[2] + "```"
			
            embed = discord.Embed()
            embed.title = "D.623D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ae/BBCP_Noel_Spring_Raid.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @no.command(name="ft", pass_context=False)  # Noel from blazblue
    async def _ft_no(self):   
        """Front Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d6/BBCP_Noel_Forward_Throw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @no.command(name="bt", pass_context=False)  # Noel from blazblue
    async def _bt_no(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a1/BBCP_Noel_Back_Throw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @no.command(name="at", pass_context=False)  # Noel from blazblue
    async def _at_no(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCP_Noel_Air_Throw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @no.command(name="ca", pass_context=False)  # Noel from blazblue
    async def _ca_no(self):   
        """New Counter Assault."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/11/BBCP_Noel_d5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @no.command(name="ct", pass_context=False)  # Noel from blazblue
    async def _ct_no(self):   
        """Noel FINALLY has a way to Guard Crush."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8c/BBCP_Noel_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @no.command(name="236a", pass_context=False)  # Noel from blazblue
    async def _s1_no(self):   
        """(236b)Projectile."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "XI. Optic Barrel 236A/B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3b/BBCP_Noel_Optic_Barrel.png')
            embed.add_field(name="236A Frame Data", value=tab)
            embed.add_field(name="236B Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "XI. Optic Barrel 236A/B Ranges"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/1d/BBCP_Noel_Optic_Barrel2.png')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")		

    @no.command(name="236c", pass_context=False)  # Noel from blazblue
    async def _s2_no(self):   
        """Projectile."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()			   

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Chamber Shot"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e2/BBCP_Noel_Chamber_Shot.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @no.command(name="j236c", pass_context=False)  # Noel from blazblue
    async def _s3_no(self):   
        """Projectile."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = info1.find('li').get_text()
            mp3 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()  			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "XIII. Revolver Blast"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/ca/BBCP_Noel_Revolver_Blast.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="Additional Attack Frame Data", value=tab1)
            embed.add_field(name="Additional Attack Props:", value=mpB, inline='true')
			
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @no.command(name="214a", pass_context=False)  # Noel from blazblue
    async def _s4_no(self):
        """Command Grab, only works on Standing Opponents."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]  
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "IX. Muzzle Flitter"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/23/BBCP_Noel_Muzzle_Filter.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "IX. Muzzle Flitter Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/2/29/BBCP_Noel_Muzzle_Filter2.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")			

    @no.command(name="22b", pass_context=False)  # Noel from blazblue
    async def _s5_no(self):   
        """(22c)Projectile."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [fo.get_text() for fo in info.find_all('li')]  
            mp2 = info.find('p').get_text()	
            mp3 = info1.find('p').get_text()
       

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Silencer"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3b/BBCP_Noel_Silencer.png')
            embed.add_field(name="B Frame Data", value=tab)
            embed.add_field(name="B Attack Props:", value=mpA, inline='true')
            embed.add_field(name="C Frame Data", value=tab1)
            embed.add_field(name="C Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
		

    @no.command(name="632146d", pass_context=False)  # Noel from blazblue
    async def _dd1_no(self):   
        """Combo Ender Super:  Bullets and Finisher are Projectiles, first hit is not."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[85]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Zero Gun: Fenrir"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/78/BBCP_Noel_Fenrir.png')
            embed.add_field(name="First Hit Frame Data", value=tab)
            embed.add_field(name="Bullets Frame Data", value=tab1)
            embed.add_field(name="Finisher Frame Data", value=tab2)
            embed.add_field(name="OD Finisher Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @no.command(name="j236236d", pass_context=False)  # Noel from blazblue
    async def _dd2_no(self):   
        """Yolo Anti Air Punish"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[87]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"         
			
            embed = discord.Embed()
            embed.title = "Bullet Storm > Zero Gun: Thor"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/30/BBCP_Noel_Thor.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")				

    @no.command(name="abcd", pass_context=False)  # Noel from blazblue
    async def _abcd_no(self): 
        """Exceed Accel"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[89]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Zero Gun: Sleipnir"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/60/BBCF_Noel_Sleipnir.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @no.command(name="236236c", pass_context=False)  # Noel from blazblue
    async def _astral_no(self):   
        """Counter Attack"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[91]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Valkyrie Veil"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3e/BBCP_Noel_Astral.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
	           
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @no.command(name="214214c", pass_context=False)  # Noel from blazblue
    async def _astral2_no(self):   
        """You Are Already Dead."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[93]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('p')]

       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Classic Valkyrie Veil"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/db/BBCS_Noel_VVeil.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
	           
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

##################################################################################################################################################################################################
    @la.command(name="5a", pass_context=False)  # Lambda from blazblue
    async def _5a_la(self):
        """Quick poke, not much range"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
            
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/57/BBCS_Lambda_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

			
            await self.bot.say(embed=embed)
            
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @la.command(name="5b", pass_context=False)  # Lambda from blazblue
    async def _5b_la(self):   
        """Kick that can be jump cancelled"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/50/BBCS_Lambda_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @la.command(name="5c", pass_context=False)  # Lambda from blazblue
    async def _5c_la(self): 
        """Yes, this is a projectile"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/97/BBCS_Lambda_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
	
    @la.command(name="2a", pass_context=False)  # Lambda from blazblue
    async def _2a_la(self):   
        """Same story as 5A"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c7/BBCS_Lambda_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @la.command(name="2b", pass_context=False)  # Lambda from blazblue
    async def _2b_la(self): 
        """Hits low"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ac/BBCS_Lambda_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @la.command(name="2c", pass_context=False)  # Lambda from blazblue
    async def _2c_la(self):   
        """Decent anti-air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1e/BBCS_Lambda_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @la.command(name="6a", pass_context=False)  # Lambda from blazblue
    async def _6a_la(self):  
        """A situational anti-air with head invulnerability"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()          

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/77/BBCS_Lambda_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @la.command(name="6b", pass_context=False)  # Lambda from blazblue
    async def _6b_la(self):  
        """Overhead"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()  			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/af/BBCS_Lambda_4B2.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @la.command(name="6c", pass_context=False)  # Lambda from blazblue
    async def _6c_la(self):  
        """Mainly used in combos"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a7/BBCS_Lambda_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @la.command(name="3c", pass_context=False)  # Lambda from blazblue
    async def _3c_la(self):   
        """Low sweep"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCS_Lambda_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @la.command(name="ja", pass_context=False)  # Lambda from blazblue
    async def _ja_la(self): 
        """Bad range air-to-air"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f4/BBCS_Lambda_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
			
    @la.command(name="jb", pass_context=False)  # Lambda from blazblue
    async def _jb_la(self):   
        """Overhead."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a5/BBCS_Lambda_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @la.command(name="jc", pass_context=False)  # Lambda from blazblue
    async def _jc_la(self): 
        """Backwards hitbox"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ac/BBCS_Lambda_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @la.command(name="j2c", pass_context=False)  # Lambda from blazblue
    async def _j2c_la(self): 
        """Combo filler/Situational air-to-air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCS_Lambda_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @la.command(name="5d", pass_context=False)  # Lambda from blazblue
    async def _5d_la(self):   
        """Horizontal sword"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  
            mp1 = info.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  		
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/ff/BBCP_Lambda_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @la.command(name="2d", pass_context=False)  # Lambda from blazblue
    async def _2d_la(self):  
        """70º angle sword"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/69/BBCP_Lambda_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Follow up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @la.command(name="6d", pass_context=False)  # Lambda from blazblue
    async def _6d_la(self):  
        """30° angle sword"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('p').get_text()		
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/db/BBCP_Lambda_6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Follow up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @la.command(name="4d", pass_context=False)  # Lambda from blazblue
    async def _4d_la(self):  
        """Overhead sword"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('p').get_text()				
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCP_Lambda_4D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Follow up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @la.command(name="jd", pass_context=False)  # Lambda from blazblue
    async def _jd_la(self):  
        """Aerial 30° angle sword"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ec/BBCP_Lambda_jD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Follow Up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @la.command(name="j2d", pass_context=False)  # Lambda from blazblue
    async def _j2d_la(self):  
        """Aerial -30° angle sword"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('p').get_text()				
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/83/BBCP_Lambda_j2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Follow up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @la.command(name="j6d", pass_context=False)  # Lambda from blazblue
    async def _j6d_la(self):  
        """Aerial -15° angle sword"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('p').get_text()		
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.6D"
            #embed.set_image(url='http://www.dustloop.com/wiki/images/9/9a/BBCP_lael_d6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Follow Up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @la.command(name="ft", pass_context=False)  # Lambda from blazblue
    async def _ft_la(self):   
        """Front Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c4/BBCS_Lambda_throw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @la.command(name="bt", pass_context=False)  # Lambda from blazblue
    async def _bt_la(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()					

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c4/BBCS_Lambda_throw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @la.command(name="at", pass_context=False)  # Lambda from blazblue
    async def _at_la(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[5]
            info =  table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1c/BBCS_Lambda_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @la.command(name="ca", pass_context=False)  # Lambda from blazblue
    async def _ca_la(self):   
        """New Counter Assault: Same animation as 5B"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/50/BBCS_Lambda_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @la.command(name="ct", pass_context=False)  # Lambda from blazblue
    async def _ct_la(self):   
        """Crush Trigger:  Barrier Smash"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/08/BBCP_Lambda_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Frame Data Cont:", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @la.command(name="214d", pass_context=False)  # Lambda from blazblue
    async def _s1_la(self):   
        """Use, but don't abuse"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Spike Chaser"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/25/BBCP_Lambda_SpikeChaser.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")		

    @la.command(name="236d", pass_context=False)  # Lambda from blazblue
    async def _s2_la(self):   
        """Pizza Cutter"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = info.find('p').get_text()				   

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Sickle Storm"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1a/BBCP_Lambda_SickleStorm.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @la.command(name="j214d", pass_context=False)  # Lambda from blazblue
    async def _s3_la(self):   
        """Less horizontal range than Nu's"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		 			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Crescent Saber"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/83/BBCP_Lambda_CrescentSaber.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props", value=mpA)
			
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @la.command(name="214a", pass_context=False)  # Lambda from blazblue
    async def _s4_la(self):
        """Alternative inputs, 214/b/c:  Combo tool. Field is useful for zoning."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()  
            mp2 = info.find('p').get_text()		
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Gravity Seed"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/eb/BBCS_Lambda_GravitySeed.png')
            embed.add_field(name="Gravity Seed Frame Data", value=tab)
            embed.add_field(name="Gravity Seed (Field) Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")			

    @la.command(name="236a", pass_context=False)  # Lambda from blazblue
    async def _s5_la(self):   
        """Advancing on your position"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()	
       

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Act Parser Zwei"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/58/BBCS_Lambda_ActParserA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @la.command(name="236b", pass_context=False)  # Lambda from blazblue
    async def _s6_la(self):   
        """Breaking midsections"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            my_table1 = table[61]
            my_table2 = table[63]
            my_table3 = table[65]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            table_body3 = my_table3.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body2.find_all('tr')[1]
            headers3 = table_body3.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
            info2 = table_body2.find_all('tr')[2]
            info3 = table_body3.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()	
			
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info1.find('p').get_text()	
			
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp3 = info2.find('p').get_text()	
			
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp4 = info3.find('li').get_text()
            mp5 = info3.find('p').get_text()			
       

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpB = "```" + "*" + mp2 + "```"
            desc1 = "Backflip"
			
            tab2 = tabulate([["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mpC = "```" + "*" + mp3 + "```"
            desc2 = "Breaking Ankles"
			
            tab3 = tabulate([["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mpD = "```" + "*" + mp4 + "\n" + "*" + mp5 + "```"
            desc3 = "CHARGE"
			
            embed = discord.Embed()
            embed.title = "Act Parser Tri"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/48/BBCF_Lambda_ActParserTri.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description=desc1)
            embed1.title = "Act Parser Tri: Spada:  6A (During Tri)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/1a/BBCS_Lambda_ActParserSpada.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            embed2 = discord.Embed(description=desc2)
            embed2.title = "Act Parser Tri: Blade:  6B (During Tri)"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/a/a4/BBCS_Lambda_ActParserB.png')
            embed2.add_field(name="Frame Data", value=tab2)
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')
		
            embed3 = discord.Embed(description=desc3)
            embed3.title = "Act Parser Tri: Cavalier:  236C (or 6C during Tri)"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/6/65/BBCS_Lambda_ActParserC.png')
            embed3.add_field(name="Frame Data", value=tab3)
            embed3.add_field(name="Attack Props:", value=mpD, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @la.command(name="236c", pass_context=False)  # Lambda from blazblue
    async def _s7_la(self):   
        """CHARGE"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()	
       

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Act Parser Tri: Cavalier"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/65/BBCS_Lambda_ActParserC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @la.command(name="22d", pass_context=False)  # Lambda from blazblue
    async def _s8_la(self):   
        """Not a reversal"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()	
       

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Exiga Nail"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCP_Lambda_Exiga_Nail.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
		

    @la.command(name="236236d", pass_context=False)  # Lambda from blazblue
    async def _dd1_la(self):   
        """UNLIMITED BLADE WORKS"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Legacy Edge"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCP_Lambda_LegacyEdge.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @la.command(name="632146d", pass_context=False)  # Lambda from blazblue
    async def _dd2_la(self):   
        """(Air OK)Combo Ender"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"         
			
            embed = discord.Embed()
            embed.title = "Calamity Sword"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4f/BBCP_Lambda_CalamitySword.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="OD Ground Frame Data", value=tab1)
            embed.add_field(name="Air Frame Data", value=tab2)
            embed.add_field(name="OD Air Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")				

    @la.command(name="abcd", pass_context=False)  # Lambda from blazblue
    async def _abcd_la(self): 
        """Exceed Accel: EX Supra"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Duo Cultus"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5c/BBCF_Lambda_DuoCultus.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @la.command(name="214214d", pass_context=False)  # Lambda from blazblue
    async def _astral_la(self):   
        """Hug.exe"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Sword of Destruction"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d5/BBCS_Lambda_SOD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
	           
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
##################################################################################################################################################################################################
    @mu.command(name="5a", pass_context=False)  # Mu 12 from blazblue
    async def _5a_mu(self):
        """Classic Jab with an above average disjointed hitbox"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
            
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bc/BBCS_Mu_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

			
            await self.bot.say(embed=embed)
            
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @mu.command(name="5b", pass_context=False)  # Mu 12 from blazblue
    async def _5b_mu(self):   
        """Too bad it whiffs on recoil."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/81/BBCS_Mu_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @mu.command(name="5c", pass_context=False)  # Mu 12 from blazblue
    async def _5c_mu(self): 
        """The Neutral"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Cont:"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/ca/BBCS_Mu_5C.png')
            embed1.add_field(name="Attack Props Cont.", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
	
    @mu.command(name="2a", pass_context=False)  # Mu 12 from blazblue
    async def _2a_mu(self):   
        """Probably the move you will be pressing the most."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7f/BBCS_Mu_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @mu.command(name="2b", pass_context=False)  # Mu 12 from blazblue
    async def _2b_mu(self): 
        """Keep in mind that this move can easily be disrespected when used incorrectly."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ec/BBCS_Mu_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @mu.command(name="2c", pass_context=False)  # Mu 12 from blazblue
    async def _2c_mu(self):   
        """May be Mu's biggest anti-air, but it's not the best in every situation."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/39/BBCS_Mu_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @mu.command(name="6a", pass_context=False)  # Mu 12 from blazblue
    async def _6a_mu(self):  
        """Anti-air."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b1/BBCS_Mu_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @mu.command(name="6b", pass_context=False)  # Mu 12 from blazblue
    async def _6b_mu(self):  
        """BOOM WHAT AN ENTRANCE"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]  			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
            mpB = "```" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "AP Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCS_Mu_6B.png')
            embed1.add_field(name="Attack Props Cont.", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")

    @mu.command(name="6c", pass_context=False)  # Mu 12 from blazblue
    async def _6c_mu(self):  
        """FATAL!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]  

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "AP Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/12/BBCS_Mu_6C.png')
            embed1.add_field(name="Attack Props Cont.", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @mu.command(name="3c", pass_context=False)  # Mu 12 from blazblue
    async def _3c_mu(self):   
        """Not always expected."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]  		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ee/BBCS_Mu_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @mu.command(name="ja", pass_context=False)  # Mu 12 from blazblue
    async def _ja_mu(self): 
        """Whiffs on crouch."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('li').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/54/BBCS_Mu_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
			
    @mu.command(name="jb", pass_context=False)  # Mu 12 from blazblue
    async def _jb_mu(self):   
        """Has a crossup hitbox."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/68/BBCS_Mu_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @mu.command(name="jc", pass_context=False)  # Mu 12 from blazblue
    async def _jc_mu(self): 
        """Primarily used for air-to-air."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/06/BBCS_Mu_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @mu.command(name="j2c", pass_context=False)  # Mu 12 from blazblue
    async def _j2c_mu(self): 
        """So big."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp + "```"
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/48/BBCS_Mu_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @mu.command(name="5d", pass_context=False)  # Mu 12 from blazblue
    async def _5d_mu(self):   
        """Don't get carried away"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            my_table1 = table[31]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCP_Mu_bit.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
			
            embed1 = discord.Embed()
            embed1.title = "Ground D Positions"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b2/BBCP_Mu_groundD.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @mu.command(name="2d", pass_context=False)  # Mu 12 from blazblue
    async def _2d_mu(self):  
        """Don't get carried away"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            my_table1 = table[31]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCP_Mu_bit.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
			
            embed1 = discord.Embed()
            embed1.title = "Ground D Positions"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b2/BBCP_Mu_groundD.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @mu.command(name="6d", pass_context=False)  # Mu 12 from blazblue
    async def _6d_mu(self):  
        """Don't get carried away"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            my_table1 = table[31]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[4]
            headers1 = table_body1.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCP_Mu_bit.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
			
            embed1 = discord.Embed()
            embed1.title = "Ground D Positions"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b2/BBCP_Mu_groundD.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @mu.command(name="4d", pass_context=False)  # Mu 12 from blazblue
    async def _4d_mu(self):  
        """Don't get carried away"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            my_table1 = table[31]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
			
            embed = discord.Embed()
            embed.title = "4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCP_Mu_bit.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
			
            embed1 = discord.Embed()
            embed1.title = "Ground D Positions"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b2/BBCP_Mu_groundD.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @mu.command(name="j5d", pass_context=False)  # Mu 12 from blazblue
    async def _jd_mu(self):  
        """Mostly found in corner combos and setups."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            my_table1 = table[35]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
			
            embed = discord.Embed()
            embed.title = "J.5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCP_Mu_bit.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
			
            embed1 = discord.Embed()
            embed1.title = "Air D Positions"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCS_Mu_airD.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @mu.command(name="j2d", pass_context=False)  # Mu 12 from blazblue
    async def _j2d_mu(self):  
        """Mostly found in corner combos and setups."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            my_table1 = table[35]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
			
            embed = discord.Embed()
            embed.title = "J.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCP_Mu_bit.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
			
            embed1 = discord.Embed()
            embed1.title = "Air D Positions"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCS_Mu_airD.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @mu.command(name="j4d", pass_context=False)  # Mu 12 from blazblue
    async def _j4d_mu(self):  
        """Mostly found in corner combos and setups."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            my_table1 = table[35]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
			
            embed = discord.Embed()
            embed.title = "J.4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCP_Mu_bit.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
			
            embed1 = discord.Embed()
            embed1.title = "Air D Positions"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCS_Mu_airD.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")

    @mu.command(name="j6d", pass_context=False)  # Mu 12 from blazblue
    async def _j6d_mu(self):  
        """Mostly found in corner combos and setups."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            my_table1 = table[35]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[4]
            headers1 = table_body1.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
			
            embed = discord.Embed()
            embed.title = "J.6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCP_Mu_bit.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
			
            embed1 = discord.Embed()
            embed1.title = "Air D Positions"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCS_Mu_airD.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @mu.command(name="ft", pass_context=False)  # Mu 12 from blazblue
    async def _ft_mu(self):   
        """2c-b kara throw."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cf/BBCS_Mu_throw.png')
            embed.add_field(name="Frame Data", value=tab)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @mu.command(name="bt", pass_context=False)  # Mu 12 from blazblue
    async def _bt_mu(self):   
        """Same as forward throw in every way."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')]					

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cf/BBCS_Mu_throw.png')
            embed.add_field(name="Frame Data", value=tab)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @mu.command(name="at", pass_context=False)  # Mu 12 from blazblue
    async def _at_mu(self):   
        """Best poke in the game."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')]				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/76/BBCS_Mu_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @mu.command(name="ca", pass_context=False)  # Mu 12 from blazblue
    async def _ca_mu(self):   
        """Counter Assault: Range is sad."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/81/BBCS_Mu_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @mu.command(name="ct", pass_context=False)  # Mu 12 from blazblue
    async def _ct_mu(self):   
        """Crush Trigger:  Undine"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]		
            mp1 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b6/BBCP_Mu_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @mu.command(name="236a", pass_context=False)  # Mu 12 from blazblue
    async def _s1_mu(self):   
        """You can never use this enough."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('p').get_text()	
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Ama no Habaya - Arrows of Heaven"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/72/BBCS_Mu_ArrowsOfHeaven.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @mu.command(name="j236a", pass_context=False)  # Mu 12 from blazblue
    async def _s2_mu(self):   
        """You can never use this enough."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('p').get_text()	
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Ama no Habaya - Arrows of Heaven"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/72/BBCS_Mu_ArrowsOfHeaven.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")			

    @mu.command(name="623c", pass_context=False)  # Mu 12 from blazblue
    async def _s3_mu(self):   
        """The 10-frame startup and full body guard point properties make this a very good DP to get Mu's opponents off of her."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = info.find('li').get_text()	
            mp2 = [op.get_text() for op in info1.find_all('p')]
            vrs = headers.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] +"```"
			
            embed = discord.Embed()
            embed.title = "Tsunugui - Origins"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d2/BBCS_Mu_Origins.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @mu.command(name="j623c", pass_context=False)  # Mu 12 from blazblue
    async def _s4_mu(self):   
        """The 10-frame startup and full body guard point properties make this a very good DP to get Mu's opponents off of her."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = info.find('li').get_text()	
            mp2 = [op.get_text() for op in info.find_all('p')]	
            vrs = headers.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] +"```"
			
            embed = discord.Embed()
            embed.title = "Tsunugui - Origins"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d2/BBCS_Mu_Origins.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @mu.command(name="63214c", pass_context=False)  # Mu 12 from blazblue
    async def _s5_mu(self):   
        """Can't read my poker face."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            mp1 = info.find('p').get_text()		 			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Furu no Tsurugi - Sword of Decimation"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6e/BBCS_Mu_SOD.png')
            embed.add_field(name="Level 1 Frame Data", value=tab)
            embed.add_field(name="Level 2 Frame Data", value=tab1)
            embed.add_field(name="Level 3 Frame Data", value=tab2)
            embed.add_field(name="Attack Props", value=mpA)
			
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @mu.command(name="236d", pass_context=False)  # Mu 12 from blazblue
    async def _s6_mu(self):
        """Ride the laser."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Ame no Totsuka - Totsuka Blade"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/da/BBCS_Mu_TotsukaBlade.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")			

    @mu.command(name="214d", pass_context=False)  # Mu 12 from blazblue
    async def _s7_mu(self):   
        """Kaihou! 2.0"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
       

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Kuninotokotachi - Tokotachi Blade"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b6/BBCF_Mu_Kuninotokotachi.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Ground OD Frame Data", value=tab1)
            embed.add_field(name="Air Frame Data", value=tab2)
            embed.add_field(name="Air OD Frame Data", value=tab3)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @mu.command(name="63214b", pass_context=False)  # Mu 12 from blazblue
    async def _s8_mu(self):
        """Lightning Legs!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		
            vrs = headers.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Ikutachi - Sword of Infinity"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1b/BBCP_Mu_Ikutachi.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			

    @mu.command(name="632146c", pass_context=False)  # Mu 12 from blazblue
    async def _dd1_mu(self):   
        """Hello? Did you order the enormous hitbox?"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]	
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Omohikane - Wisdom of the Divines"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cd/BBCS_Mu_WisdomOfTheDivines.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed()
            embed1.title = "Omohikane - Wisdom of the Divines"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCS_Mu_WisdomOfTheDivines2.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @mu.command(name="632146d", pass_context=False)  # Mu 12 from blazblue
    async def _dd2_mu(self):   
        """Make it rain!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]	
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"      
			
            embed = discord.Embed()
            embed.title = "Yata no Kagami - Blessed Mirror"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b7/BBCS_Mu_BlessedMirror.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Reflected Lasers Frame Data", value=tab1)
            embed.add_field(name="Air Frame Data", value=tab2)
            embed.add_field(name="Air - Reflected Lasers Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")				

    @mu.command(name="abcd", pass_context=False)  # Mu 12 from blazblue
    async def _abcd_mu(self): 
        """How to kill an angel"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]	
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
	   
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Tsuchiikadzuchi - Pillar of Light"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/51/BBCF_Mu_ExceedAccel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @mu.command(name="222d", pass_context=False)  # Mu 12 from blazblue
    async def _astral_mu(self):   
        """Hug.exe"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]	
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Kamigoroshi no Tsurugi - Sword of the Godslayer"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCS_Mu_SwordOfTheGodslayer.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Kamigoroshi no Tsurugi - Sword of the Godslayer Finish"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f0/BBP_Mu_SwordOfTheGodslayer2.png')
	           
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
##################################################################################################################################################################################################
    @nu.command(name="5a", pass_context=False)  # Nu 13 from blazblue
    async def _5a_nu(self):
        #"""Classic Jab with an above average disjointed hitbox"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
            
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1d/BBCP_Nu_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

			
            await self.bot.say(embed=embed)
            
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @nu.command(name="5b", pass_context=False)  # Nu 13 from blazblue
    async def _5b_nu(self):   
        #"""Too bad it whiffs on recoil."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/ba/BBCP_Nu_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @nu.command(name="5c", pass_context=False)  # Nu 13 from blazblue
    async def _5c_nu(self): 
        #"""The Neutral"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e2/BBCP_Nu_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
	
    @nu.command(name="2a", pass_context=False)  # Nu 13 from blazblue
    async def _2a_nu(self):   
        #"""Probably the move you will be pressing the most."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b1/BBCP_Nu_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @nu.command(name="2b", pass_context=False)  # Nu 13 from blazblue
    async def _2b_nu(self): 
        #"""Keep in mind that this move can easily be disrespected when used incorrectly."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4a/BBCP_Nu_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @nu.command(name="2c", pass_context=False)  # Nu 13 from blazblue
    async def _2c_nu(self):   
        #"""May be Mu's biggest anti-air, but it's not the best in every situation."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/db/BBCP_Nu_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @nu.command(name="6a", pass_context=False)  # Nu 13 from blazblue
    async def _6a_nu(self):  
        #"""Anti-air."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/12/BBCP_Nu_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @nu.command(name="6b", pass_context=False)  # Nu 13 from blazblue
    async def _6b_nu(self):  
        #"""BOOM WHAT AN ENTRANCE"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]  			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b9/BBCP_Nu_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @nu.command(name="6c", pass_context=False)  # Nu 13 from blazblue
    async def _6c_nu(self):  
        #"""FATAL!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]  

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0f/BBCP_Nu_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @nu.command(name="3c", pass_context=False)  # Nu 13 from blazblue
    async def _3c_nu(self):   
        #"""Not always expected."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]  		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/ca/BBCP_Nu_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @nu.command(name="ja", pass_context=False)  # Nu 13 from blazblue
    async def _ja_nu(self): 
        #"""Whiffs on crouch."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]  

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCP_Nu_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
			
    @nu.command(name="jb", pass_context=False)  # Nu 13 from blazblue
    async def _jb_nu(self):   
        #"""Has a crossup hitbox."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')] 		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/68/BBCP_Nu_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @nu.command(name="jc", pass_context=False)  # Nu 13 from blazblue
    async def _jc_nu(self): 
        #"""Primarily used for air-to-air."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/de/BBCP_Nu_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @nu.command(name="j2c", pass_context=False)  # Nu 13 from blazblue
    async def _j2c_nu(self): 
        #"""So big."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/49/BBCP_Nu_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @nu.command(name="5d", pass_context=False)  # Nu 13 from blazblue
    async def _5d_nu(self):   
        """Give'em the D"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]  
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()	
            vrs3 = headers3.find('th').get_text()	
            mp1 = info.find('li').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')		
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"			
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCP_Nu_5D.png')
            embed.add_field(name="5D Frame Data", value=tab)
            embed.add_field(name="5DD Frame Data", value=tab1)
            embed.add_field(name="5D OD Follow-up Frame Data", value=tab2)
            embed.add_field(name="5DD OD Follow-up Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @nu.command(name="2d", pass_context=False)  # Nu 13 from blazblue
    async def _2d_nu(self):  
        """Give 'em the low D"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]  
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()	
            vrs3 = headers3.find('th').get_text()	
            mp1 = [op.get_text() for op in info.find_all('li')]				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')		
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"			
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/23/BBCP_Nu_2D.png')
            embed.add_field(name="2D Frame Data", value=tab)
            embed.add_field(name="2DD Frame Data", value=tab1)
            embed.add_field(name="2D OD Follow-up Frame Data", value=tab2)
            embed.add_field(name="2DD OD Follow-up Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @nu.command(name="6d", pass_context=False)  # Nu 13 from blazblue
    async def _6d_nu(self):  
        """Air HADOUKEN D"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]  
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()	
            vrs3 = headers3.find('th').get_text()	
            mp1 = [op.get_text() for op in info.find_all('li')]				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')		
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"			
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9d/BBCP_Nu_6D.png')
            embed.add_field(name="6D Frame Data", value=tab)
            embed.add_field(name="6DD Frame Data", value=tab1)
            embed.add_field(name="6D OD Follow-up Frame Data", value=tab2)
            embed.add_field(name="6DD OD Follow-up Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @nu.command(name="4d", pass_context=False)  # Nu 13 from blazblue
    async def _4d_nu(self):  
        """Sneaky D"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]  
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()	
            vrs3 = headers3.find('th').get_text()	
            mp1 = [op.get_text() for op in info.find_all('li')]				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')		
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"			
			
            embed = discord.Embed()
            embed.title = "4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/19/BBCP_Nu_4D.png')
            embed.add_field(name="4D Frame Data", value=tab)
            embed.add_field(name="4DD Frame Data", value=tab1)
            embed.add_field(name="4D OD Follow-up Frame Data", value=tab2)
            embed.add_field(name="4DD OD Follow-up Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @nu.command(name="jd", pass_context=False)  # Nu 13 from blazblue
    async def _jd_nu(self):  
        """Get down HERE!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]  
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()	
            vrs3 = headers3.find('th').get_text()	
            mp1 = [op.get_text() for op in info.find_all('li')]				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')		
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"			
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fd/BBCP_Nu_jD.png')
            embed.add_field(name="J.D Frame Data", value=tab)
            embed.add_field(name="J.DD Frame Data", value=tab1)
            embed.add_field(name="J.D OD Follow-up Frame Data", value=tab2)
            embed.add_field(name="J.DD OD Follow-up Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @nu.command(name="j2d", pass_context=False)  # Nu 13 from blazblue
    async def _j2d_nu(self):  
        """Stay down!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]  
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()	
            vrs3 = headers3.find('th').get_text()	
            mp1 = [op.get_text() for op in info.find_all('li')]				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')		
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"			
			
            embed = discord.Embed()
            embed.title = "J.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/92/BBCP_Nu_j2D.png')
            embed.add_field(name="J.2D Frame Data", value=tab)
            embed.add_field(name="J.2DD Frame Data", value=tab1)
            embed.add_field(name="J.2D OD Follow-up Frame Data", value=tab2)
            embed.add_field(name="J.2DD OD Follow-up Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			

    @nu.command(name="j6d", pass_context=False)  # Nu 13 from blazblue
    async def _j6d_nu(self):  
        """The sudden suprise"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]  
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()	
            vrs3 = headers3.find('th').get_text()	
            mp1 = [op.get_text() for op in info.find_all('li')]				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')		
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"			
			
            embed = discord.Embed()
            embed.title = "J.6D"
            #embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCP_nu_bit.png')
            embed.add_field(name="J.6D Frame Data", value=tab)
            embed.add_field(name="J.6DD Frame Data", value=tab1)
            embed.add_field(name="J.6D OD Follow-up Frame Data", value=tab2)
            embed.add_field(name="J.6DD OD Follow-up Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @nu.command(name="ft", pass_context=False)  # Nu 13 from blazblue
    async def _ft_nu(self):   
        """Forward Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"	
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/97/BBCP_Nu_Throw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @nu.command(name="bt", pass_context=False)  # Nu 13 from blazblue
    async def _bt_nu(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"	
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/97/BBCP_Nu_Throw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @nu.command(name="at", pass_context=False)  # Nu 13 from blazblue
    async def _at_nu(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "```"	
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/80/BBCP_Nu_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @nu.command(name="ca", pass_context=False)  # Nu 13 from blazblue
    async def _ca_nu(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b9/BBCP_Nu_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @nu.command(name="ct", pass_context=False)  # Nu 13 from blazblue
    async def _ct_nu(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]		
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/51/BBCP_Nu_CT.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @nu.command(name="214d", pass_context=False)  # Nu 13 from blazblue
    async def _s1_nu(self):   
        """Steins Gunner counterfeit"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 =  table_body.find_all('tr')[4]
            headers2 = table_body.find_all('tr')[5]
            info2 =  table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('li').get_text()	
            vrs = headers.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            mp2 = info1.find('li').get_text()	
            vrs1 = headers1.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            mp3 = info2.find('li').get_text()	
            vrs2 = headers2.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpB = "```" + "*" + mp2 + "```"
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mpC = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Luminous Slave"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ad/BBCF_Nu_LuminousSlave.png')
            embed.add_field(name="214D Frame Data", value=tab)
            embed.add_field(name="214D Attack Props:", value=mpA, inline='true')
            embed.add_field(name="214D-C Frame Data", value=tab1)
            embed.add_field(name="214D-C Attack Props:", value=mpB, inline='true')
            embed.add_field(name="214[D] Frame Data", value=tab2)
            embed.add_field(name="214[D] Attack Props:", value=mpC, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @nu.command(name="236d", pass_context=False)  # Nu 13 from blazblue
    async def _s2_nu(self):   
        """Charged version is a Fatal Counter"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]	
            vrs = headers.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]		
            vrs1 = headers1.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]		
            vrs2 = headers2.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] +  "\n" + "*" + mp1[7] + "\n" + "*" + mp1[8] + "```"
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Sickle Storm"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/16/BBCP_Nu_SickleStormDia.png')
            embed.add_field(name="236D Frame Data", value=tab)
            embed.add_field(name="236D-C Frame Data", value=tab1)
            embed.add_field(name="236[D] Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "236D-C Sickle Storm"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/36/BBCP_Nu_SickleStormLuna.png')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")			

    @nu.command(name="j214d", pass_context=False)  # Nu 13 from blazblue
    async def _s3_nu(self):   
        """SUPRISE SHANK"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]	
            vrs = headers.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]		
            vrs1 = headers1.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]		
            vrs2 = headers2.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "```"
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Crescent Saber"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/49/BBCP_Nu_CrescentSaber.png')
            embed.add_field(name="236D Frame Data", value=tab)
            embed.add_field(name="236D-C Frame Data", value=tab1)
            embed.add_field(name="236[D] Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	
			
    @nu.command(name="ap", pass_context=False)  # Nu 13 from blazblue
    async def _s4_nu(self):   
        """66/44 after certain moves (Air OK)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]	
            vrs = headers.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]		
            vrs1 = headers1.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]				
            vrs2 = headers2.find('th').get_text()
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]				
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Act Parser"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ea/BBCP_Nu_ActParser.png')
            embed.add_field(name="66 Frame Data", value=tab)
            embed.add_field(name="44 Frame Data", value=tab1)
            embed.add_field(name="j.66 Frame Data", value=tab2)
            embed.add_field(name="j.44 Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @nu.command(name="214a", pass_context=False)  # Nu 13 from blazblue
    async def _s5_nu(self):   
        """(Alt inputs: 214B/C) Anti-Tager Zone """
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]		 			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
			
            embed = discord.Embed()
            embed.title = "Gravity Seed: 214A/B/C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/25/BBCP_Nu_GravitySeed.png')
            embed.add_field(name="Gravity Seed Frame Data", value=tab)
            embed.add_field(name="Gravity Seed Field Frame Data", value=tab1)
            embed.add_field(name="Attack Props", value=mp)
			
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @nu.command(name="623c", pass_context=False)  # Nu 13 from blazblue
    async def _s6_nu(self):
        """(Air OK)JAZZ HANDS"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]	
            vrs = headers.find('th').get_text()		
            vrs1 = headers1.find('th').get_text()		

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
			
            embed = discord.Embed()
            embed.title = "Supra Rage"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a2/BBCP_Nu_SupraRage.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")			
			

    @nu.command(name="236236d", pass_context=False)  # Nu 13 from blazblue
    async def _dd1_nu(self):   
        """Machine Gun"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "```"
			
            embed = discord.Embed()
            embed.title = "Legacy Edge"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c9/BBCP_Nu_LegacyEdge.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @nu.command(name="632146d", pass_context=False)  # Nu 13 from blazblue
    async def _dd2_nu(self):   
        """(Air OK)Epic Sword Drop"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"      
			
            embed = discord.Embed()
            embed.title = "Calamity Sword"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7f/BBCP_Nu_CalamitySword.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Ground OD Frame Data", value=tab1)
            embed.add_field(name="Air Frame Data", value=tab2)
            embed.add_field(name="Air OD Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")				

    @nu.command(name="abcd", pass_context=False)  # Nu 13 from blazblue
    async def _abcd_nu(self): 
        """4D X 400"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]	
            mp2 = [op.get_text() for op in info.find_all('p')]
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "True Impreza"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/66/BBCF_Nu_TrueImpreza.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @nu.command(name="214214d", pass_context=False)  # Nu 13 from blazblue
    async def _astral_nu(self):   
        """Execute Nu_bass_drop"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Sword of Destruction"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d8/BBCP_Nu_SwordofDestruction.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Sword of Destruction Finisher"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/e5/BBCP_Nu_SwordofDestruction2.png')
	           
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
###################################################################################################################################################################################################
    @te.command(name="5a", pass_context=False)  # Terumi from blazblue
    async def _5a_te(self):
        """Classic backhander"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3e/BBCP_Terumi_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

			
            await self.bot.say(embed=embed)
            
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @te.command(name="5b", pass_context=False)  # Terumi from blazblue
    async def _5b_te(self):   
        """Dance and sting like an evil hornet"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCP_Terumi_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @te.command(name="5c", pass_context=False)  # Terumi from blazblue
    async def _5c_te(self): 
        """Two are better than one"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/13/BBCP_Terumi_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
	
    @te.command(name="2a", pass_context=False)  # Terumi from blazblue
    async def _2a_te(self):   
        """Clenched fists don't have any class"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5e/BBCP_Terumi_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @te.command(name="2b", pass_context=False)  # Terumi from blazblue
    async def _2b_te(self): 
        """Not safe on block but fast enough for Terumi's victims"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/dd/BBCP_Terumi_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @te.command(name="2c", pass_context=False)  # Terumi from blazblue
    async def _2c_te(self):   
        """Far reach, jump-cancelable, what you want more?"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = info.find('li').get_text()
            mp2 = [op.get_text() for op in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/45/BBCP_Terumi_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @te.command(name="6a", pass_context=False)  # Terumi from blazblue
    async def _6a_te(self):  
        """From above?"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]        

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ee/BBCP_Terumi_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @te.command(name="6b", pass_context=False)  # Terumi from blazblue
    async def _6b_te(self):  
        """Soooo satisfying to ram your knee into someone else"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('li').get_text()
            mp2 = [op.get_text() for op in info.find_all('p')]  	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0b/BBCP_Terumi_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Feint Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @te.command(name="6c", pass_context=False)  # Terumi from blazblue
    async def _6c_te(self):  
        """Slice aaand dice!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/96/BBCP_Terumi_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @te.command(name="3c", pass_context=False)  # Terumi from blazblue
    async def _3c_te(self):   
        """Always good to sweep someone off their feet"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('p')]			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/19/BBCP_Terumi_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @te.command(name="ja", pass_context=False)  # Terumi from blazblue
    async def _ja_te(self): 
        """Jab, jab, jab..."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6a/BBCP_Terumi_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
			
    @te.command(name="jb", pass_context=False)  # Terumi from blazblue
    async def _jb_te(self):   
        """Roundhouse kick, ha!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f7/BBCP_Terumi_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @te.command(name="jc", pass_context=False)  # Terumi from blazblue
    async def _jc_te(self): 
        """Slash 'em!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4f/BBCP_Terumi_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @te.command(name="5d", pass_context=False)  # Terumi from blazblue
    async def _5d_te(self):   
        """Jabak- I mean 5D"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = [po.get_text() for po in info.find_all('p')]	
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]			
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  		
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7d/BBCP_Terumi_5D.png')
            embed.add_field(name="5D Frame Data", value=tab)
            embed.add_field(name="5D Attack Props:", value=mpA, inline='true')
            embed.add_field(name="5D OD Frame Data", value=tab1)
            embed.add_field(name="5D OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @te.command(name="2d", pass_context=False)  # Terumi from blazblue
    async def _2d_te(self):  
        """Great for okizeme and pulling them back into misery"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = [op2.get_text() for op2 in info1.find_all('li')]
            mp4 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/16/BBCP_Terumi_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @te.command(name="6d", pass_context=False)  # Terumi from blazblue
    async def _6d_te(self):  
        """Have a nice flight, haha!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]	
            mp4 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/06/BBCP_Terumi_6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab)
            embed.add_field(name="OD Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @te.command(name="4d", pass_context=False)  # Terumi from blazblue
    async def _4d_te(self):  
        """Kicking the dog!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/36/BBCF_Terumi_4D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @te.command(name="jd", pass_context=False)  # Terumi from blazblue
    async def _jd_te(self):  
        """Yay! No extended hurtbox!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 			
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]		
            mp1 = info.find('li').get_text()
            mp2 = [op.get_text() for op in info.find_all('p')]	
            mp4 = info1.find('p').get_text()	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "j.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/13/BBCP_Terumi_jD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @te.command(name="j2d", pass_context=False)  # Terumi from blazblue
    async def _j2d_te(self):  
        """Ressen- I mean J.2D"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 			
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]		
            mp1 = info.find('li').get_text()
            mp2 = [op.get_text() for op in info.find_all('p')]	
            mp4 = info1.find('p').get_text()	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "j.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5b/BBCP_Terumi_j2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @te.command(name="ft", pass_context=False)  # Terumi from blazblue
    async def _ft_te(self):   
        """The heel must hurt..."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a6/BBCP_Terumi_ForwardThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @te.command(name="bt", pass_context=False)  # Terumi from blazblue
    async def _bt_te(self):   
        """Sucks to be you!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ac/BBCP_Terumi_BackThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @te.command(name="at", pass_context=False)  # Terumi from blazblue
    async def _at_te(self):   
        """Sucks to be you!, now in air"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [op.get_text() for op in info.find_all('p')]		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/98/BBCP_Terumi_AirThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @te.command(name="ca", pass_context=False)  # Terumi from blazblue
    async def _ca_te(self):   
        """Sh**, missed again! Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ee/BBCP_Terumi_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @te.command(name="ct", pass_context=False)  # Terumi from blazblue
    async def _ct_te(self):   
        """Zanei- I mean Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9a/BBCP_Terumi_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @te.command(name="236d", pass_context=False)  # Terumi from blazblue
    async def _s1_te(self):   
        """You're gonna see this A LOT"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [op1.get_text() for op1 in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Snakebite - Jagaku"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/33/BBCP_Terumi_236D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")		

    @te.command(name="214d", pass_context=False)  # Terumi from blazblue
    async def _s2_te(self):   
        """Enjoy the pain!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Retaliating Fang - Gasenshou"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/72/BBCP_Terumi_214D_%281%29.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Retaliating Fang - Gasenshou Finisher"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f1/BBCP_Terumi_214D_%282%29.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @te.command(name="22c", pass_context=False)  # Terumi from blazblue
    async def _s3_te(self):   
        """That stomping special"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    
            mp2 = [op1.get_text() for op1 in info.find_all('p')]			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Cleaving Fang - Garengeki"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8b/BBCP_Terumi_22C.png')
            embed.add_field(name="Light Frame Data", value=tab)
            embed.add_field(name="Heavy Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		
		

    @te.command(name="214c", pass_context=False)  # Terumi from blazblue
    async def _s4_te(self):   
        """Quite a literal overhead"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
       

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Agonizing Fang - Tsuishoga"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cf/BBCF_Terumi_Tsuishoga.png')
            embed.add_field(name="No Charge Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @te.command(name="41236c", pass_context=False)  # Terumi from blazblue
    async def _dd1_te(self):
        """(AIR OK)Who says that snakes can't be fast?"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body.find_all('tr')[4]
            headers3 = table_body.find_all('tr')[5]
            info1 =  table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    
            mp2 = [op1.get_text() for op1 in info.find_all('p')]
            mp3 = info1.find('li').get_text()    
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Gleaming Fang - Jakyou Messenga"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fb/BBCP_Terumi_41236C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "OD Gleaming Fang - Jakyou Messenga"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/e9/BBCP_Terumi_41236C_Air.png')
            embed1.add_field(name="OD Frame Data", value=tab2)
            embed1.add_field(name="OD Air Frame Data", value=tab3)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	
		

    @te.command(name="623b", pass_context=False)  # Terumi from blazblue
    async def _dd2_te(self):   
        """(AIR OK)10 frames of invul! Hold that Haz!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = info1.find('li').get_text()
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Divine Twin Blades - Gouga Soutenjin"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3d/BBCP_Terumi_623B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @te.command(name="63214b", pass_context=False)  # Terumi from blazblue
    async def _dd3_te(self):   
        """Up High."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[7]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = info1.find('li').get_text()
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()		
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Serpent's Laceration - Orochi Burensen(B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a4/BBCP_Terumi_63214B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @te.command(name="63214a", pass_context=False)  # Terumi from blazblue
    async def _dd4_te(self):   
        """Down Low."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[6]
            info = table_body.find_all('tr')[4]
            info1 = table_body.find_all('tr')[7]

			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [op.get_text() for op in info.find_all('p')]
            mp3 = info1.find('li').get_text()
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()		
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Serpent's Laceration - Orochi Burensen(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b7/BBCP_Terumi_63214A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @te.command(name="236236a", pass_context=False)  # Terumi from blazblue
    async def _dd5_te(self):   
        """When it works, then with a big, venomous grin..."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[4]
            headers3 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()	
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()			
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Venomous Bite - Ouja Zanrouga"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCP_Terumi_236236A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Catch Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA)
            embed.add_field(name="OD Frame Data", value=tab2)
            embed.add_field(name="OD Catch Frame Data", value=tab3)
            embed.add_field(name="OD Attack Props:", value=mpB)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @te.command(name="632146d", pass_context=False)  # Terumi from blazblue
    async def _dd6_te(self):   
        """Drain everything until nothing is left"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[5]
            headers4 = table_body.find_all('tr')[6]
            headers5 = table_body.find_all('tr')[7]
            info = table_body.find_all('tr')[4]
            info1 = table_body.find_all('tr')[8]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = [op.get_text() for op in info.find_all('p')]
            mp3 = info1.find('li').get_text()
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()	
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()	
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()			
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
            mpA1 = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Serpent's Cursed Sting - Jabaku Fuuenjin"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9e/BBCP_Terumi_632146D_%281%29.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Additional Attack Frame Data", value=tab1)
            embed.add_field(name="Finisher Frame Data", value=tab2)
            embed.add_field(name="Attack Frame Data", value=tab3)
            embed.add_field(name=" Additional Attacks Frame Data", value=tab4)
            embed.add_field(name="Finisher Frame Data", value=tab5)
			
            embed1 = discord.Embed()
            embed1.title = "cont."
            embed1.add_field(name="Attack Props", value=mpA)
			
            embed2 = discord.Embed()
            embed2.title = "cont."
            embed2.add_field(name="Attack Props: Cont.", value=mpA1)
			
            embed3 = discord.Embed()
            embed3.title = "cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/6/6f/BBCP_Terumi_632146D_%282%29.png')
            embed3.add_field(name="OD Attack Props:", value=mpB)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @te.command(name="236236d", pass_context=False)  # Terumi from blazblue
    async def _dd7_te(self):   
        """Get over here and let me hear you cry!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = [op.get_text() for op in info.find_all('p')]
            mp3 = info1.find('li').get_text()
            mp4 = [op1.get_text() for op1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()		
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpA1 = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Screeches of the Condemned - Jarin Renshouga"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
			
            embed1 = discord.Embed()
            embed1.title = "cont."
            embed1.add_field(name="Attack Props:", value=mpA)
            embed1.add_field(name="Attack Props:", value=mpA1)
			
            embed2 = discord.Embed()
            embed2.title = "cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/3/33/BBCP_Terumi_236236D.png')
            embed2.add_field(name="OD Attack Props:", value=mpB)
			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @te.command(name="214214d", pass_context=False)  # Terumi from blazblue
    async def _dd8_te(self):   
        """Get over here and let me hear you cry! Air Edition"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[4]

			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = [op.get_text() for op in info.find_all('p')]
            mp3 = info1.find('li').get_text()
            mp4 = [op1.get_text() for op1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()		
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpA1 = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Screeches of the Condemned - Jarin Renshouga"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
			
            embed1 = discord.Embed()
            embed1.title = "cont."
            embed1.add_field(name="Attack Props:", value=mpA)
            embed1.add_field(name="Attack Props:", value=mpA1)
			
            embed2 = discord.Embed()
            embed2.title = "cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/0/0b/BBCP_Terumi_214214D.png')
            embed2.add_field(name="OD Attack Props:", value=mpB)
			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found.....")				

    @te.command(name="abcd", pass_context=False)  # Terumi from blazblue
    async def _abcd_te(self): 
        """Exceed Accel:  Come on, devour them!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Dungeon of Serpents - Jaraku Enkokusen"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cd/BBCF_Terumi_JarakuEnkokusen.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @te.command(name="222d", pass_context=False)  # Terumi from blazblue
    async def _222d_te(self):   
        """Feel the wrath of the true Susano'o!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Unholy Wrath of the Basilisk - Orochizanto Reppuga"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d6/BBCP_Terumi_222D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
###################################################################################################################################################################################################
    @vk.command(name="5a", pass_context=False)  # Valkenhayn from blazblue
    async def _5a_vk(self):
        #"""Classic backhander"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
            
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bc/BBCS_Valkenhayn_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

			
            await self.bot.say(embed=embed)
            
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @vk.command(name="5b", pass_context=False)  # Valkenhayn from blazblue
    async def _5b_vk(self):   
        #"""Dance and sting like an evil hornet"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5c/BBCS_Valkenhayn_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @vk.command(name="5c", pass_context=False)  # Valkenhayn from blazblue
    async def _5c_vk(self): 
        #"""Two are better than one"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2a/BBCS_Valkenhayn_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
	
    @vk.command(name="2a", pass_context=False)  # Valkenhayn from blazblue
    async def _2a_vk(self):   
        #"""Clenched fists don't have any class"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b2/BBCS_Valkenhayn_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @vk.command(name="2b", pass_context=False)  # Valkenhayn from blazblue
    async def _2b_vk(self): 
        #"""Not safe on block but fast enough for Terumi's victims"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f0/BBCS_Valkenhayn_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @vk.command(name="2c", pass_context=False)  # Valkenhayn from blazblue
    async def _2c_vk(self):   
        #"""Far reach, jump-cancelable, what you want more?"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f9/BBCS_Valkenhayn_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @vk.command(name="6a", pass_context=False)  # Valkenhayn from blazblue
    async def _6a_vk(self):  
        #"""From above?"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d1/BBCS_Valkenhayn_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @vk.command(name="6b", pass_context=False)  # Valkenhayn from blazblue
    async def _6b_vk(self):  
        """Gentlemen's Elbow"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]  			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/51/BBCF_Valkenhayn_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @vk.command(name="6c", pass_context=False)  # Valkenhayn from blazblue
    async def _6c_vk(self):  
        """Usher, Usher..."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')] 	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2a/BBCS_Valkenhayn_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @vk.command(name="3c", pass_context=False)  # Valkenhayn from blazblue
    async def _3c_vk(self):   
        #"""Always good to sweep someone off their feet"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')] 			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/12/BBCS_Valkenhayn_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @vk.command(name="ja", pass_context=False)  # Valkenhayn from blazblue
    async def _ja_vk(self): 
        #"""Jab, jab, jab..."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6d/BBCS_Valkenhayn_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
			
    @vk.command(name="jb", pass_context=False)  # Valkenhayn from blazblue
    async def _jb_vk(self):   
        #"""Roundhouse kick, ha!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/38/BBCS_Valkenhayn_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @vk.command(name="jc", pass_context=False)  # Valkenhayn from blazblue
    async def _jc_vk(self): 
        #"""Slash 'em!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')] 			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCS_Valkenhayn_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @vk.command(name="w5a", pass_context=False)  # Valkenhayn from blazblue
    async def _w5a_vk(self): 
        #"""Slash 'em!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Wolf 5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6b/BBCS_Valkenhayn_5Aw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @vk.command(name="w5b", pass_context=False)  # Valkenhayn from blazblue
    async def _w5b_vk(self): 
        #"""Slash 'em!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Wolf 5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/98/BBCS_Valkenhayn_5Bw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @vk.command(name="w5c", pass_context=False)  # Valkenhayn from blazblue
    async def _w5c_vk(self): 
        #"""Slash 'em!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Wolf 5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/67/BBCP_Valkenhayn_5Cw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @vk.command(name="wja", pass_context=False)  # Valkenhayn from blazblue
    async def _wja_vk(self): 
        #"""Slash 'em!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Wolf J.A"
            embed.add_field(name="J.A Frame Data", value=tab)
            embed.add_field(name="J.AA Frame Data", value=tab1)
            embed.add_field(name="J.AAA Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Wolf J.A Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/d2/BBCS_Valkenhayn_jAw.png')
            embed1.add_field(name="Attack Props cont.", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @vk.command(name="wjb", pass_context=False)  # Valkenhayn from blazblue
    async def _wjb_vk(self): 
        #"""Slash 'em!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Wolf J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7c/BBCS_Valkenhayn_jBw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @vk.command(name="wjc", pass_context=False)  # Valkenhayn from blazblue
    async def _wjc_vk(self): 
        #"""Slash 'em!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Wolf J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/39/BBCP_Valkenhayn_JCw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @vk.command(name="5d", pass_context=False)  # Valkenhayn from blazblue
    async def _5d_vk(self):   
        """WOLFE"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info1.find('li').get_text()		
            mp3 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  		
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp3 + "```"
            mpA = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2c/BBCS_Valkenhayn_5D.png')
            embed.add_field(name="5D Frame Data", value=tab)
            embed.add_field(name="5D Attack Props:", value=mp, inline='true')
            embed.add_field(name="Wolf Frame Data", value=tab1)
            embed.add_field(name="Wolf Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @vk.command(name="gesh", pass_context=False)  # Valkenhayn from blazblue
    async def _Gesh_vk(self):  
        """Geschwind Wolf:  Cancel Human Attack with direction +D"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')			
            mpA = "```" + "*6D: Can cancel into attacks on 14F. During OD, on 7F" + "\n" + "*4D: Can cancel into attacks on 21F. During OD, on 3F" + "\n" + "*1/2/3D: Can cancel into attacks on 12F. During OD, on 10F" + "\n" + "*8D: Can cancel into attacks on 20F. During OD, on 14F" + "\n" + "*7D: Can cancel into attacks on 15F. During OD, on 3F" + "\n" + "*9D: Can cancel into attacks on 15F. During OD, on 9F" + "```"
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Geschwind Wolf"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f1/BBCS_Valkenhayn_jD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Geschwind Wolf Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/11/BBCS_Valkenhayn_ND.png')
            embed1.add_field(name="Additional Information", value=mpA)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @vk.command(name="rasen", pass_context=False)  # Valkenhayn from blazblue
    async def _Rasen_vk(self):  
        """Rasen Wolf: ND during Werewolf"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')			
            mpA = "```" + "*6D: Can cancel into attacks on 5F." + "\n" + "*4D: Can cancel into attacks on 11F." + "\n" + "*1/2/3D: Can cancel into attacks on 3F." + "\n" + "*8D: Can cancel into attacks on 9F." + "\n" + "*7D: Can cancel into attacks on 11F." + "\n" + "*9D: Can cancel into attacks on 5F." + "```"
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Rasen Wolf"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/30/BBCS_Valkenhayn_jCw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Rasen Wolf Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/11/BBCS_Valkenhayn_ND.png')
            embed1.add_field(name="Additional Information", value=mpA)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")			
			
    @vk.command(name="ft", pass_context=False)  # Valkenhayn from blazblue
    async def _ft_vk(self):   
        """Rude..."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/df/BBCS_Valkenhayn_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @vk.command(name="bt", pass_context=False)  # Valkenhayn from blazblue
    async def _bt_vk(self):   
        """Still rude..."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "* Can be followed up with 236C midscreen, but causes a wallbounce in the corner allowing for different followups. Valkenhayn's throw has a deceptively big hitbox for what it is. Even without a followup, Valk throws the opponent to the other side of the screen, allowing good corner carry. You may find yourself not using his throw because the wolf provides you with a ton of more effective options, but it is an option if you are low on/out of wolf meter and want to get some breathing space." + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw Cont."
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/ff/BBCS_Valkenhayn_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @vk.command(name="at", pass_context=False)  # Valkenhayn from blazblue
    async def _at_vk(self):   
        """The rudest!!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7d/BBCS_Valkenhayn_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @vk.command(name="ca", pass_context=False)  # Valkenhayn from blazblue
    async def _ca_vk(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2a/BBCS_Valkenhayn_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @vk.command(name="ct", pass_context=False)  # Valkenhayn from blazblue
    async def _ct_vk(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/33/BBCP_Valkenhayn_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @vk.command(name="236a", pass_context=False)  # Valkenhayn from blazblue
    async def _s1_vk(self):   
        #"""You're gonna see this A LOT"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Nacht Jager (Night Hunter)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5e/BBCS_Valkenhayn_NachtJager.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")		

    @vk.command(name="236b", pass_context=False)  # Valkenhayn from blazblue
    async def _s2_vk(self):   
        #"""Enjoy the pain!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            my_table1 = table[59]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp4 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Schwarz Jagd (Dark Hunting)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/59/BBCS_Valkenhayn_SchwarzJagd.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Weiss Jagd (White Hunting): 236B after Schwarz Jagd"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCS_Valkenhayn_WeisJagd.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @vk.command(name="236c", pass_context=False)  # Valkenhayn from blazblue
    async def _s3_vk(self):   
        #"""That stomping special"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Nacht Rosen (Night Rose)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f9/BBCS_Valkenhayn_NachtRosen.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		
		

    @vk.command(name="j214b", pass_context=False)  # Valkenhayn from blazblue
    async def _s4_vk(self):   
        """Quite a literal overhead"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')] 
       

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Mondlicht (Moonlight)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4a/BBCS_Valkenhayn_Mondlicht.png')
            embed.add_field(name="No Charge Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @vk.command(name="konig", pass_context=False)  # Valkenhayn from blazblue
    async def _s5_vk(self):
        """236A/B/C during Werewolf"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[5]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    
            mp2 = [op1.get_text() for op1 in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
			
            embed = discord.Embed()
            embed.title = "Konig Wolf"
            embed.add_field(name="A Frame Data", value=tab)
            embed.add_field(name="A(Air) Frame Data", value=tab1)
            embed.add_field(name="B Frame Data", value=tab2)
            embed.add_field(name="B(Air) Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Konig Wolf Cont."
            embed1.add_field(name="Attack Props Cont.", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "Konig Wolf Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/5/53/BBCS_Valkenhayn_KonigWolf.png')
            embed2.add_field(name="Attack Props Cont.", value=mpC)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @vk.command(name="eisen", pass_context=False)  # Valkenhayn from blazblue
    async def _s6_vk(self):   
        """j.214A/B/C during Werewolf"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')] 
       

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Eisen Wolf"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCS_Valkenhayn_EisenWolf.png')
            embed.add_field(name="No Charge Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @vk.command(name="wthrow", pass_context=False)  # Valkenhayn from blazblue
    async def _s7_vk(self):   
        """B+C during Werewolf, air OK"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')] 
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Himmel Wolf"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/72/BBCS_Valkenhayn_HimmelWolf.png')
            embed.add_field(name="Ground Charge Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @vk.command(name="632146d", pass_context=False)  # Valkenhayn from blazblue
    async def _dd1_vk(self):
        """WOLF-yuken"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text() 
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Sturm Wolf"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Sturm Wolf Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/c4/BBCS_Valkenhayn_SturmWolf.png')
            embed1.add_field(name="Attack Props Cont.", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	
		

    @vk.command(name="j236236c", pass_context=False)  # Valkenhayn from blazblue
    async def _dd2_vk(self):   
        """SUPRISE WOLF LEG!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Konig Flug"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed()
            embed1.title = "Konig Flug Cont."
            embed1.add_field(name="Attack Props Cont.", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "Konig Flug Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/9/9a/BBCS_Valkenhayn_KonigFlug.png')
            embed2.add_field(name="Attack Props Cont.", value=mpC)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found.....")					

    @vk.command(name="abcd", pass_context=False)  # Valkenhayn from blazblue
    async def _abcd_vk(self): 
        """Exceed Accel"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Sieg Nagel"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c8/BBCF_Valkenhayn_ExceedAccel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @vk.command(name="214214c", pass_context=False)  # Valkenhayn from blazblue
    async def _astral_vk(self):   
        """Werewolf mode engage"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Blut Vollmond"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f4/BBCS_Valkenhayn_BlutVollmond.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")				
###################################################################################################################################################################################################
    @ts.command(name="5a", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _5a_ts(self):
        #"""Classic backhander"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"           
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b0/BBCS_Tsubaki_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
		
            await self.bot.say(embed=embed)
            
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @ts.command(name="5b", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _5b_ts(self):   
        #"""Dance and sting like an evil hornet"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            my_table1 = table[5]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/de/BBCS_Tsubaki_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5bb"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/da/BBCS_Tsubaki_5BB.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @ts.command(name="5c", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _5c_ts(self): 
        #"""Two are better than one"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            my_table1 = table[9]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = [po.get_text() for po in info1.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3d/BBCS_Tsubaki_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5cc"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/ae/BBCS_Tsubaki_5CC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
	
    @ts.command(name="2a", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _2a_ts(self):   
        #"""Clenched fists don't have any class"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/01/BBCS_Tsubaki_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @ts.command(name="2b", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _2b_ts(self): 
        #"""Not safe on block but fast enough for Terumi's victims"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            my_table1 = table[15]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp3 = info1.find('p').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "2b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCS_Tsubaki_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "2bb"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/de/BBCS_Tsubaki_2BB.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @ts.command(name="2c", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _2c_ts(self):   
        #"""Far reach, jump-cancelable, what you want more?"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            my_table1 = table[19]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp3 = info1.find('p').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "```"
            mpA1 = "```" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "2c"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/c0/BBCS_Tsubaki_2C.png')
            embed1.add_field(name="Attack Props cont.", value=mpA1)
			
            embed2 = discord.Embed()
            embed2.title = "2cc"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/0/03/BBCS_Tsubaki_2CC.png')
            embed2.add_field(name="Frame Data", value=tab1)
            embed2.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @ts.command(name="6a", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _6a_ts(self):  
        #"""From above?"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ec/BBCS_Tsubaki_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ts.command(name="6b", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _6b_ts(self):  
        """Gentlemen's Elbow"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            my_table1 = table[25]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp3 = [po1.get_text() for po1 in info1.find_all('p')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e3/BBCS_Tsubaki_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6bb"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/4f/BBCS_Tsubaki_6BB.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")

    @ts.command(name="6c", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _6c_ts(self):  
        """Usher, Usher..."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            my_table1 = table[29]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp3 = [po1.get_text() for po1 in info1.find_all('p')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/de/BBCS_Tsubaki_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6cc"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/bb/BBCS_Tsubaki_6CC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ts.command(name="3c", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _3c_ts(self):   
        #"""Always good to sweep someone off their feet"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            my_table1 = table[33]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp4 = [po1.get_text() for po1 in info1.find_all('p')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "```"
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bf/BBCS_Tsubaki_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "3cc"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/8e/BBCS_Tsubaki_3CC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @ts.command(name="ja", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _ja_ts(self): 
        #"""Jab, jab, jab..."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/64/BBCS_Tsubaki_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
			
    @ts.command(name="jb", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _jb_ts(self):   
        #"""Roundhouse kick, ha!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            my_table1 = table[39]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6c/BBCS_Tsubaki_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "J.BB"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/15/BBCS_Tsubaki_jBB.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ts.command(name="jc", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _jc_ts(self): 
        #"""Slash 'em!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            my_table1 = table[43]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3b/BBCS_Tsubaki_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "J.CC"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/e9/BBCS_Tsubaki_jCC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ts.command(name="5d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _5d_ts(self):   
        """READ DIS BOOK"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find_all('li')[0].get_text()
            mp2 = [po.get_text() for po in info.find_all('p')] 	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  		
            mp = "```" + "*" + mp1 + "```"
            mpC = "```" + "*" + mp2[0] + "```"
            mpD = "```" + "*" + mp2[1] + "```"
            mpB = "```" + "*Charge rate (normal): 5~6F = 500 points per frame; 7~17F = 250 points per frame; 18F~ = 200 points per frame" + "\n" + "*Charge rate (charge-cancel): 5~6F = 1250 points per frame" + "\n" + "*Charge rate (charge-cancel from 22B):5~6F = 2500 points per frame" + "```"
            mpA = "```" + "*Charge rate (normal): 7~21F = 250 points per frame; 22F~ = 200 points per frame" + "\n" + "*Charge rate (charge-cancel): 7~10F = 625 points per frame" + "\n" + "*Charge rate (charge-cancel from 22B): 7~10F = 1250 points per frame" + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="5D Deatils", value=mp)
			
            embed1 = discord.Embed()
            embed1.title = "Normal"
            embed1.add_field(name="5D Normal Attack Props", value=mpA)
			
            embed2 = discord.Embed()
            embed2.title = "OverDrive"
            embed2.add_field(name="5D OverDrive Attack Props", value=mpB)
			
            embed3 = discord.Embed()
            embed3.title = "5D Cont."
            embed3.add_field(name="Additional Info", value=mpC)
			
            embed4 = discord.Embed()
            embed4.title = "5D Cont."
            embed4.set_image(url='http://www.dustloop.com/wiki/images/6/6f/BBCS_Tsubaki_5D.png')
            embed4.add_field(name="Additional Info", value=mpD)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ts.command(name="2d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _2d_ts(self):  
        """Crouching Charge"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find_all('li')[0].get_text()
            mp2 = [po.get_text() for po in info.find_all('p')] 	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  		
            mp = "```" + "*" + mp1 + "```"
            mpC = "```" + "*" + mp2[0] + "```"
            mpD = "```" + "*" + mp2[1] + "```"
            mpA = "```" + "*Charge rate (normal): 7~21F = 250 points per frame; 22F~ = 200 points per frame" + "\n" + "*Charge rate (charge-cancel): 7~10F = 625 points per frame" + "\n" + "*Charge rate (charge-cancel from 22B): 7~10F = 1250 points per frame" + "```"
            mpB = "```" + "*Charge rate (normal): 5~6F = 500 points per frame; 7~17F = 250 points per frame; 18F~ = 200 points per frame" + "\n" + "*Charge rate (charge-cancel): 5~6F = 1250 points per frame" + "\n" + "*Charge rate (charge-cancel from 22B):5~6F = 2500 points per frame" + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="2D Deatils", value=mp)
			
            embed1 = discord.Embed()
            embed1.title = "Normal"
            embed1.add_field(name="2D Normal Attack Props", value=mpA)
			
            embed2 = discord.Embed()
            embed2.title = "OverDrive"
            embed2.add_field(name="2D OverDrive Attack Props", value=mpB)
            
            embed3 = discord.Embed()
            embed3.title = "2D Cont."
            embed3.add_field(name="Additional Info", value=mpC)
			
            embed4 = discord.Embed()
            embed4.title = "2D Cont."
            embed4.set_image(url='http://www.dustloop.com/wiki/images/1/18/BBCS_Tsubaki_2D.png')
            embed4.add_field(name="Additional Info", value=mpD)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @ts.command(name="jd", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _jd_ts(self):  
        """Really Feeling it!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find_all('li')[0].get_text()
            mp2 = [po.get_text() for po in info.find_all('p')] 	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  		
            mp = "```" + "*" + mp1 + "```"
            mpC = "```" + "*" + mp2[0] + "```"
            mpD = "```" + "*" + mp2[1] + "```"
            mpA = "```" + "*Charge rate (normal): 4~7F = 250 points per frame; 8-21F~ = 200 points per frame; 22F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~7F = 625 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 4~7F = 1250 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
            mpB = "```" + "*Charge rate (normal): 4~5F = 500 points per frame; 6~20F = 250 points per frame; 21F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~5F = 1250 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 5~6F = 2500 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="JD Deatils", value=mp)
			
            embed1 = discord.Embed()
            embed1.title = "Normal"
            embed1.add_field(name="JD Normal Attack Props", value=mpA)
			
            embed2 = discord.Embed()
            embed2.title = "OverDrive"
            embed2.add_field(name="JD OverDrive Attack Props", value=mpB)
            
            embed3 = discord.Embed()
            embed3.title = "J.D Cont."
            embed3.add_field(name="Additional Info", value=mpC)
			
            embed4 = discord.Embed()
            embed4.title = "J.D Cont."
            embed4.set_image(url='http://www.dustloop.com/wiki/images/7/7e/BBCS_Tsubaki_jD.png')
            embed4.add_field(name="Additional Info", value=mpD)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
        except:
            await self.bot.say("No Frame Data Found.....")			
			
    @ts.command(name="ft", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _ft_ts(self):   
        """Forward Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/aa/BBCS_Tsubaki_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @ts.command(name="bt", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _bt_ts(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/89/BBCS_Tsubaki_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @ts.command(name="at", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _at_ts(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3d/BBCS_Tsubaki_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ts.command(name="ca", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _ca_ts(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b6/BBCS_Tsubaki_Decus.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @ts.command(name="ct", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _ct_ts(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b6/BBCF_Tsubaki_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @ts.command(name="236a", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s1_ts(self):   
        """CHARGING STAR!(A)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[5] + "\n" + "```"
			
            embed = discord.Embed()
            embed.title = "Sanctus Aequum(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8e/BBCS_Tsubaki_Aequum.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @ts.command(name="236b", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s2_ts(self):   
        """CHARGING STAR!(B)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[5] + "\n" + "```"
			
            embed = discord.Embed()
            embed.title = "Sanctus Aequum(B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8e/BBCS_Tsubaki_Aequum.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @ts.command(name="236c", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s3_ts(self):   
        """CHARGING STAR!(C)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[3] + "\n" + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[5] + "\n" + "```"
			
            embed = discord.Embed()
            embed.title = "Sanctus Aequum(C)"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Sanctus Aequum(C) Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/8e/BBCS_Tsubaki_Aequum.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")	

    @ts.command(name="236d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s4_ts(self):   
        """CHARGING STAR!(D)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "```"
            mpB = "```" + "*" + mp2[4] + "```"
            mpC = "```" + "*" + mp2[0] + "\n" + "*" + mp2[5] + "\n" + "```"
			
            embed = discord.Embed()
            embed.title = "Sanctus Aequum(D)"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Sanctus Aequum(D) Cont."
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Sanctus Aequum(D) Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/8/8e/BBCS_Tsubaki_Aequum.png')
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found...")				

    @ts.command(name="214b", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s5_ts(self):   
        """Crotch Dagger(B)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "```"
            mpB = "```" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Sanctus Veritas(B)"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Sanctus Veritas(B) Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/2/21/BBCS_Tsubaki_Veritas.png')
            embed1.add_field(name="Additional Info:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @ts.command(name="214d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s6_ts(self):   
        """Crotch Dagger(D)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "```"
            mpB = "```" + "*" + mp2[3] + "```"
            mpC = "```" + "*" + mp2[4] + "```"
			
            embed = discord.Embed()
            embed.title = "Sanctus Veritas(D)"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Sanctus Veritas(D) Cont."
            embed1.add_field(name="Additional Info:", value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Sanctus Veritas(D) Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/2/21/BBCS_Tsubaki_Veritas.png')
            embed2.add_field(name="Additional Info:", value=mpC, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found...")

    @ts.command(name="22b", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s7_ts(self):   
        """The hammer of justice."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Agnus Dei"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/61/BBCP_Tsubaki_Hammer.png')
            embed.add_field(name="Frame Data", value=tab)			
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @ts.command(name="22d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s8_ts(self):   
        """The hammer of justice."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Agnus Dei"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/61/BBCP_Tsubaki_Hammer.png')
            embed.add_field(name="Frame Data", value=tab)			
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")				

    @ts.command(name="623c", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s9_ts(self):   
        """Reversal(C)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')] 
            mp1 = [op.get_text() for op in info.find_all('li')]       

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
            mpB = "```" + "*" + mp2[1] + "```"
            mpC = "```" + "*" + mp2[0] + "```"
            mpE = "```" + "*The reason why this is such a powerful combo route is the fact that it allows you to start up a juggle without requiring a crouching confirm or an anti-air hit. This allows Tsubaki to get in a larger number of her more damaging normals and carry to the corner more effectively. Some of her chargeless and meterless combos off of normals like 5B can break 3000 damage midscreen thanks to this route, so this special is of the utmost importance." "```"
            mpD = "```" + "*In this iteration of the game in particular, the combo route stemming from this special is emphasized since it can be consistently followed up thanks to it launching both Tsubaki and the opponent fairly low off the ground. By getting rid of the landing recovery of the DP through either immediately cancelling into a whiffed j.214A/B or late cancelling into a whiffed j.236A as Tsubaki is about to touch the ground 5A, 5B, or 5C can be used as a followup to catch the falling opponent. The most popular route is the delayed j.236A route as it is the least execution heavy, the most consistent, and allows the strongest followup, 5C to be used properly." + "```"
			
            embed = discord.Embed()
            embed.title = "Benedictus Rex(C)"
            embed.add_field(name="No Charge Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Benedictus Rex(C) Cont."
            embed1.add_field(name="Additional Info", value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Benedictus Rex(C) Cont."
            embed2.add_field(name="Additional Info Pt. 2", value=mpC, inline='true')
			
            embed3 = discord.Embed()
            embed3.title = "Benedictus Rex(C) Cont."
            embed3.add_field(name="Additional Info Pt. 3", value=mpD, inline='true')
			
            embed4 = discord.Embed()
            embed4.title = "Benedictus Rex(C) Cont."
            embed4.set_image(url='http://www.dustloop.com/wiki/images/9/99/BBCS_Tsubaki_BenedictusRex.png')
            embed4.add_field(name="Additional Info Pt. 4", value=mpE, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ts.command(name="623d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s10_ts(self):   
        """Reversal(D)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')] 
            mp1 = [op.get_text() for op in info.find_all('li')]       

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2[2] + "```"
            mpC = "```" + "*" + mp2[0] + "```"
            mpE = "```" + "*The reason why this is such a powerful combo route is the fact that it allows you to start up a juggle without requiring a crouching confirm or an anti-air hit. This allows Tsubaki to get in a larger number of her more damaging normals and carry to the corner more effectively. Some of her chargeless and meterless combos off of normals like 5B can break 3000 damage midscreen thanks to this route, so this special is of the utmost importance." "```"
            mpD = "```" + "*In this iteration of the game in particular, the combo route stemming from this special is emphasized since it can be consistently followed up thanks to it launching both Tsubaki and the opponent fairly low off the ground. By getting rid of the landing recovery of the DP through either immediately cancelling into a whiffed j.214A/B or late cancelling into a whiffed j.236A as Tsubaki is about to touch the ground 5A, 5B, or 5C can be used as a followup to catch the falling opponent. The most popular route is the delayed j.236A route as it is the least execution heavy, the most consistent, and allows the strongest followup, 5C to be used properly." + "```"
			
            embed = discord.Embed()
            embed.title = "Benedictus Rex(D)"
            embed.add_field(name="No Charge Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Benedictus Rex(D) Cont."
            embed1.add_field(name="Additional Info", value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Benedictus Rex(D) Cont."
            embed2.add_field(name="Additional Info Pt. 2", value=mpC, inline='true')
			
            embed3 = discord.Embed()
            embed3.title = "Benedictus Rex(D) Cont."
            embed3.add_field(name="Additional Info Pt. 3", value=mpD, inline='true')
			
            embed4 = discord.Embed()
            embed4.title = "Benedictus Rex(D) Cont."
            embed4.set_image(url='http://www.dustloop.com/wiki/images/9/99/BBCS_Tsubaki_BenedictusRex.png')
            embed4.add_field(name="Additional Info Pt. 4", value=mpE, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ts.command(name="j236a", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s11_ts(self):
        """Angel Paratrooper"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    
            mp2 = [op1.get_text() for op1 in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()					

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp2[1] + "```"	
            mpD = "```" + "*" + mp2[2] + "```"				
			
            embed = discord.Embed()
            embed.title = "Aequum Elesion(A)"
            embed.add_field(name="A Frame Data", value=tab)
            embed.add_field(name="Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Aequum Elesion(A) Cont."
            embed1.add_field(name="Additional Info", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "Aequum Elesion(A) Cont."
            embed2.add_field(name="Additional Info", value=mpC)
            
            embed3 = discord.Embed()
            embed3.title = "Aequum Elesion(A) Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/a/a0/BBCF_Tsubaki_AequumElesion.png')
            embed3.add_field(name="Additional Info", value=mpD)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @ts.command(name="j236d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s12_ts(self):
        """Angel Paratrooper"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            my_table1 = table[73]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[4]
            headers2 = table_body1.find_all('tr')[1]
            info =  table_body.find_all('tr')[5]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    
            mp2 = [op1.get_text() for op1 in info.find_all('p')]
            mp3 = [op2.get_text() for op2 in info1.find_all('li')] 
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp2[3] + "\n" + "*" + mp2[4] + "```"
            mpD = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"			
			
            embed = discord.Embed()
            embed.title = "Aequum Elesion(D)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/69/BBCS_Tsubaki_AequumElesionD.png')
            embed.add_field(name="D Frame Data", value=tab)
            embed.add_field(name="Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Aequum Elesion(D) Cont."
            embed1.add_field(name="Additional Info", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "Aequum Elesion(D) Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/6/69/BBCS_Tsubaki_AequumElesionD.png')
            embed2.add_field(name="Additional Info", value=mpC)
			
            embed3 = discord.Embed()
            embed3.title = "Aequum Elesion (Aura): j.236D > j.214D"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/7/7e/BBCP_Tsubaki_AequumElesionD2.png')
            embed3.add_field(name="Frame Data", value=tab2)
            embed3.add_field(name="Attack Props:", value=mpD)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @ts.command(name="j214a", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s13_ts(self):
        """236A/B/C during Werewolf"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[9]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    
            mp2 = [op1.get_text() for op1 in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp2[1] + "```"
            mpD = "```" + "*" + mp2[2] + "```"			
			
            embed = discord.Embed()
            embed.title = "Lux Aeterna(A)"
            embed.add_field(name="A Frame Data", value=tab)
            embed.add_field(name="Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Lux Aeterna(A) Cont."
            embed1.add_field(name="Additional Info", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "Lux Aeterna(A) Cont."
            embed2.add_field(name="Additional Info", value=mpC)
			
            embed3 = discord.Embed()
            embed3.title = "Lux Aeterna(A) Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/e/e7/BBCS_Tsubaki_LuxAeterna.png')
            embed3.add_field(name="Additional Info", value=mpD)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @ts.command(name="j214b", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s14_ts(self):
        """236A/B/C during Werewolf"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[9]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    
            mp2 = [op1.get_text() for op1 in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp2[1] + "```"
            mpD = "```" + "*" + mp2[2] + "```"
						
            embed = discord.Embed()
            embed.title = "Lux Aeterna(B)"
            embed.add_field(name="B Frame Data", value=tab)
            embed.add_field(name="Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Lux Aeterna(B) Cont."
            embed1.add_field(name="Additional Info", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "Lux Aeterna(B) Cont."
            embed2.add_field(name="Additional Info", value=mpC)
			
            embed3 = discord.Embed()
            embed3.title = "Lux Aeterna(B) Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/e/e7/BBCS_Tsubaki_LuxAeterna.png')
            embed3.add_field(name="Additional Info", value=mpD)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ts.command(name="j214c", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s15_ts(self):
        """236A/B/C during Werewolf"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[5]
            headers1 = table_body.find_all('tr')[6]
            info =  table_body.find_all('tr')[9]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    
            mp2 = [op1.get_text() for op1 in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp2[1] + "```"
            mpD = "```" + "*" + mp2[2] + "```"			
			
            embed = discord.Embed()
            embed.title = "Lux Aeterna(C)"
            embed.add_field(name="C Frame Data", value=tab)
            embed.add_field(name="Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Lux Aeterna(C) Cont."
            embed1.add_field(name="Additional Info", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "Lux Aeterna(C) Cont."
            embed2.add_field(name="Additional Info", value=mpC)
			
            embed3 = discord.Embed()
            embed3.title = "Lux Aeterna(C) Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/e/e7/BBCS_Tsubaki_LuxAeterna.png')
            embed3.add_field(name="Additional Info", value=mpD)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ts.command(name="j214d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s16_ts(self):
        """236A/B/C during Werewolf"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[7]
            headers1 = table_body.find_all('tr')[8]
            info =  table_body.find_all('tr')[9]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    
            mp2 = [op1.get_text() for op1 in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp2[3] + "```"
            mpD = "```" + "*" + mp2[4] + "```"			
			
            embed = discord.Embed()
            embed.title = "Lux Aeterna(D)"
            embed.add_field(name="D Frame Data", value=tab)
            embed.add_field(name="Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Lux Aeterna(D) Cont."
            embed1.add_field(name="Additional Info", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "Lux Aeterna(D) Cont."
            embed2.add_field(name="Additional Info", value=mpC)
			
            embed3 = discord.Embed()
            embed3.title = "Lux Aeterna(D) Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/e/e7/BBCS_Tsubaki_LuxAeterna.png')
            embed3.add_field(name="Additional Info", value=mpD)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ts.command(name="421a", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s17_ts(self):
        """There should be a ball of sparkles between the two moves"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = [op1.get_text() for op1 in info.find_all('p')]
            vrs = headers.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
            mpB = "```" + "*" + mp1[1] + "```"			
			
            embed = discord.Embed()
            embed.title = "Lux Macto(A)"
            embed.add_field(name="A Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Lux Macto(A) Cont."
            embed1.add_field(name="Additional Info", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "Lux Macto(A) Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/6/67/BBCP_Tsubaki_Shingi.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ts.command(name="421d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s18_ts(self):
        """There should be a ball of sparkles between the two moves and she goes through the ball"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            my_table1 = table[77]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = [op1.get_text() for op1 in info.find_all('p')]
            mp2 = [op2.get_text() for op2 in info1.find_all('li')]
            mp3 = info1.find('p').get_text()
            mp4 = info.find('li').get_text()
            vrs = headers.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp4 + "\n" + "*" + mp1[0] + "```"
            mpB = "```" + "*The D version sends out a larger white orb that starts out accelerating very slowly before rocketing off the screen similar to Carl's Volante. The projectile's size compared to the A version's along with its variable acceleration attribute make it even better at doing nearly everything the A version's can do. The projectile being slow at the beginning protects the space directly in front of you when it is called out and can be used as a shield. The fact that the projectile stays in the same place for a while after startup makes it better than the A version's for oki as well." + "```"	
            mpC = "```" + "*Avoiding the projectile in neutral is much more difficult and risky due to its size and late lightning-speed acceleration for characters that don't have very good movement options. All of this utility actually makes the D version a very acceptable use of charge outside of combos and pressure. The only thing that this projectile doesn't have over the A version's is its ability to be used alone in pressure is lacking and a waste of charge. If 236D is used directly after this special, it will active the aura and change the properties of the move just like the air aura and allow for a stronger followup than off of 236D by itself." + "```"
            mpD = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "\n" + "*" + mp2[4] + "```"	
            mpE = "```" + "*" + mp3 + "```"			
			
            embed = discord.Embed()
            embed.title = "Lux Macto(D)"
            embed.add_field(name="A Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Lux Macto(D) Cont."
            embed1.add_field(name="Additional Info", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "Lux Macto(D) Cont."
            embed2.add_field(name="Additional Info", value=mpC)
			
            embed3 = discord.Embed()
            embed3.title = "Lux Macto(D) Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/6/67/BBCP_Tsubaki_Shingi.png')
			
            embed4 = discord.Embed()
            embed4.title = "Lux Macto (Aura): 421D > 236D (Aura)"
            embed4.add_field(name="Frame Data", value=tab1)
            embed4.add_field(name="Attack Props:", value=mpD, inline='true')
			
            embed5 = discord.Embed()
            embed5.title = "Lux Macto Cont."
            embed5.set_image(url='http://www.dustloop.com/wiki/images/7/7f/BBCP_Tsubaki_ShingiAura.png')
            embed5.add_field(name="Additional Info", value=mpE)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
            await self.bot.say(embed=embed5)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ts.command(name="63214c", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s19_ts(self):
        """Command Grab"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = [op1.get_text() for op1 in info.find_all('p')]		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
            mpB = "```" + "*" + mp1[1] + "```"			
			
            embed = discord.Embed()
            embed.title = "Sanctus Aerolata"
            embed.add_field(name="Frame Data", value=tab)
			
            embed1 = discord.Embed()
            embed1.title = "Sanctus Aerolata Cont."
            embed1.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Sanctus Aerolata Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/f/f6/BBCF_Tsubaki_Shinsa.png')
            embed2.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ts.command(name="236236c", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _dd1_ts(self):
        #"""WOLF-yuken"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op1.get_text() for op1 in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Confutatis Maledictis"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d0/BBCS_Tsubaki_ConfutatisMaledictis.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @ts.command(name="236236d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _dd2_ts(self):
        #"""WOLF-yuken"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[4]
            headers1 = table_body.find_all('tr')[6]
            headers2 = table_body.find_all('tr')[8]
            headers3 = table_body.find_all('tr')[10]
            headers4 = table_body.find_all('tr')[12]
            headers5 = table_body.find_all('tr')[14]
            info =  table_body.find_all('tr')[15]
            headers6 = table_body.find_all('tr')[17]
            headers7 = table_body.find_all('tr')[19]
            headers8 = table_body.find_all('tr')[21]
            headers9 = table_body.find_all('tr')[23]
            headers10 = table_body.find_all('tr')[25]
            headers11 = table_body.find_all('tr')[27]
            info1 =  table_body.find_all('tr')[28] #You are working on the OD Charges this time :D
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]
            Data7 = [head7.get_text() for head7 in headers7.find_all('td')]
            Data8 = [head8.get_text() for head8 in headers8.find_all('td')]
            Data9 = [head9.get_text() for head9 in headers9.find_all('td')]
            Data10 = [head10.get_text() for head10 in headers10.find_all('td')]
            Data11 = [head11.get_text() for head11 in headers11.find_all('td')]			
            mp1 = [op1.get_text() for op1 in info.find_all('li')]
            mp2 = [op2.get_text() for op2 in info1.find_all('li')]
            mp3 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()
            vrs6 = headers6.find('th').get_text()
            vrs7 = headers7.find('th').get_text()
            vrs8 = headers8.find('th').get_text()
            vrs9 = headers9.find('th').get_text()
            vrs10 = headers10.find('th').get_text()
            vrs11 = headers11.find('th').get_text()


            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            tab6 = tabulate([["Version", vrs6], ["Damage", Data6[0]], ["Cancel", Data6[1]], ["Guard", Data6[2]], ["Startup", Data6[3]], ["Active", Data6[4]], ["Recovery", Data6[5]], ["Frame Adv.", Data6[6]], ["Attribute", Data6[7]]], tablefmt='simple', stralign='left')
            tab7 = tabulate([["Version", vrs7], ["Damage", Data7[0]], ["Cancel", Data7[1]], ["Guard", Data7[2]], ["Startup", Data7[3]], ["Active", Data7[4]], ["Recovery", Data7[5]], ["Frame Adv.", Data7[6]], ["Attribute", Data7[7]]], tablefmt='simple', stralign='left')
            tab8 = tabulate([["Version", vrs8], ["Damage", Data8[0]], ["Cancel", Data8[1]], ["Guard", Data8[2]], ["Startup", Data8[3]], ["Active", Data8[4]], ["Recovery", Data8[5]], ["Frame Adv.", Data8[6]], ["Attribute", Data8[7]]], tablefmt='simple', stralign='left')
            tab9 = tabulate([["Version", vrs9], ["Damage", Data9[0]], ["Cancel", Data9[1]], ["Guard", Data9[2]], ["Startup", Data9[3]], ["Active", Data9[4]], ["Recovery", Data9[5]], ["Frame Adv.", Data9[6]], ["Attribute", Data9[7]]], tablefmt='simple', stralign='left')
            tab10 = tabulate([["Version", vrs10], ["Damage", Data10[0]], ["Cancel", Data10[1]], ["Guard", Data10[2]], ["Startup", Data10[3]], ["Active", Data10[4]], ["Recovery", Data10[5]], ["Frame Adv.", Data10[6]], ["Attribute", Data10[7]]], tablefmt='simple', stralign='left')
            tab11 = tabulate([["Version", vrs11], ["Damage", Data11[0]], ["Cancel", Data11[1]], ["Guard", Data11[2]], ["Startup", Data11[3]], ["Active", Data11[4]], ["Recovery", Data11[5]], ["Frame Adv.", Data11[6]], ["Attribute", Data11[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "\n" + "*" + mp2[4] + "```"
            mpC = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Confutatis Maledictis"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="1 Charge Frame Data", value=tab1)
            embed.add_field(name="2 Charge Frame Data", value=tab2)
            embed.add_field(name="3 Charge Frame Data", value=tab3)
            embed.add_field(name="4 Charge Frame Data", value=tab4)
            embed.add_field(name="5 Charge Frame Data", value=tab5)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Confutatis Maledictis(OD)"
            embed1.add_field(name="Frame Data", value=tab6)
            embed1.add_field(name="1 Charge Frame Data", value=tab7)
            embed1.add_field(name="2 Charge Frame Data", value=tab8)
            embed1.add_field(name="3 Charge Frame Data", value=tab9)
            embed1.add_field(name="4 Charge Frame Data", value=tab10)
            embed1.add_field(name="5 Charge Frame Data", value=tab11)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Confutatis Maledictis/Confutatis Maledictis(OD) Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/d0/BBCS_Tsubaki_ConfutatisMaledictis.png')
            embed2.add_field(name="Additional Information", value=mpC)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found.....")	
		

    @ts.command(name="214214d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _dd3_ts(self):   
        """(Air OK)Hallelujah"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[4]
            headers1 = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "```"
			
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Macto Maledictis"
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed()
            embed1.title = "Macto Maledictis Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/47/BBCS_Tsubaki_MactoMaledictis.png')
            embed1.add_field(name="Attack Props Cont.", value=mpB)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @ts.command(name="632146b", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _dd4_ts(self):   
        """BANANA KITAA"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[85]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            mp3 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Requiem Maledictus"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCP_Tsubaki_Shinpatsu.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB)
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")			

    @ts.command(name="abcd", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _abcd_ts(self): 
        """Exceed Accel: Ryuu ga waga teki wo kurau!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[87]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Macto Lux Kyrie"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2e/BBCF_Tsubaki_ExceedAccel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @ts.command(name="632146c", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _astral_ts(self):   
        """Nibelung Valesti! Oh wait wrong game..."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[89]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = [op.get_text() for op in info.find_all('p')]
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Requiem Aeternam"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c1/BBCS_Tsubaki_RequiemAeternam.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
###################################################################################################################################################################################################
#This is the Template for Taokaka as the wiki page has not been updated for sometime.
    @tk.command(name="5a", pass_context=False)  # Taokaka from blazblue
    async def _5a_tk(self):
        """Kitty paw."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1 + "```"           
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f1/BBCS_Taokaka_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
		
            await self.bot.say(embed=embed)
            
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @tk.command(name="5b", pass_context=False)  # Taokaka from blazblue
    async def _5b_tk(self):   
        """Protect your family jewels."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = info.find('p').get_text()
            #mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            #mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/eb/BBCS_Taokaka_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)		
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @tk.command(name="5c", pass_context=False)  # Taokaka from blazblue
    async def _5c_tk(self): 
        """Not a poke!."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = info.find('p').get_text()
            #mp3 = [po.get_text() for po in info1.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            #mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/32/BBCS_Taokaka_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
	
    @tk.command(name="2a", pass_context=False)  # Taokaka from blazblue
    async def _2a_tk(self):   
        """OMG Why is Tao's 2A so broken."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            #info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [po.get_text() for po in info1.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d1/BBCS_Taokaka_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @tk.command(name="2b", pass_context=False)  # Taokaka from blazblue
    async def _2b_tk(self): 
        """Important space controlling tool that is heavily underestimated."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp3 = info1.find('p').get_text()
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            #mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "2b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/35/BBCS_Taokaka_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @tk.command(name="2c", pass_context=False)  # Taokaka from blazblue
    async def _2c_tk(self):   
        """Outside of combos this makes for a decent go to normal for a frame trap"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp3 = info1.find('p').get_text()
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            #mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e0/BBCS_Taokaka_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @tk.command(name="6a", pass_context=False)  # Taokaka from blazblue
    async def _6a_tk(self):  
        """Anti air. Second hit is jump cancable, making this a good ground to air combo starter."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/db/BBCS_Taokaka_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @tk.command(name="6b", pass_context=False)  # Taokaka from blazblue
    async def _6b_tk(self):  
        """Slow overhead, safe on block"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp3 = [po1.get_text() for po1 in info1.find_all('p')]
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            #mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1b/BBCS_Taokaka_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @tk.command(name="6c", pass_context=False)  # Taokaka from blazblue
    async def _6c_tk(self):  
        """Tao's best standing poke now due to the increase in speed."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            #mp1 = info.find('li').get_text()
            #mp3 = [po1.get_text() for po1 in info1.find_all('p')]
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            #mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/76/BBCS_Taokaka_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @tk.command(name="3c", pass_context=False)  # Taokaka from blazblue
    async def _3c_tk(self):   
        """Pointless outside combos."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            #mp4 = [po1.get_text() for po1 in info1.find_all('p')]
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            #mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "```"
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3e/BBCS_Taokaka_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @tk.command(name="ja", pass_context=False)  # Taokaka from blazblue
    async def _ja_tk(self): 
        """Standard j.a nothing special."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/84/BBCS_Taokaka_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
			
    @tk.command(name="jb", pass_context=False)  # Taokaka from blazblue
    async def _jb_tk(self):   
        """Standing hit confirm into stuff."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = [po.get_text() for po in info.find_all('p')]
            #mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            #mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/58/BBCF_Taokaka_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @tk.command(name="j2b", pass_context=False)  # Taokaka from blazblue
    async def _j2b_tk(self):   
        """Has good active frames so makes for a good answer to character's that rely on anti air 2A."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = [po.get_text() for po in info.find_all('p')]
            #mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            #mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1d/BBCS_Taokaka_j2B.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @tk.command(name="jc", pass_context=False)  # Taokaka from blazblue
    async def _jc_tk(self): 
        """Her most rewarding air poke if hit confirmed properly."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = info.find('p').get_text()
            #mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            #mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/79/BBCF_Taokaka_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @tk.command(name="3", pass_context=False)  # Taokaka from blazblue
    async def _3_tk(self): 
        """Crawl: Low profile's everything (almost)."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = info.find('p').get_text()
            #mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            #mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Crawl"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/24/BBCS_Taokaka_Crawl.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @tk.command(name="taunt", pass_context=False)  # Taokaka from blazblue
    async def _taunt_tk(self): 
        """Taunt RC mix up is OP."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = info.find('p').get_text()
            #mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            #mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Taunt"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCS_Taokaka_Taunt.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @tk.command(name="5d", pass_context=False)  # Taokaka from blazblue
    async def _5d_tk(self):   
        """Torpedo."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            my_table1 = table[47]
            my_table2 = table[49]
            my_table3 = table[51]
            my_table4 = table[53]
            my_table5 = table[55]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            table_body3 = my_table3.find("table")
            table_body4 = my_table4.find("table")
            table_body5 = my_table5.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
            headers2 = table_body2.find_all('tr')[1]
            info2 = table_body2.find_all('tr')[2]
            headers3 = table_body3.find_all('tr')[1]
            info3 = table_body3.find_all('tr')[2]
            headers4 = table_body4.find_all('tr')[1]
            info4 = table_body4.find_all('tr')[2]
            headers5 = table_body5.find_all('tr')[1]
            info5 = table_body5.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            #mp1 = info.find_all('li')[0].get_text() #Note will need to line these up if any information goes into any of these tables.
            #mp2 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  
            tab2 = tabulate([["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left') 
            tab3 = tabulate([["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')  
            tab4 = tabulate([["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')  
            tab5 = tabulate([["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')  				
   	        #mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
   	        #mpA = "```" + "*Charge rate (normal): 4~7F = 250 points per frame; 8-21F~ = 200 points per frame; 22F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~7F = 625 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 4~7F = 1250 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
   	        #mpB = "```" + "*Charge rate (normal): 4~5F = 500 points per frame; 6~20F = 250 points per frame; 21F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~5F = 1250 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 5~6F = 2500 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2c/BBCS_Taokaka_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Deatils", value=mp)
			
            embed1 = discord.Embed(description='Combo stuff.')
            embed1.title = "Forward Cancel"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCS_Taokaka_6Cancel.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Deatils", value=mp)
            
            embed2 = discord.Embed(description='Combo stuff Backwards')
            embed2.title = "Backward Cancel"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/dc/BBCS_Taokaka_4Cancel.png')
            embed2.add_field(name="Frame Data", value=tab2)
            #embed2.add_field(name="Deatils", value=mp)
			
            embed3 = discord.Embed(description='Frame traps on hit and safe on block.')
            embed3.title = "A Cancel"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCS_Taokaka_ACancel.png')
            embed3.add_field(name="Frame Data", value=tab3)
            #embed3.add_field(name="Deatils", value=mp)
			
            embed4 = discord.Embed(description='J.D BFF.')
            embed4.title = "B Cancel"
            embed4.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCS_Taokaka_BCancel.png')
            embed4.add_field(name="Frame Data", value=tab4)
            #embed4.add_field(name="Deatils", value=mp)
			
            embed5 = discord.Embed(description='+3 leaves you air borne.')
            embed5.title = "C Cancel"
            embed5.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Taokaka_CCancel.png')
            embed5.add_field(name="Frame Data", value=tab5)
            #embed5.add_field(name="Deatils", value=mp)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
            await self.bot.say(embed=embed5)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @tk.command(name="2d", pass_context=False)  # Taokaka from blazblue
    async def _2d_tk(self):  
        """Works as an anti air sometimes."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            my_table1 = table[47]
            my_table2 = table[49]
            my_table3 = table[51]
            my_table4 = table[53]
            my_table5 = table[55]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            table_body3 = my_table3.find("table")
            table_body4 = my_table4.find("table")
            table_body5 = my_table5.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
            headers2 = table_body2.find_all('tr')[1]
            info2 = table_body2.find_all('tr')[2]
            headers3 = table_body3.find_all('tr')[1]
            info3 = table_body3.find_all('tr')[2]
            headers4 = table_body4.find_all('tr')[1]
            info4 = table_body4.find_all('tr')[2]
            headers5 = table_body5.find_all('tr')[1]
            info5 = table_body5.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            #mp1 = info.find_all('li')[0].get_text() #Note will need to line these up if any information goes into any of these tables.
            #mp2 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  
            tab2 = tabulate([["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left') 
            tab3 = tabulate([["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')  
            tab4 = tabulate([["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')  
            tab5 = tabulate([["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')  				
   	        #mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
   	        #mpA = "```" + "*Charge rate (normal): 4~7F = 250 points per frame; 8-21F~ = 200 points per frame; 22F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~7F = 625 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 4~7F = 1250 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
   	        #mpB = "```" + "*Charge rate (normal): 4~5F = 500 points per frame; 6~20F = 250 points per frame; 21F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~5F = 1250 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 5~6F = 2500 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6a/BBCS_Taokaka_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Deatils", value=mp)
			
            embed1 = discord.Embed(description='Combo stuff.')
            embed1.title = "Forward Cancel"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCS_Taokaka_6Cancel.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Deatils", value=mp)
            
            embed2 = discord.Embed(description='Combo stuff Backwards')
            embed2.title = "Backward Cancel"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/dc/BBCS_Taokaka_4Cancel.png')
            embed2.add_field(name="Frame Data", value=tab2)
            #embed2.add_field(name="Deatils", value=mp)
			
            embed3 = discord.Embed(description='Frame traps on hit and safe on block.')
            embed3.title = "A Cancel"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCS_Taokaka_ACancel.png')
            embed3.add_field(name="Frame Data", value=tab3)
            #embed3.add_field(name="Deatils", value=mp)
			
            embed4 = discord.Embed(description='J.D BFF.')
            embed4.title = "B Cancel"
            embed4.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCS_Taokaka_BCancel.png')
            embed4.add_field(name="Frame Data", value=tab4)
            #embed4.add_field(name="Deatils", value=mp)
			
            embed5 = discord.Embed(description='+3 leaves you air borne.')
            embed5.title = "C Cancel"
            embed5.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Taokaka_CCancel.png')
            embed5.add_field(name="Frame Data", value=tab5)
            #embed5.add_field(name="Deatils", value=mp)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
            await self.bot.say(embed=embed5)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @tk.command(name="4d", pass_context=False)  # Taokaka from blazblue
    async def _4d_tk(self):  
        """In combos now."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            my_table1 = table[47]
            my_table2 = table[49]
            my_table3 = table[51]
            my_table4 = table[53]
            my_table5 = table[55]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            table_body3 = my_table3.find("table")
            table_body4 = my_table4.find("table")
            table_body5 = my_table5.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
            headers2 = table_body2.find_all('tr')[1]
            info2 = table_body2.find_all('tr')[2]
            headers3 = table_body3.find_all('tr')[1]
            info3 = table_body3.find_all('tr')[2]
            headers4 = table_body4.find_all('tr')[1]
            info4 = table_body4.find_all('tr')[2]
            headers5 = table_body5.find_all('tr')[1]
            info5 = table_body5.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            #mp1 = info.find_all('li')[0].get_text() #Note will need to line these up if any information goes into any of these tables.
            #mp2 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  
            tab2 = tabulate([["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left') 
            tab3 = tabulate([["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')  
            tab4 = tabulate([["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')  
            tab5 = tabulate([["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')  				
   	        #mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
   	        #mpA = "```" + "*Charge rate (normal): 4~7F = 250 points per frame; 8-21F~ = 200 points per frame; 22F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~7F = 625 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 4~7F = 1250 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
   	        #mpB = "```" + "*Charge rate (normal): 4~5F = 500 points per frame; 6~20F = 250 points per frame; 21F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~5F = 1250 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 5~6F = 2500 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
			
            embed = discord.Embed()
            embed.title = "4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e3/BBCF_Taokaka_4D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Deatils", value=mp)
			
            embed1 = discord.Embed(description='Combo stuff.')
            embed1.title = "Forward Cancel"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCS_Taokaka_6Cancel.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Deatils", value=mp)
            
            embed2 = discord.Embed(description='Combo stuff Backwards')
            embed2.title = "Backward Cancel"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/dc/BBCS_Taokaka_4Cancel.png')
            embed2.add_field(name="Frame Data", value=tab2)
            #embed2.add_field(name="Deatils", value=mp)
			
            embed3 = discord.Embed(description='Frame traps on hit and safe on block.')
            embed3.title = "A Cancel"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCS_Taokaka_ACancel.png')
            embed3.add_field(name="Frame Data", value=tab3)
            #embed3.add_field(name="Deatils", value=mp)
			
            embed4 = discord.Embed(description='J.D BFF.')
            embed4.title = "B Cancel"
            embed4.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCS_Taokaka_BCancel.png')
            embed4.add_field(name="Frame Data", value=tab4)
            #embed4.add_field(name="Deatils", value=mp)
			
            embed5 = discord.Embed(description='+3 leaves you air borne.')
            embed5.title = "C Cancel"
            embed5.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Taokaka_CCancel.png')
            embed5.add_field(name="Frame Data", value=tab5)
            #embed5.add_field(name="Deatils", value=mp)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
            await self.bot.say(embed=embed5)
        except:
            await self.bot.say("No Frame Data Found.....")		
			
			
    @tk.command(name="jd", pass_context=False)  # Taokaka from blazblue
    async def _jd_tk(self):  
        """Amazing air poke only 2nd to j.C ."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            my_table1 = table[47]
            my_table2 = table[49]
            my_table3 = table[51]
            my_table4 = table[53]
            my_table5 = table[55]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            table_body3 = my_table3.find("table")
            table_body4 = my_table4.find("table")
            table_body5 = my_table5.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
            headers2 = table_body2.find_all('tr')[1]
            info2 = table_body2.find_all('tr')[2]
            headers3 = table_body3.find_all('tr')[1]
            info3 = table_body3.find_all('tr')[2]
            headers4 = table_body4.find_all('tr')[1]
            info4 = table_body4.find_all('tr')[2]
            headers5 = table_body5.find_all('tr')[1]
            info5 = table_body5.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            #mp1 = info.find_all('li')[0].get_text() #Note will need to line these up if any information goes into any of these tables.
            #mp2 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  
            tab2 = tabulate([["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left') 
            tab3 = tabulate([["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')  
            tab4 = tabulate([["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')  
            tab5 = tabulate([["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')  				
   	        #mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
   	        #mpA = "```" + "*Charge rate (normal): 4~7F = 250 points per frame; 8-21F~ = 200 points per frame; 22F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~7F = 625 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 4~7F = 1250 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
   	        #mpB = "```" + "*Charge rate (normal): 4~5F = 500 points per frame; 6~20F = 250 points per frame; 21F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~5F = 1250 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 5~6F = 2500 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/aa/BBCS_Taokaka_jD.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Deatils", value=mp)
			
            embed1 = discord.Embed(description='Combo stuff.')
            embed1.title = "Forward Cancel"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCS_Taokaka_6Cancel.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Deatils", value=mp)
            
            embed2 = discord.Embed(description='Combo stuff Backwards')
            embed2.title = "Backward Cancel"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/dc/BBCS_Taokaka_4Cancel.png')
            embed2.add_field(name="Frame Data", value=tab2)
            #embed2.add_field(name="Deatils", value=mp)
			
            embed3 = discord.Embed(description='Frame traps on hit and safe on block.')
            embed3.title = "A Cancel"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCS_Taokaka_ACancel.png')
            embed3.add_field(name="Frame Data", value=tab3)
            #embed3.add_field(name="Deatils", value=mp)
			
            embed4 = discord.Embed(description='J.D BFF.')
            embed4.title = "B Cancel"
            embed4.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCS_Taokaka_BCancel.png')
            embed4.add_field(name="Frame Data", value=tab4)
            #embed4.add_field(name="Deatils", value=mp)
			
            embed5 = discord.Embed(description='+3 leaves you air borne.')
            embed5.title = "C Cancel"
            embed5.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Taokaka_CCancel.png')
            embed5.add_field(name="Frame Data", value=tab5)
            #embed5.add_field(name="Deatils", value=mp)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
            await self.bot.say(embed=embed5)
        except:
            await self.bot.say("No Frame Data Found.....")			

    @tk.command(name="j2d", pass_context=False)  # Taokaka from blazblue
    async def _j2d_tk(self):  
        """gimmicks."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            my_table1 = table[47]
            my_table2 = table[49]
            my_table3 = table[51]
            my_table4 = table[53]
            my_table5 = table[55]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            table_body3 = my_table3.find("table")
            table_body4 = my_table4.find("table")
            table_body5 = my_table5.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
            headers2 = table_body2.find_all('tr')[1]
            info2 = table_body2.find_all('tr')[2]
            headers3 = table_body3.find_all('tr')[1]
            info3 = table_body3.find_all('tr')[2]
            headers4 = table_body4.find_all('tr')[1]
            info4 = table_body4.find_all('tr')[2]
            headers5 = table_body5.find_all('tr')[1]
            info5 = table_body5.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            #mp1 = info.find_all('li')[0].get_text() #Note will need to line these up if any information goes into any of these tables.
            #mp2 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  
            tab2 = tabulate([["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left') 
            tab3 = tabulate([["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')  
            tab4 = tabulate([["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')  
            tab5 = tabulate([["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')  				
   	        #mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
   	        #mpA = "```" + "*Charge rate (normal): 4~7F = 250 points per frame; 8-21F~ = 200 points per frame; 22F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~7F = 625 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 4~7F = 1250 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
   	        #mpB = "```" + "*Charge rate (normal): 4~5F = 500 points per frame; 6~20F = 250 points per frame; 21F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~5F = 1250 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 5~6F = 2500 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
			
            embed = discord.Embed()
            embed.title = "J.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/78/BBCS_Taokaka_j2D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Deatils", value=mp)
			
            embed1 = discord.Embed(description='Combo stuff.')
            embed1.title = "Forward Cancel"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCS_Taokaka_6Cancel.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Deatils", value=mp)
            
            embed2 = discord.Embed(description='Combo stuff Backwards')
            embed2.title = "Backward Cancel"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/dc/BBCS_Taokaka_4Cancel.png')
            embed2.add_field(name="Frame Data", value=tab2)
            #embed2.add_field(name="Deatils", value=mp)
			
            embed3 = discord.Embed(description='Frame traps on hit and safe on block.')
            embed3.title = "A Cancel"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCS_Taokaka_ACancel.png')
            embed3.add_field(name="Frame Data", value=tab3)
            #embed3.add_field(name="Deatils", value=mp)
			
            embed4 = discord.Embed(description='J.D BFF.')
            embed4.title = "B Cancel"
            embed4.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCS_Taokaka_BCancel.png')
            embed4.add_field(name="Frame Data", value=tab4)
            #embed4.add_field(name="Deatils", value=mp)
			
            embed5 = discord.Embed(description='+3 leaves you air borne.')
            embed5.title = "C Cancel"
            embed5.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Taokaka_CCancel.png')
            embed5.add_field(name="Frame Data", value=tab5)
            #embed5.add_field(name="Deatils", value=mp)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
            await self.bot.say(embed=embed5)
        except:
            await self.bot.say("No Frame Data Found.....")			

    @tk.command(name="j4d", pass_context=False)  # Taokaka from blazblue
    async def _j4d_tk(self):  
        """Alters landing."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            my_table1 = table[47]
            my_table2 = table[49]
            my_table3 = table[51]
            my_table4 = table[53]
            my_table5 = table[55]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            table_body3 = my_table3.find("table")
            table_body4 = my_table4.find("table")
            table_body5 = my_table5.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
            headers2 = table_body2.find_all('tr')[1]
            info2 = table_body2.find_all('tr')[2]
            headers3 = table_body3.find_all('tr')[1]
            info3 = table_body3.find_all('tr')[2]
            headers4 = table_body4.find_all('tr')[1]
            info4 = table_body4.find_all('tr')[2]
            headers5 = table_body5.find_all('tr')[1]
            info5 = table_body5.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            #mp1 = info.find_all('li')[0].get_text() #Note will need to line these up if any information goes into any of these tables.
            #mp2 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  
            tab2 = tabulate([["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left') 
            tab3 = tabulate([["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')  
            tab4 = tabulate([["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')  
            tab5 = tabulate([["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')  				
   	        #mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
   	        #mpA = "```" + "*Charge rate (normal): 4~7F = 250 points per frame; 8-21F~ = 200 points per frame; 22F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~7F = 625 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 4~7F = 1250 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
   	        #mpB = "```" + "*Charge rate (normal): 4~5F = 500 points per frame; 6~20F = 250 points per frame; 21F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~5F = 1250 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 5~6F = 2500 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
			
            embed = discord.Embed()
            embed.title = "J.4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e6/BBCS_Taokaka_j4D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Deatils", value=mp)
			
            embed1 = discord.Embed(description='Combo stuff.')
            embed1.title = "Forward Cancel"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCS_Taokaka_6Cancel.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Deatils", value=mp)
            
            embed2 = discord.Embed(description='Combo stuff Backwards')
            embed2.title = "Backward Cancel"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/dc/BBCS_Taokaka_4Cancel.png')
            embed2.add_field(name="Frame Data", value=tab2)
            #embed2.add_field(name="Deatils", value=mp)
			
            embed3 = discord.Embed(description='Frame traps on hit and safe on block.')
            embed3.title = "A Cancel"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCS_Taokaka_ACancel.png')
            embed3.add_field(name="Frame Data", value=tab3)
            #embed3.add_field(name="Deatils", value=mp)
			
            embed4 = discord.Embed(description='J.D BFF.')
            embed4.title = "B Cancel"
            embed4.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCS_Taokaka_BCancel.png')
            embed4.add_field(name="Frame Data", value=tab4)
            #embed4.add_field(name="Deatils", value=mp)
			
            embed5 = discord.Embed(description='+3 leaves you air borne.')
            embed5.title = "C Cancel"
            embed5.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Taokaka_CCancel.png')
            embed5.add_field(name="Frame Data", value=tab5)
            #embed5.add_field(name="Deatils", value=mp)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
            await self.bot.say(embed=embed5)
        except:
            await self.bot.say("No Frame Data Found.....")				

    @tk.command(name="j8d", pass_context=False)  # Taokaka from blazblue
    async def _j8d_tk(self):  
        """No more loops!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            my_table1 = table[47]
            my_table2 = table[49]
            my_table3 = table[51]
            my_table4 = table[53]
            my_table5 = table[55]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            table_body3 = my_table3.find("table")
            table_body4 = my_table4.find("table")
            table_body5 = my_table5.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
            headers2 = table_body2.find_all('tr')[1]
            info2 = table_body2.find_all('tr')[2]
            headers3 = table_body3.find_all('tr')[1]
            info3 = table_body3.find_all('tr')[2]
            headers4 = table_body4.find_all('tr')[1]
            info4 = table_body4.find_all('tr')[2]
            headers5 = table_body5.find_all('tr')[1]
            info5 = table_body5.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            #mp1 = info.find_all('li')[0].get_text() #Note will need to line these up if any information goes into any of these tables.
            #mp2 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')  
            tab2 = tabulate([["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left') 
            tab3 = tabulate([["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')  
            tab4 = tabulate([["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')  
            tab5 = tabulate([["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')  				
   	        #mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
   	        #mpA = "```" + "*Charge rate (normal): 4~7F = 250 points per frame; 8-21F~ = 200 points per frame; 22F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~7F = 625 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 4~7F = 1250 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
   	        #mpB = "```" + "*Charge rate (normal): 4~5F = 500 points per frame; 6~20F = 250 points per frame; 21F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~5F = 1250 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 5~6F = 2500 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
			
            embed = discord.Embed()
            embed.title = "J.8D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6a/BBCS_Taokaka_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Deatils", value=mp)
			
            embed1 = discord.Embed(description='Combo stuff.')
            embed1.title = "Forward Cancel"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCS_Taokaka_6Cancel.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Deatils", value=mp)
            
            embed2 = discord.Embed(description='Combo stuff Backwards')
            embed2.title = "Backward Cancel"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/dc/BBCS_Taokaka_4Cancel.png')
            embed2.add_field(name="Frame Data", value=tab2)
            #embed2.add_field(name="Deatils", value=mp)
			
            embed3 = discord.Embed(description='Frame traps on hit and safe on block.')
            embed3.title = "A Cancel"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCS_Taokaka_ACancel.png')
            embed3.add_field(name="Frame Data", value=tab3)
            #embed3.add_field(name="Deatils", value=mp)
			
            embed4 = discord.Embed(description='J.D BFF.')
            embed4.title = "B Cancel"
            embed4.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCS_Taokaka_BCancel.png')
            embed4.add_field(name="Frame Data", value=tab4)
            #embed4.add_field(name="Deatils", value=mp)
			
            embed5 = discord.Embed(description='+3 leaves you air borne.')
            embed5.title = "C Cancel"
            embed5.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Taokaka_CCancel.png')
            embed5.add_field(name="Frame Data", value=tab5)
            #embed5.add_field(name="Deatils", value=mp)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
            await self.bot.say(embed=embed5)
        except:
            await self.bot.say("No Frame Data Found.....")				
			
    @tk.command(name="ft", pass_context=False)  # Taokaka from blazblue
    async def _ft_tk(self):   
        """Forward Throw:  Normal."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = [po.get_text() for po in info.find_all('p')]		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCS_Taokaka_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @tk.command(name="bt", pass_context=False)  # Taokaka from blazblue
    async def _bt_tk(self):   
        """Back Throw:  Troll pose."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/52/BBCS_Taokaka_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @tk.command(name="at", pass_context=False)  # Taokaka from blazblue
    async def _at_tk(self):   
        """Air Throw:  Solid damage."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Taokaka_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @tk.command(name="ca", pass_context=False)  # Taokaka from blazblue
    async def _ca_tk(self):   
        """Counter Assault:  Got a buff back up in CP."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e0/BBCS_Taokaka_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @tk.command(name="ct", pass_context=False)  # Taokaka from blazblue
    async def _ct_tk(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/be/BBCP_Taokaka_CrushTrigger.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @tk.command(name="236a", pass_context=False)  # Taokaka from blazblue
    async def _s1_tk(self):   
        """Safe."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[5] + "\n" + "```"
			
            embed = discord.Embed()
            embed.title = "Cat Spirit One!"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/17/BBCS_Taokaka_Spirit1.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @tk.command(name="j236b", pass_context=False)  # Taokaka from blazblue
    async def _s2_tk(self):   
        """Combo ender."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1[0] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[5] + "\n" + "```"
			
            embed = discord.Embed()
            embed.title = "Cat Spirit Two!"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/af/BBCS_Taokaka_Spirit2.png')
            embed.add_field(name="Hits 1-4 Frame Data", value=tab)
            embed.add_field(name="5th Hit Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @tk.command(name="236c", pass_context=False)  # Taokaka from blazblue
    async def _s3_tk(self):   
        """No longer an overhead."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            my_table1 = table[73]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body1.find_all('tr')[1]
            info =  table_body.find_all('tr')[4]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[5] + "\n" + "```"
			
            embed = discord.Embed()
            embed.title = "Cat Spirit Three!"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/86/BBCS_Taokaka_Spirit3.png')
            embed.add_field(name="Downswing Frame Data", value=tab)
            embed.add_field(name="Downswing(MAX CHARGE) Frame Data", value=tab1)
            embed.add_field(name="Upswing Frame Data", value=tab2)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed(Description='Easy resets, but real men go for corner 5D~A.')
            embed1.title = "Cat Spirit Encore!:  236c-b"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/e6/BBCP_Taokaka_SpiritEncore.png')
            embed1.add_field(name="Frame Data", value=tab3)
            #embed1.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")	

    @tk.command(name="63214a", pass_context=False)  # Taokaka from blazblue
    async def _s4_tk(self):   
        """Tao throws out some random shit. A and B are not options."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[5]
            headers2 = table_body.find_all('tr')[6]
            headers3 = table_body.find_all('tr')[7]
            headers4 = table_body.find_all('tr')[8]
            headers5 = table_body.find_all('tr')[10]
            headers6 = table_body.find_all('tr')[11]
            headers7 = table_body.find_all('tr')[13]
            info =  table_body.find_all('tr')[9]
            info1 =  table_body.find_all('tr')[12]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]
            Data7 = [head7.get_text() for head7 in headers7.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()
            vrs6 = headers6.find('th').get_text()
            vrs7 = headers7.find('th').get_text()
            mp1 = info.find('li').get_text()
            mp2 = info1.find('li').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            tab6 = tabulate([["Version", vrs6], ["Damage", Data6[0]], ["Cancel", Data6[1]], ["Guard", Data6[2]], ["Startup", Data6[3]], ["Active", Data6[4]], ["Recovery", Data6[5]], ["Frame Adv.", Data6[6]], ["Attribute", Data6[7]]], tablefmt='simple', stralign='left')
            tab7 = tabulate([["Version", vrs7], ["Damage", Data7[0]], ["Cancel", Data7[1]], ["Guard", Data7[2]], ["Startup", Data7[3]], ["Active", Data7[4]], ["Recovery", Data7[5]], ["Frame Adv.", Data7[6]], ["Attribute", Data7[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Kitty Litter Special(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/08/BBCS_Taokaka_Litter.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Items"
            embed1.add_field(name="Apple Frame Data", value=tab1)
            embed1.add_field(name="Bomb Frame Data", value=tab2)
            embed1.add_field(name="Chibikaka Frame Data", value=tab3)
            #embed1.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Items Cont."
            embed2.add_field(name="Pillow Frame Data", value=tab4)
            embed2.add_field(name="Pillow Attack Props", value=mpA)
            embed2.add_field(name="Hammer Frame Data", value=tab5)
			
            embed3 = discord.Embed()
            embed3.title = "Items Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Taokaka_Items.png')
            embed3.add_field(name="Baseball Frame Data", value=tab6)
            embed3.add_field(name="Baseball Attack Props", value=mpB)
            embed3.add_field(name="Fish Frame Data", value=tab7)			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except:
            await self.bot.say("No Frame Data Found...")	

    @tk.command(name="63214b", pass_context=False)  # Taokaka from blazblue
    async def _s5_tk(self):   
        """Tao throws out some random shit. A and B are not options."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[5]
            headers2 = table_body.find_all('tr')[6]
            headers3 = table_body.find_all('tr')[7]
            headers4 = table_body.find_all('tr')[8]
            headers5 = table_body.find_all('tr')[10]
            headers6 = table_body.find_all('tr')[11]
            headers7 = table_body.find_all('tr')[13]
            info =  table_body.find_all('tr')[9]
            info1 =  table_body.find_all('tr')[12]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]
            Data7 = [head7.get_text() for head7 in headers7.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()
            vrs6 = headers6.find('th').get_text()
            vrs7 = headers7.find('th').get_text()
            mp1 = info.find('li').get_text()
            mp2 = info1.find('li').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            tab6 = tabulate([["Version", vrs6], ["Damage", Data6[0]], ["Cancel", Data6[1]], ["Guard", Data6[2]], ["Startup", Data6[3]], ["Active", Data6[4]], ["Recovery", Data6[5]], ["Frame Adv.", Data6[6]], ["Attribute", Data6[7]]], tablefmt='simple', stralign='left')
            tab7 = tabulate([["Version", vrs7], ["Damage", Data7[0]], ["Cancel", Data7[1]], ["Guard", Data7[2]], ["Startup", Data7[3]], ["Active", Data7[4]], ["Recovery", Data7[5]], ["Frame Adv.", Data7[6]], ["Attribute", Data7[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Kitty Litter Special(B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/08/BBCS_Taokaka_Litter.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Items"
            embed1.add_field(name="Apple Frame Data", value=tab1)
            embed1.add_field(name="Bomb Frame Data", value=tab2)
            embed1.add_field(name="Chibikaka Frame Data", value=tab3)
            #embed1.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Items Cont."
            embed2.add_field(name="Pillow Frame Data", value=tab4)
            embed2.add_field(name="Pillow Attack Props", value=mpA)
            embed2.add_field(name="Hammer Frame Data", value=tab5)
			
            embed3 = discord.Embed()
            embed3.title = "Items Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Taokaka_Items.png')
            embed3.add_field(name="Baseball Frame Data", value=tab6)
            embed3.add_field(name="Baseball Attack Props", value=mpB)
            embed3.add_field(name="Fish Frame Data", value=tab7)			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except:
            await self.bot.say("No Frame Data Found...")			

    @tk.command(name="63214c", pass_context=False)  # Taokaka from blazblue
    async def _s6_tk(self):   
        """Bowling ball xN."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[14]
            info =  table_body.find_all('tr')[15]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "```"
            #mpB = "```" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Kitty Litter Special(C)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/08/BBCS_Taokaka_Litter.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Bowling Ball"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Taokaka_Items.png')
            embed1.add_field(name="Frame Data", value=tab1)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @tk.command(name="214d", pass_context=False)  # Taokaka from blazblue
    async def _s7_tk(self):   
        """broken"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "```"
            #mpB = "```" + "*" + mp2[3] + "\n" + "*" + mp2[4] + "```"
			
            embed = discord.Embed()
            embed.title = "Cat Jump"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCS_Taokaka_CatJump.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @tk.command(name="j214d", pass_context=False)  # Taokaka from blazblue
    async def _s8_tk(self):   
        """ (at edge of screen)Ambigious."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "```"
            #mpB = "```" + "*" + mp2[3] + "\n" + "*" + mp2[4] + "```"
			
            embed = discord.Embed()
            embed.title = "Sticky Kitty"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/82/BBCS_Taokaka_Sticky.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")		

    @tk.command(name="28d", pass_context=False)  # Taokaka from blazblue
    async def _s9_tk(self):   
        """Testu Special."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs1 = headers1.find('th').get_text()	
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs2 = headers2.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Trick Edge"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4d/BBCS_Taokaka_Trick.png')
            embed.add_field(name="Normal Frame Data", value=tab)	
            embed.add_field(name="Down Frame Data", value=tab1)
            embed.add_field(name="Back Frame Data", value=tab2)			
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")				

    @tk.command(name="22c", pass_context=False)  # Taokaka from blazblue
    async def _s10_tk(self):   
        """Great P2."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp2 = [po.get_text() for po in info.find_all('p')] 
            #mp1 = [op.get_text() for op in info.find_all('li')]       

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
            #mpB = "```" + "*" + mp2[1] + "```"
            #mpC = "```" + "*" + mp2[0] + "```"
            #mpD = "```" + "*" + mp2[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Slashy Slashy"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/55/BBCS_Taokaka_Slashy.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @tk.command(name="236236d", pass_context=False)  # Taokaka from blazblue
    async def _dd1_tk(self):
        """No more wall bounce =[."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[85]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op1.get_text() for op1 in info.find_all('li')]
            #mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Hexa Edge"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cf/BBCS_Taokaka_Hexa.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @tk.command(name="214214c", pass_context=False)  # Taokaka from blazblue
    async def _dd2_tk(self):
        """Hold Dat L."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[87]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            #mp1 = [op1.get_text() for op1 in info.find_all('li')]
            #mp2 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Imma Beat The Crap Outta You"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d4/BBCS_Taokaka_Tuna.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
		

    @tk.command(name="j236236d", pass_context=False)  # Taokaka from blazblue
    async def _dd3_tk(self):   
        """Damage and knockdown."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[89]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            #mp1 = [op1.get_text() for op1 in info.find_all('li')]
            #mp2 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Unison Nyaibu!"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/31/BBCP_Taokaka_Unison_Nyaibu.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @tk.command(name="abcd", pass_context=False)  # Taokaka from blazblue
    async def _abcd_tk(self): 
        """Exceed Accel: PARTY TIME!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[91]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Kaka Clan Hospitality!"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c9/BBCF_Taokaka_ExceedAccel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @tk.command(name="od", pass_context=False)  # Taokaka from blazblue
    async def _od_tk(self): 
        """SHADOW CLONE JUTSU!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[93]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [fo.get_text() for fo in info.find_all('li')]
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Almost Becoming Two(OverDrive)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c9/BBCS_Taokaka_AB2.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @tk.command(name="4128d", pass_context=False)  # Taokaka from blazblue
    async def _astral_tk(self):   
        """GG."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[95]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [po.get_text() for po in info.find_all('li')]
            #mp2 = [op.get_text() for op in info.find_all('p')]
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Attack Meow Pow!"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fa/BBCS_Taokaka_NyamberOne.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
###################################################################################################################################################################################################
    @re.command(name="5a", pass_context=False)  # Relius Clover from blazblue
    async def _5a_re(self):
        """Relius' fastest normal!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"           
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/df/BBCS_Relius_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
		
            await self.bot.say(embed=embed)
            
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @re.command(name="5b", pass_context=False)  # Relius Clover from blazblue
    async def _5b_re(self):   
        """Demi-God level poke. Rule the world with an iron fist!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCS_Relius_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)		
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @re.command(name="5c", pass_context=False)  # Relius Clover from blazblue
    async def _5c_re(self): 
        """Smaller horizontal range than 5B, take care not to whiff!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/37/BBCS_Relius_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
	
    @re.command(name="2a", pass_context=False)  # Relius Clover from blazblue
    async def _2a_re(self):   
        """This move is static on block. Take advantage of that."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCS_Relius_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @re.command(name="2b", pass_context=False)  # Relius Clover from blazblue
    async def _2b_re(self): 
        """A slow but far reaching low."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCS_Relius_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @re.command(name="2c", pass_context=False)  # Relius Clover from blazblue
    async def _2c_re(self):   
        """Make them hate this move."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/ce/BBCS_Relius_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @re.command(name="6a", pass_context=False)  # Relius Clover from blazblue
    async def _6a_re(self):  
        """The overhead of infamy."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/29/BBCS_Relius_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @re.command(name="6b", pass_context=False)  # Relius Clover from blazblue
    async def _6b_re(self):  
        """Better than nothing I guess."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/67/BBCS_Relius_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @re.command(name="6c", pass_context=False)  # Relius Clover from blazblue
    async def _6c_re(self):  
        """Delay longer to float lower."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/81/BBCS_Relius_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @re.command(name="3c", pass_context=False)  # Relius Clover from blazblue
    async def _3c_re(self):   
        """Still good after all these years"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bc/BBCS_Relius_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @re.command(name="ja", pass_context=False)  # Relius Clover from blazblue
    async def _ja_re(self): 
        """Who ordered the actives?"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/79/BBCS_Relius_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
			
    @re.command(name="jb", pass_context=False)  # Relius Clover from blazblue
    async def _jb_re(self):   
        """Still catches rolls when you safejump!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ab/BBCS_Relius_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @re.command(name="jc", pass_context=False)  # Relius Clover from blazblue
    async def _jc_re(self): 
        """Not a divekick."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c6/BBCS_Relius_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @re.command(name="5d", pass_context=False)  # Relius Clover from blazblue
    async def _5d_re(self):   
        """Less IG used to summon, more for later."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left') 				
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/be/BBCS_Relius_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @re.command(name="2d", pass_context=False)  # Relius Clover from blazblue
    async def _2d_re(self):  
        """Don't go trying to use this to desummon."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left') 				
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/64/BBCS_Relius_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @re.command(name="jd", pass_context=False)  # Relius Clover from blazblue
    async def _jd_re(self):  
        """Can also glide backwords for a safe retreat as you summon/desummon!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left') 				
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7e/BBCS_Relius_jD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		
			
			
    @re.command(name="ig6d", pass_context=False)  # Relius Clover from blazblue
    async def _ig6d_re(self):  
        """Does everything."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left') 				
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Ignis: 6D(/OD)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCS_Relius_Ignis_6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")			

    @re.command(name="ig2d", pass_context=False)  # Relius Clover from blazblue
    async def _ig2d_re(self):  
        """Don't touch my waifu"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left') 				
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Ignis: 2D(/OD)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/11/BBCS_Relius_Ignis_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")				

    @re.command(name="ig4d", pass_context=False)  # Relius Clover from blazblue
    async def _ig4d_re(self):  
        """Is still an air unblockable even if Ignis is high up in the air herself."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left') 				
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Ignis: 4D(/OD)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2e/BBCS_Relius_Ignis_4D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")				

    @re.command(name="igj6d", pass_context=False)  # Relius Clover from blazblue
    async def _igj6d_re(self):  
        #"""Insert Tag Here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left') 				
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Ignis: j.6D(/OD)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a9/BBCS_Relius_Ignis_j6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @re.command(name="igj2d", pass_context=False)  # Relius Clover from blazblue
    async def _igj2d_re(self):  
        #"""Insert Tag Here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left') 				
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Ignis: j.2D(/OD)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/da/BBCS_Relius_Ignis_j2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @re.command(name="igj8d", pass_context=False)  # Relius Clover from blazblue
    async def _igj8d_re(self):  
        #"""Insert Tag Here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left') 				
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Ignis: j.8D(/OD)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fb/BBCS_Relius_Ignis_j8D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")			
			
    @re.command(name="ft", pass_context=False)  # Relius Clover from blazblue
    async def _ft_re(self):   
        """Forward Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/26/BBCS_Relius_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @re.command(name="bt", pass_context=False)  # Relius Clover from blazblue
    async def _bt_re(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e7/BBCS_Relius_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @re.command(name="at", pass_context=False)  # Relius Clover from blazblue
    async def _at_re(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/01/BBCS_Relius_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @re.command(name="ca", pass_context=False)  # Relius Clover from blazblue
    async def _ca_re(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/37/BBCS_Relius_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @re.command(name="ct", pass_context=False)  # Relius Clover from blazblue
    async def _ct_re(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fc/BBCP_Relius_CrushTrigger.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @re.command(name="236c", pass_context=False)  # Relius Clover from blazblue
    async def _s1_re(self):   
        """Suprise Fist!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            my_table1 = table[57]
            my_table2 = table[59]
            my_table3 = table[61]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            table_body3 = my_table3.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            headers3 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
            headers4 = table_body2.find_all('tr')[1]
            headers5 = table_body2.find_all('tr')[2]
            info2 =  table_body2.find_all('tr')[3]
            headers6 = table_body3.find_all('tr')[1]
            headers7 = table_body3.find_all('tr')[2]
            info3 =  table_body3.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]
            Data7 = [head7.get_text() for head7 in headers7.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            mp2 = [po.get_text() for po in info1.find_all('p')]
            mp3 = [ah.get_text() for ah in info2.find_all('p')]
            mp4 = [ba.get_text() for ba in info3.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()
            vrs6 = headers6.find('th').get_text()
            vrs7 = headers7.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            tab6 = tabulate([["Version", vrs6], ["Damage", Data6[0]], ["Cancel", Data6[1]], ["Guard", Data6[2]], ["Startup", Data6[3]], ["Active", Data6[4]], ["Recovery", Data6[5]], ["Frame Adv.", Data6[6]], ["Attribute", Data6[7]]], tablefmt='simple', stralign='left')
            tab7 = tabulate([["Version", vrs7], ["Damage", Data7[0]], ["Cancel", Data7[1]], ["Guard", Data7[2]], ["Startup", Data7[3]], ["Active", Data7[4]], ["Recovery", Data7[5]], ["Frame Adv.", Data7[6]], ["Attribute", Data7[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpC = "```" + "* Used to knock the opponent away after lauger. Does slightly less damage than ~214B/~j.214B but does not put Ignis in sandwich mode. In CF Ignis now appears at the height Relius is currently at, and she does not cause the opponent to ground slide instead letting them emergency tech. when the opponent is air-hit by the move one now has to manually time the move to hit, preferably at the last active it can. Forgetting this can make 236C~214A whiff completely if the opponent was high up when 236C connected. The P2 has also been decreased so 4D is the more optimal move to continue from 236C with if 4D's bonus proration hasn't been used in the combo prior to 236C." + "```"
            mpD = "```" + "* The loss of vertical tracking can let you set up an inescapable Val Tus oki from 2C>6C>236C~214A midscreen if timed correctly. In the corner ~214A can be followed up with 5B, 3C, or 2C. In the corner, ~j.214A can follow up into 5B 3C or airdash j.B>j.C>j.236C>4D usually. In OD this move has a lot of untech and puts the opponent in a sliding state. You can use the OD version to desummon Ignis in the corner and follow up" + "```"            
            mpE = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "```"
            mpF = "```" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "\n" + "*" + mp4[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Id Lauger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6f/BBCS_Relius_IdLauger.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            
            embed1 = discord.Embed()
            embed1.title = "Id Lauger Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCS_Relius_AirIdLauger.png')			
            embed1.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed2 = discord.Embed(Description='214A after Id Lauger')
            embed2.title = "Id Haas"
            embed2.add_field(name="Ground Frame Data", value=tab2)
            embed2.add_field(name="Air Frame Data", value=tab3)
            embed2.add_field(name="Attack Props:", value=mpB, inline='true')
			
            embed3 = discord.Embed()
            embed3.title = "Id Haas Cont."
            embed3.add_field(name="Attack Props: Cont.", value=mpC)
			
            embed4 = discord.Embed()
            embed4.title = "Id Haas Cont."
            embed4.set_image(url='http://www.dustloop.com/wiki/images/0/00/BBCS_Relius_IdHaas.png')
            embed4.add_field(name="Attack Props: Cont.", value=mpD)
			
            embed5 = discord.Embed(Description='214B after Id Lauger')
            embed5.title = "Id Naiads"
            embed5.set_image(url='http://www.dustloop.com/wiki/images/3/35/BBCS_Relius_IdNaiads.png')
            embed5.add_field(name="Ground Frame Data", value=tab4)
            embed5.add_field(name="Air Frame Data", value=tab5)
            embed5.add_field(name="Attack Props:", value=mpE, inline='true')
			
            embed6 = discord.Embed(Description='214C after Id Lauger')
            embed6.title = "Id Zain"
            embed6.set_image(url='http://www.dustloop.com/wiki/images/4/47/BBCS_Relius_ValTus.png')
            embed6.add_field(name="Ground Frame Data", value=tab6)
            embed6.add_field(name="Air Frame Data", value=tab7)
            embed6.add_field(name="Attack Props:", value=mpF, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
            await self.bot.say(embed=embed5)
            await self.bot.say(embed=embed6)
        except:
            await self.bot.say("No Frame Data Found...")	

    @re.command(name="236a", pass_context=False)  # Relius Clover from blazblue
    async def _s2_re(self):   
        """DANCE OFF"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Led Ley"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/97/BBCS_Relius_LedLey.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @re.command(name="214a", pass_context=False)  # Relius Clover from blazblue
    async def _s3_re(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Val Lanto (/OD)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/00/BBCS_Relius_IdHaas.png')
            embed.add_field(name="Ignis Active Frame Data", value=tab)
            embed.add_field(name="Ignis Withdrawn Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @re.command(name="214b", pass_context=False)  # Relius Clover from blazblue
    async def _s4_re(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]


            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Val Lyra (/OD)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5d/BBCS_Relius_ValLyra.png')
            embed.add_field(name="Ignis Active Frame Data", value=tab)
            embed.add_field(name="Ignis Withdrawn Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')	
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @re.command(name="214c", pass_context=False)  # Relius Clover from blazblue
    async def _s5_re(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Val Tus (/OD)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/47/BBCS_Relius_ValTus.png')
            embed.add_field(name="Ignis Active Frame Data", value=tab)
            embed.add_field(name="Ignis Withdrawn Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')		
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")			

    @re.command(name="236d", pass_context=False)  # Relius Clover from blazblue
    async def _s6_re(self):   
        """GON GIT YA"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "```"
			
            embed = discord.Embed()
            embed.title = "Geara Kaas"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/74/BBCS_Relius_Geara_Kaas.png')
            embed.add_field(name="Ignis Active Frame Data", value=tab)
            embed.add_field(name="Ignis Withdrawn Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @re.command(name="214d", pass_context=False)  # Relius Clover from blazblue
    async def _s7_re(self):   
        """Bop your nose"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "```"
			
            embed = discord.Embed()
            embed.title = "Geara Nose (/OD)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/65/BBCS_Relius_GearaNose.png')
            embed.add_field(name="Ignis Active Frame Data", value=tab)
            embed.add_field(name="Ignis Withdrawn Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @re.command(name="j214b", pass_context=False)  # Relius Clover from blazblue
    async def _s8_re(self):   
        """ (at edge of screen)Ambigious."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Bel Lafino"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/35/BBCS_Relius_IdNaiads.png')
            embed.add_field(name="Ignis Active Frame Data", value=tab)
            embed.add_field(name="Ignis Withdrawn Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")		

    @re.command(name="22a", pass_context=False)  # Relius Clover from blazblue
    async def _s9_re(self):   
        """You've Activated my trap card(A)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()	
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [op.get_text() for op in info.find_all('li')]			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
			
            embed = discord.Embed()
            embed.title = "Geara Lugia"
            embed.add_field(name="(A) Frame Data", value=tab)	
            embed.add_field(name="Attack Props:", value=mpA)	

            embed1 = discord.Embed()
            embed1.title = "Geara Lugia(A) Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/96/BBCP_Relius_GearaLugia.png')
            embed1.add_field(name="Attack Props cont.", value=mpB)			
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @re.command(name="22b", pass_context=False)  # Relius Clover from blazblue
    async def _s10_re(self):   
        """You've Activated my trap card(B)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()	
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [op.get_text() for op in info.find_all('li')]			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Geara Lugia"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/96/BBCP_Relius_GearaLugia.png')
            embed.add_field(name="(B) Frame Data", value=tab)	
            embed.add_field(name="Attack Props:", value=mpA)			
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @re.command(name="22c", pass_context=False)  # Relius Clover from blazblue
    async def _s11_re(self):   
        """You've Activated my trap card(C)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()	
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [op.get_text() for op in info.find_all('li')]			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Geara Lugia"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/96/BBCP_Relius_GearaLugia.png')
            embed.add_field(name="(C) Frame Data", value=tab)	
            embed.add_field(name="Attack Props:", value=mpA)			
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")				

    @re.command(name="41236b", pass_context=False)  # Relius Clover from blazblue
    async def _s12_re(self):   
        """Swiss Army Special"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]       

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Gad Leis"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0c/BBCP_Relius_GadLeis.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @re.command(name="2363214c", pass_context=False)  # Relius Clover from blazblue
    async def _dd1_re(self):
        #"""Insert Tag Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op1.get_text() for op1 in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Req Vinum"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f8/BBCS_Relius_ReqVinum.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @re.command(name="632146d", pass_context=False)  # Relius Clover from blazblue
    async def _dd2_re(self):
        """Hold Dat L."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [op1.get_text() for op1 in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Vol Tedo"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Vol Tedo Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/5/56/BBCS_Relius_VolTedo.png')
            embed1.add_field(name="Attack Props cont.", value=mpB)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
		

    @re.command(name="236236d", pass_context=False)  # Relius Clover from blazblue
    async def _dd3_re(self):   
        """SHANK YO ASS"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[85]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [op1.get_text() for op1 in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "* Fully armored and takes no damage from hits unlike Carl's similar distortion with Nirvana. It has quite a few uses, from creating a wall to trap a dying opponent behind at neutral, to locking an opponent down for mix-up to just hard countering a counter assault or standing burst. This move has changed from CP to Extend. CH 5C and CH 2C can combo into it on ground hit for some good, damaging, burst safe confirms. The first eight hits occur faster and no longer have gaps in them with which you can cross up an opponent. (This however doesn't let an opponent who's blocked the first hit disrespect the remaining 7. The final three hits still have gaps so cross-ups are possible.) If you find that you need to stretch that last bit of Ignis to finish an opponent, or if you just see that your for has run out of air options or put themselves in a situation where you can trade with this move and win, you may as well throw it out there." + "```"
            mpC = "```" + "* While the move is happening you can do high/low mix-ups for the first eight hits and cross-ups using jumps or led ley or frame traps/throws during the last three hits. It's worth noting that Ignis will not stop for anything short of Relius being hit by an EA or a couple cinematic distortions. Because of this it is possible to combo a green burst into the last hit of Bios into 3C>632146D to close a match out. Also keep in mind that as long as Relius is not in hitstun when the move ends Ignis will stay summoned even after this move is finished. Beware though because many characters can merely backdash, take a hit and then airtech to escape when they see the move. Characters with DPs can DP clash the move until it's over for safety as well. New to CF is the fact that the last three hits will combo without counter hit even if they're airborne!" + "```"
			
            embed = discord.Embed()
            embed.title = "Duo Bios"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Duo Bios cont."
            embed1.add_field(name="Attack Props cont.", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "Duo Bios cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/7/7e/BBCS_Relius_DuoBios.png')
            embed2.add_field(name="Attack Props cont.", value=mpC)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @re.command(name="abcd", pass_context=False)  # Relius Clover from blazblue
    async def _abcd_re(self): 
        """Exceed Accel: Dandy Punch"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[87]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Zera Varius"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1b/BBCF_Relius_ExceedAccel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
			
    @re.command(name="214214d", pass_context=False)  # Relius Clover from blazblue
    async def _astral_re(self):   
        """1 Free ride to the Rape Dungeon"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[89]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Puppeteer's Altar"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3f/BBCS_Relius_PuppeteersAltar.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Puppeteer's Altar Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/17/BBCS_Relius_PuppeteersAltar2.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	
###################################################################################################################################################################################################
    @rac.command(name="5a", pass_context=False)  # Rachel Alucard from blazblue
    async def _5a_re(self):
        """Auto 2-hit normal. Decent for pressure."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"           
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7e/BBCS_Rachel_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
		
            await self.bot.say(embed=embed)
            
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @rac.command(name="5b", pass_context=False)  # Rachel Alucard from blazblue
    async def _5b_re(self):   
        """Risky poke with high reward. Key move in Rachel's mix up and combos."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCS_Rachel_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)		
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @rac.command(name="5c", pass_context=False)  # Rachel Alucard from blazblue
    async def _5c_re(self): 
        """5C is one of her Fatal Counter moves. Very limited use outside of combos."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            my_table1 = table[7]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = [po.get_text() for po in info1.find_all('li')]
            mp4 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1d/BBCS_Rachel_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Great corner combo ender. Offers strong okizeme options in the corner.')
            embed1.title = "5cc"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/8a/BBCS_Rachel_5CC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
	
    @rac.command(name="2a", pass_context=False)  # Rachel Alucard from blazblue
    async def _2a_re(self):   
        """Good poke. Leaves you at neutral frame advantage."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5a/BBCS_Rachel_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @rac.command(name="2b", pass_context=False)  # Rachel Alucard from blazblue
    async def _2b_re(self): 
        """Really good low. Gatlings from 5B"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/16/BBCS_Rachel_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @rac.command(name="2c", pass_context=False)  # Rachel Alucard from blazblue
    async def _2c_re(self):   
        """Full body guard point for one hit. Really unsafe if whiffed or blocked."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCS_Rachel_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @rac.command(name="6a", pass_context=False)  # Rachel Alucard from blazblue
    async def _6a_re(self):  
        """Main anti-air with Rachel."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = [po.get_text() for po in info.find_all('p')]			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b6/BBCS_Rachel_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @rac.command(name="6b", pass_context=False)  # Rachel Alucard from blazblue
    async def _6b_re(self):  
        """Good poke in some matchups"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = [op.get_text() for op in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2e/BBCS_Rachel_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @rac.command(name="4b", pass_context=False)  # Rachel Alucard from blazblue
    async def _4b_re(self):  
        """Overhead. Slow, but can fatal counter."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "4b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/95/BBCS_Rachel_4B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @rac.command(name="6c", pass_context=False)  # Rachel Alucard from blazblue
    async def _6c_re(self):  
        """Main corner carry normal when used with forward directional wind (D/6D)."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5f/BBCS_Rachel_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @rac.command(name="3c", pass_context=False)  # Rachel Alucard from blazblue
    async def _3c_re(self):   
        """Low hit. Knockdown to safely summon frog."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            my_table1 = table[25]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/89/BBCS_Rachel_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(Description='Mix up tool. Can also be used to extend combos.')
            embed1.title = "3[c]"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/89/BBCS_Rachel_3C.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @rac.command(name="ja", pass_context=False)  # Rachel Alucard from blazblue
    async def _ja_re(self): 
        """Instant overhead if used with 2D/3D wind."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b4/BBCS_Rachel_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
			
    @rac.command(name="jb", pass_context=False)  # Rachel Alucard from blazblue
    async def _jb_re(self):   
        """Used like j.A but it's a bit slower. Pretty good air-to-air uses."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/56/BBCS_Rachel_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @rac.command(name="jc", pass_context=False)  # Rachel Alucard from blazblue
    async def _jc_re(self): 
        """Catch opponents in the air directly above you."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            my_table1 = table[33]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = [op.get_text() for op in info1.find_all('li')]
            mp4 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 +"```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8d/BBCS_Rachel_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(Description='Can be used for mix up. Can also be used to stall for time.')
            embed1.title = "J.[C]"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/5/51/BBCS_Rachel_jC_2.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @rac.command(name="j2c", pass_context=False)  # Rachel Alucard from blazblue
    async def _j2c_re(self):   
        """Has 3 levels. Level 2 and Level 3 are used to extend combos."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]  			
            mp1 = [po.get_text() for po in info.find_all('p')] 	
            mp2 = [op.get_text() for op in info.find_all('li')] 
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left') 	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left') 			
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "J.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/56/BBCS_Rachel_j2C.png')
            embed.add_field(name="Lv. 1 Frame Data", value=tab)
            embed.add_field(name="Lv. 2 Frame Data", value=tab1)
            embed.add_field(name="Lv. 3 Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
					
			
    @rac.command(name="ft", pass_context=False)  # Rachel Alucard from blazblue
    async def _ft_re(self):   
        """Forward Throw: Use with wind to follow-up with a combo."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/94/BBCS_Rachel_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @rac.command(name="bt", pass_context=False)  # Rachel Alucard from blazblue
    async def _bt_re(self):   
        """Back Throw: Use with wind to follow-up with a combo."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/31/BBCS_Rachel_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @rac.command(name="at", pass_context=False)  # Rachel Alucard from blazblue
    async def _at_re(self):   
        """Air Throw: Follow-up with a downward directional wind if too high to combo normally."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Rachel_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @rac.command(name="ca", pass_context=False)  # Rachel Alucard from blazblue
    async def _ca_re(self):   
        """Same animation as 6B, decent counter assault."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2e/BBCS_Rachel_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @rac.command(name="ct", pass_context=False)  # Rachel Alucard from blazblue
    async def _ct_re(self):   
        """Crush Trigger: Good combo material."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            vrs= headers.find('th').get_text()
            vrs1 = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cb/BBCP_Rachel_CT.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @rac.command(name="236a", pass_context=False)  # Rachel Alucard from blazblue
    async def _s1_re(self):   
        """Her standard zoning tool."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[7]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            mp2 = [po.get_text() for po in info.find_all('li')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp1[0] + "\n" + "*" + mp1[2] + "```"
            mpC = "```" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
			
            embed = discord.Embed()
            embed.title = "Tiny Lobelia(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cb/BBCS_Rachel_TinyLobeliaA.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            embed1 = discord.Embed()
            embed1.title = "Tiny Lobelia(A) Cont."		
            embed1.add_field(name="AP Cont.", value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Tiny Lobelia(A) Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Rachel_TinyLobeliaB.png')			
            embed2.add_field(name="AP Cont.", value=mpC, inline='true')
			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found...")	

    @rac.command(name="236b", pass_context=False)  # Rachel Alucard from blazblue
    async def _s2_re(self):   
        """Her standard zoning tool."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[5]
            info =  table_body.find_all('tr')[7]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            mp2 = [po.get_text() for po in info.find_all('li')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp1[0] + "\n" + "*" + mp1[2] + "```"
            mpC = "```" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
			
            embed = discord.Embed()
            embed.title = "Tiny Lobelia(B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cb/BBCS_Rachel_TinyLobeliaA.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            embed1 = discord.Embed()
            embed1.title = "Tiny Lobelia(B) Cont."		
            embed1.add_field(name="AP Cont.", value=mpB, inline='true')

            embed2 = discord.Embed()
            embed2.title = "Tiny Lobelia(B) Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Rachel_TinyLobeliaB.png')			
            embed2.add_field(name="AP Cont.", value=mpC, inline='true')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found...")	
			
    @rac.command(name="236c", pass_context=False)  # Rachel Alucard from blazblue
    async def _s3_re(self):   
        """Her standard zoning tool."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[6]
            info =  table_body.find_all('tr')[7]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            mp2 = [po.get_text() for po in info.find_all('li')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp2[1] + "\n" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpC = "```" + "*" + mp1[4] + "```"
			
            embed = discord.Embed()
            embed.title = "Tiny Lobelia(C)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cb/BBCS_Rachel_TinyLobeliaA.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            embed1 = discord.Embed()
            embed1.title = "Tiny Lobelia(C) Cont."		
            embed1.add_field(name="AP Cont.", value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Tiny Lobelia(C) Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Rachel_TinyLobeliaB.png')			
            embed2.add_field(name="AP Cont.", value=mpC, inline='true')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found...")

    @rac.command(name="214a", pass_context=False)  # Rachel Alucard from blazblue
    async def _s4_re(self):   
        """(AIR OK)George the Broken!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "George the 13th(Air OK)"
            embed.add_field(name="Summon Active Frame Data", value=tab)
            embed.add_field(name="Active Withdrawn Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "George the 13th Cont."
            embed1.add_field(name="AP Cont.", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "George the 13th Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/1/1b/BBCS_Rachel_GeorgeXIII.png')
            embed2.add_field(name="AP Cont.", value=mpC)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found...")	

    @rac.command(name="214b", pass_context=False)  # Rachel Alucard from blazblue
    async def _s5_re(self):   
        """DA Coffin(Air OK)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] +"```"
			
            embed = discord.Embed()
            embed.title = "Ivy Blossom(AIR OK)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8d/BBCF_Rachel_IvyBlossom.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')	
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @rac.command(name="214c", pass_context=False)  # Rachel Alucard from blazblue
    async def _s6_re(self):   
        """Used to extend combos or to catch opponents on their approach(AIR OK)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Sword Iris(AIR OK)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5c/BBCS_Rachel_SwordIris.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')		
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")			

    @rac.command(name="22a", pass_context=False)  # Rachel Alucard from blazblue
    async def _s7_re(self):   
        """Friendly Stalker"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpC = "```" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Lotus Barrel(AIR OK)"
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Lotus Barrel Cont."
            embed1.add_field(name="AP Cont.", value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Lotus Barrel Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/9/9c/BBCP_Rachel_BeelzeLotus.png')
            embed2.add_field(name="AP Cont.", value=mpC, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found...")			
			
    @rac.command(name="632146c", pass_context=False)  # Rachel Alucard from blazblue
    async def _dd1_re(self):
        """Primarily combo material.(Air OK)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
            headers4 = table_body.find_all('tr')[7]
            headers5 = table_body.find_all('tr')[8]
            info1 =  table_body.find_all('tr')[9]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            mp1 = [op1.get_text() for op1 in info.find_all('li')]
            mp2 = info1.find('li').get_text()
            mp3 = [op2.get_text() for op2 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
            mpB = "```" + "*" + mp2 + "\n" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Baden Baden Lily(Air OK)"
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="OD Ground Frame Data", value=tab2)
            embed.add_field(name="OD Air Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Baden Baden Lily Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/40/BBCS_Rachel_BadenBadenLily.png')
            embed1.add_field(name="Rod Frame Data", value=tab4)
            embed1.add_field(name="OD Rod Frame Data", value=tab5)
            embed1.add_field(name="AP Cont.", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @rac.command(name="632146b", pass_context=False)  # Rachel Alucard from blazblue
    async def _dd2_re(self):
        """Used for mix-up and wind regeneration.(Air OK)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            headers4 = table_body.find_all('tr')[5]
            headers5 = table_body.find_all('tr')[6]
            headers6 = table_body.find_all('tr')[7]
            headers7 = table_body.find_all('tr')[8]
            headers8 = table_body.find_all('tr')[9]
            headers9 = table_body.find_all('tr')[10]
            info =  table_body.find_all('tr')[11]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]
            Data7 = [head7.get_text() for head7 in headers7.find_all('td')]
            Data8 = [head8.get_text() for head8 in headers8.find_all('td')]
            Data9 = [head9.get_text() for head9 in headers9.find_all('td')]
            mp1 = [op1.get_text() for op1 in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()
            vrs6 = headers6.find('th').get_text()
            vrs7 = headers7.find('th').get_text()
            vrs8 = headers8.find('th').get_text()
            vrs9 = headers9.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            tab6 = tabulate([["Version", vrs6], ["Damage", Data6[0]], ["Cancel", Data6[1]], ["Guard", Data6[2]], ["Startup", Data6[3]], ["Active", Data6[4]], ["Recovery", Data6[5]], ["Frame Adv.", Data6[6]], ["Attribute", Data6[7]]], tablefmt='simple', stralign='left')
            tab7 = tabulate([["Version", vrs7], ["Damage", Data7[0]], ["Cancel", Data7[1]], ["Guard", Data7[2]], ["Startup", Data7[3]], ["Active", Data7[4]], ["Recovery", Data7[5]], ["Frame Adv.", Data7[6]], ["Attribute", Data7[7]]], tablefmt='simple', stralign='left')
            tab8 = tabulate([["Version", vrs8], ["Damage", Data8[0]], ["Cancel", Data8[1]], ["Guard", Data8[2]], ["Startup", Data8[3]], ["Active", Data8[4]], ["Recovery", Data8[5]], ["Frame Adv.", Data8[6]], ["Attribute", Data8[7]]], tablefmt='simple', stralign='left')
            tab9 = tabulate([["Version", vrs9], ["Damage", Data9[0]], ["Cancel", Data9[1]], ["Guard", Data9[2]], ["Startup", Data9[3]], ["Active", Data9[4]], ["Recovery", Data9[5]], ["Frame Adv.", Data9[6]], ["Attribute", Data9[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
            mpB = "```" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Tempest Dahlia(Air OK)"
            embed.add_field(name="Lv.0 Frame Data", value=tab)
            embed.add_field(name="Lv.1 Frame Data", value=tab1)
            embed.add_field(name="Lv.2 Ground Frame Data", value=tab2)
            embed.add_field(name="Lv.3 Air Frame Data", value=tab3)
            embed.add_field(name="Lv.4 Air Frame Data", value=tab4)
			
            embed1 = discord.Embed()
            embed1.title = "OD Tempest Dahlia"
            embed1.add_field(name="Lv.0(OD) Frame Data", value=tab)
            embed1.add_field(name="Lv.1(OD) Frame Data", value=tab1)
            embed1.add_field(name="Lv.2(OD) Ground Frame Data", value=tab2)
            embed1.add_field(name="Lv.3(OD) Air Frame Data", value=tab3)
            embed1.add_field(name="Lv.4(OD) Air Frame Data", value=tab4)
			
            embed2 = discord.Embed()
            embed2.title = "Tempest Dahlia Cont."
            embed2.add_field(name="Attack Props:.", value=mpA, inline='true')
			
            embed3 = discord.Embed()
            embed3.title = "Tempest Dahlia Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/c/ca/BBCS_Rachel_TempestDahlia.png')
            embed3.add_field(name="AP Cont.", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except:
            await self.bot.say("No Frame Data Found.....")	
				

    @rac.command(name="abcd", pass_context=False)  # Rachel Alucard from blazblue
    async def _abcd_re(self): 
        """Exceed Accel: Wizard of OZ!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op1.get_text() for op1 in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Gerbera Lute"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/53/BBCF_Rachel_ExceedAccel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
			
    @rac.command(name="2363214c", pass_context=False)  # Rachel Alucard from blazblue
    async def _astral_re(self):   
        """Can be combo'd into for guaranteed win."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Clownish Calendula"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/69/BBCS_Rachel_ClownishCalendula.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
###################################################################################################################################################################################################
    @pl.command(name="5a", pass_context=False)  # Platinum the Trinity from blazblue
    async def _5a_pl(self):
        """Randomly attacks with one of three Rock-Paper-Scissors animations, the other two being Rock and Scissors."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"           
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3a/BBCS_Platinum_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
		
            await self.bot.say(embed=embed)
            
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @pl.command(name="5b", pass_context=False)  # Platinum the Trinity from blazblue
    async def _5b_pl(self):   
        """Longest reach ground normal. Moves Plat forward a bit."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/86/BBCS_Platinum_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)		
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @pl.command(name="5c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _5c_pl(self): 
        """Go-to punish normal. Good damage on hit in corner."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/70/BBCS_Platinum_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
	
    @pl.command(name="2a", pass_context=False)  # Platinum the Trinity from blazblue
    async def _2a_pl(self):   
        """Short range, low hitting poke."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Platinum_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @pl.command(name="2b", pass_context=False)  # Platinum the Trinity from blazblue
    async def _2b_pl(self): 
        """Very low hurtbox, easy to low profile certain attacks."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8d/BBCS_Platinum_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @pl.command(name="2c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _2c_pl(self):   
        """We /really/ lost loops."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/19/BBCS_Platinum_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @pl.command(name="6a", pass_context=False)  # Platinum the Trinity from blazblue
    async def _6a_pl(self):  
        """Anti-air."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b0/BBCS_Platinum_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @pl.command(name="6b", pass_context=False)  # Platinum the Trinity from blazblue
    async def _6b_pl(self):  
        """Hip Whip attack, Very unsafe on whiff!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/50/BBCS_Platinum_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @pl.command(name="6c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _6c_pl(self):  
        """Fatal, combo staple. Floats on hit again!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/24/BBCS_Platinum_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @pl.command(name="3c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _3c_pl(self):   
        """Longest range next to 5B, downs on hit."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a7/BBCS_Platinum_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @pl.command(name="ja", pass_context=False)  # Platinum the Trinity from blazblue
    async def _ja_pl(self): 
        """Fast, self-cancelable infinitely."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/78/BBCS_Platinum_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
			
    @pl.command(name="jb", pass_context=False)  # Platinum the Trinity from blazblue
    async def _jb_pl(self):   
        """Very good for fuzzy guarding, and rising overheads."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bd/BBCS_Platinum_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @pl.command(name="jc", pass_context=False)  # Platinum the Trinity from blazblue
    async def _jc_pl(self): 
        """Longest reaching air normal, best normal for spacing."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"

			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6a/BBCS_Platinum_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @pl.command(name="j2c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _j2c_pl(self):   
        """Jump cancelable, but very low hitstun."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('p').get_text()
 			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/63/BBCS_Platinum_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @pl.command(name="5d", pass_context=False)  # Platinum the Trinity from blazblue
    async def _5d_pl(self):   
        """Item GET! 5D and j.D have the same GET sprite. No Item"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('p').get_text()
 			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5D: No Item"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3b/BBCS_Platinum_noItem5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @pl.command(name="jd", pass_context=False)  # Platinum the Trinity from blazblue
    async def _jd_pl(self):   
        """Item GET! 5D and j.D have the same GET sprite.: No Item"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('p').get_text()
 			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.D: No Item"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3b/BBCS_Platinum_noItem5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @pl.command(name="ph", pass_context=False)  # Platinum the Trinity from blazblue
    async def _ph_pl(self):   
        """Piko Hammer: Ground"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            my_table1 = table[35]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]		
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers1.find('th').get_text()
            vrs1 = headers2.find('th').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs1], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Guard Crushes on normal block.')
            embed.title = "Piko Hammer"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f0/BBCS_Platinum_hammer5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Loli SMASH.')
            embed1.title = "Piko Hammer Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/1f/BBCS_Platinum_superHammer5D.png')
            embed1.add_field(name="Hit Frame Data", value=tab1)
            embed1.add_field(name="Quake Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @pl.command(name="aph", pass_context=False)  # Platinum the Trinity from blazblue
    async def _aph_pl(self):   
        """Piko Hammer: Air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            my_table1 = table[37]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            headers4 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[6]
            headers5 = table_body1.find_all('tr')[1]
            headers6 = table_body1.find_all('tr')[2]
            headers7 = table_body1.find_all('tr')[3]
            headers8 = table_body1.find_all('tr')[4]
            headers9 = table_body1.find_all('tr')[5]
            info1 = table_body1.find_all('tr')[6]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]	
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]	
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]	
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]	
            Data7 = [head7.get_text() for head7 in headers7.find_all('td')]	
            Data8 = [head8.get_text() for head8 in headers8.find_all('td')]
            Data9 = [head9.get_text() for head9 in headers9.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()	
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()
            vrs6 = headers6.find('th').get_text()
            vrs7 = headers7.find('th').get_text()
            vrs8 = headers8.find('th').get_text()
            vrs9 = headers9.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')	
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')	
            tab6 = tabulate([["Version", vrs6], ["Damage", Data6[0]], ["Cancel", Data6[1]], ["Guard", Data6[2]], ["Startup", Data6[3]], ["Active", Data6[4]], ["Recovery", Data6[5]], ["Frame Adv.", Data6[6]], ["Attribute", Data6[7]]], tablefmt='simple', stralign='left')
            tab7 = tabulate([["Version", vrs7], ["Damage", Data7[0]], ["Cancel", Data7[1]], ["Guard", Data7[2]], ["Startup", Data7[3]], ["Active", Data7[4]], ["Recovery", Data7[5]], ["Frame Adv.", Data7[6]], ["Attribute", Data7[7]]], tablefmt='simple', stralign='left')	
            tab8 = tabulate([["Version", vrs8], ["Damage", Data8[0]], ["Cancel", Data8[1]], ["Guard", Data8[2]], ["Startup", Data8[3]], ["Active", Data8[4]], ["Recovery", Data8[5]], ["Frame Adv.", Data8[6]], ["Attribute", Data8[7]]], tablefmt='simple', stralign='left')	
            tab9 = tabulate([["Version", vrs9], ["Damage", Data9[0]], ["Cancel", Data9[1]], ["Guard", Data9[2]], ["Startup", Data9[3]], ["Active", Data9[4]], ["Recovery", Data9[5]], ["Frame Adv.", Data9[6]], ["Attribute", Data9[7]]], tablefmt='simple', stralign='left')			
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='We lost... even more loops')
            embed.title = " Air Piko Hammer"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/15/BBCS_Platinum_hammerjD.png')
            embed.add_field(name="Air Hit Frame Data", value=tab)
            embed.add_field(name="Hit lv. 1 Frame Data", value=tab1)
            embed.add_field(name="Hit lv. 2 Frame Data", value=tab2)
            embed.add_field(name="Hit lv. 3 Frame Data", value=tab3)
            embed.add_field(name="Quake Frame Data", value=tab4)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='WE GOT LOOPS (AGAIN)! Comboable on any hit.')
            embed1.title = "Air Hammer Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/74/BBCS_Platinum_superHammerjD.png')
            embed1.add_field(name="Hit Frame Data", value=tab5)
            embed1.add_field(name="Hit lv. 1 Frame Data", value=tab6)
            embed1.add_field(name="Hit lv. 2 Frame Data", value=tab7)
            embed1.add_field(name="Hit lv. 3 Frame Data", value=tab8)
            embed1.add_field(name="Quake Frame Data", value=tab9)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @pl.command(name="mb", pass_context=False)  # Platinum the Trinity from blazblue
    async def _mb_pl(self):   
        """Magical Bat: Ground"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            my_table1 = table[41]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find_all('p')[0].get_text()
            mp2 = info1.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Also good in combos!')
            embed.title = "Magical Bat"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/22/BBCS_Platinum_homerun5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Comboable on normal hit for decent damage.')
            embed1.title = "Magical Bat Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCS_Platinum_superHomerun5D.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @pl.command(name="amb", pass_context=False)  # Platinum the Trinity from blazblue
    async def _amb_pl(self):   
        """Magical Bat: Air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            my_table1 = table[41]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find_all('p')[0].get_text()
            mp2 = info1.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Essentially the same as ground Magical Bat.')
            embed.title = "Air Magical Bat"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e7/BBCS_Platinum_homerunjD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Straight up Thug Clubbing')
            embed1.title = "Air Magical Bat Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCS_Platinum_superHomerunjD.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @pl.command(name="mch", pass_context=False)  # Platinum the Trinity from blazblue
    async def _mch_pl(self):   
        """Magical Cat Hammer: Ground"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            my_table1 = table[45]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Zea')
            embed.title = "Magical Cat Hammer"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f6/BBCS_Platinum_CatStick5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Chill out....')
            embed1.title = "Magical Cat Hammer Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/2/22/BBCS_Platinum_superCatStick5D.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")

    @pl.command(name="amch", pass_context=False)  # Platinum the Trinity from blazblue
    async def _amch_pl(self):   
        """Magical Cat Hammer: Air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            my_table1 = table[45]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='The Drill')
            embed.title = "Air Magical Cat Hammer"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/be/BBCS_Platinum_CatStickjD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Longest range jump attack ever!')
            embed1.title = "Air Magical Cat Hammer Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/0/07/BBCS_Platinum_superCatStickjD.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")				

    @pl.command(name="mfp", pass_context=False)  # Platinum the Trinity from blazblue
    async def _mfp_pl(self):   
        """Magical Frying Pan: Ground"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            my_table1 = table[51]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Spinning...!')
            embed.title = "Air Magical Frying Pan"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/82/BBCS_Platinum_FryingPan5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Pretty good poking and anti-air tool.')
            embed1.title = "Air Magical Frying Pan Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f2/BBCS_Platinum_Fan5D.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @pl.command(name="amfp", pass_context=False)  # Platinum the Trinity from blazblue
    async def _amfp_pl(self):   
        """Magical Frying Pan: Ground"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            my_table1 = table[53]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Instant overheads!')
            embed.title = "Air Magical Frying Pan"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ed/BBCS_Platinum_FryingPanjD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Instant overhead with amazing reach, use it and abuse it.')
            embed1.title = "Air Magical Frying Pan Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/6d/BBCS_Platinum_FanjD.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")

    @pl.command(name="mm", pass_context=False)  # Platinum the Trinity from blazblue
    async def _mm_pl(self):   
        """Magical Missile: Ground"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            my_table1 = table[57]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Great tool for getting in as well as oki.')
            embed.title = "Magical Missile"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/35/BBCS_Platinum_Missile.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Decent zoning and combo tool')
            embed1.title = "Magical Missile Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/6f/BBCS_Platinum_superMissile.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")

    @pl.command(name="amm", pass_context=False)  # Platinum the Trinity from blazblue
    async def _amm_pl(self):   
        """Magical Missile: Air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            my_table1 = table[57]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Great tool for getting in as well as oki.')
            embed.title = "Air Magical Missile"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/35/BBCS_Platinum_Missile.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Decent zoning and combo tool')
            embed1.title = "Air Magical Missile Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/6f/BBCS_Platinum_superMissile.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")

    @pl.command(name="bomb", pass_context=False)  # Platinum the Trinity from blazblue
    async def _bomb_pl(self):   
        """Magical Bomb: Ground"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            my_table1 = table[61]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Decent anti-air and oki tool')
            embed.title = "Magical Bomb"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/90/BBCS_Platinum_Bomb.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='The bigger, the better!')
            embed1.title = "Magical Bomb Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/90/BBCS_Platinum_Bomb.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")

    @pl.command(name="abomb", pass_context=False)  # Platinum the Trinity from blazblue
    async def _abomb_pl(self):   
        """Magical Bomb: Air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            my_table1 = table[61]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Decent anti-air and oki tool')
            embed.title = "Air Magical Bomb"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/90/BBCS_Platinum_Bomb.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='The bigger, the better!')
            embed1.title = "Air Magical Bomb Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/90/BBCS_Platinum_Bomb.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @pl.command(name="mdb", pass_context=False)  # Platinum the Trinity from blazblue
    async def _mdb_pl(self):   
        """Magical Dreamy Box: Ground"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            my_table1 = table[65]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Its a trap!')
            embed.title = "Magical Dreamy Box"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/af/BBCP_Platinum_box.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Its a tarp!')
            embed1.title = "Magical Dreamy Box Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/9f/BBCP_Platinum_Jack-in-the-Box.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @pl.command(name="amdb", pass_context=False)  # Platinum the Trinity from blazblue
    async def _amdb_pl(self):   
        """Magical Dreamy Box: Air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            my_table1 = table[65]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Its a trap!')
            embed.title = "Air Magical Dreamy Box"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/af/BBCP_Platinum_box.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Its a Tarp!')
            embed1.title = "Air Magical Dreamy Box Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/9f/BBCP_Platinum_Jack-in-the-Box.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @pl.command(name="mboom", pass_context=False)  # Platinum the Trinity from blazblue
    async def _mboom_pl(self):   
        """Magical Boomerang: Ground"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            my_table1 = table[69]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Decent zoning tool')
            embed.title = "Magical Boomerang"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/82/BBCF_Platinum_Halo.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Boomerang')
            embed1.title = "Magical Boomerang Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/49/BBCF_Platinum_superHalo.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")

    @pl.command(name="amboom", pass_context=False)  # Platinum the Trinity from blazblue
    async def _amboom_pl(self):   
        """Magical Boomerang: Air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            my_table1 = table[69]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Decent zoning tool')
            embed.title = "Air Magical Boomerang"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/82/BBCF_Platinum_Halo.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Boomerang')
            embed1.title = "Air Magical Boomerang Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/49/BBCF_Platinum_superHalo.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")				
			
    @pl.command(name="ft", pass_context=False)  # Platinum the Trinity from blazblue
    async def _ft_pl(self):   
        """Forward Throw: No longer eats bursts, but it's still a great throw. Wallbound glitch fixed too!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1f/BBCS_Platinum_throw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @pl.command(name="bt", pass_context=False)  # Platinum the Trinity from blazblue
    async def _bt_pl(self):   
        """Back Throw: No longer eats bursts, but it's still a great throw. Wallbound glitch fixed too!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1f/BBCS_Platinum_throw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @pl.command(name="at", pass_context=False)  # Platinum the Trinity from blazblue
    async def _at_pl(self):   
        """Air Throw: Pretty easy to combo, even midscreen!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCS_Platinum_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @pl.command(name="ca", pass_context=False)  # Platinum the Trinity from blazblue
    async def _ca_pl(self):   
        """Plat's CA. One of her few options for escape."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/86/BBCS_Platinum_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @pl.command(name="ct", pass_context=False)  # Platinum the Trinity from blazblue
    async def _ct_pl(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0c/BBCP_Platinum_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @pl.command(name="236a", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s1_pl(self):   
        """Fun with pogos. Usually used to end air combos. Has Fatal Counter and Projectile Invulerable Properties now!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[2]
            info1 =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Persia"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/ba/BBCS_Platinum_AirPersia.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            embed1 = discord.Embed(description='Forward!Using A after 236A')
            embed1.title = "Air Persia Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b5/BBCS_Platinum_AirPersiaA.png')			
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            embed2 = discord.Embed(description='Straight down!Using B after 236A')
            embed2.title = "Air Persia Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/2/25/BBCS_Platinum_AirPersiaB.png')
			
            embed3 = discord.Embed(description='Backward! Using C after 236A')
            embed3.title = "Air Persia Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/0/05/BBCS_Platinum_AirPersiaC.png')
			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except:
            await self.bot.say("No Frame Data Found...")	

    @pl.command(name="236b", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s2_pl(self):   
        """Mami-san, or better known in America as Heart Car. Go-to combo tool. Fatal Counters!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Mami Circular(B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8e/BBCF_Platinum_MamiCircular2.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')			
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	
			
    @pl.command(name="236c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s3_pl(self):   
        """Mami-san, or better known in America as Heart Car. Go-to combo tool. Fatal Counters!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Mami Circular(C)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/22/BBCS_Platinum_MamiCircular.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')			
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @pl.command(name="214a", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s4_pl(self):   
        """Excellent oki, catches rolls."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/dd/BBCS_Platinum_DreamSally.png')
            embed.title = "Dream Sally(A)"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @pl.command(name="214b", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s5_pl(self):   
        """Excellent oki, catches rolls."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/dd/BBCS_Platinum_DreamSally.png')
            embed.title = "Dream Sally(B)"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @pl.command(name="214c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s6_pl(self):   
        """Excellent oki, catches rolls."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/dd/BBCS_Platinum_DreamSally.png')
            embed.title = "Dream Sally(C)"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @pl.command(name="j236c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s7_pl(self):   
        """Dawwww."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[85]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Swallow Moon"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5e/BBCS_Platinum_SwallowMoon.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")			

    @pl.command(name="22c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s8_pl(self):   
        """Friendly Stalker"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[87]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b5/BBCS_Platinum_AirPersiaA.png')
            embed.title = "Falling Melody"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")			
			
    @pl.command(name="214d", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s9_pl(self):
        """Good for 45 degree angle anti-airing and zoning of all kinds!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[89]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            headers4 = table_body.find_all('tr')[5]
            headers5 = table_body.find_all('tr')[6]
            headers6 = table_body.find_all('tr')[7]
            info =  table_body.find_all('tr')[8]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]
            mp1 = [op1.get_text() for op1 in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()
            vrs6 = headers6.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            tab6 = tabulate([["Version", vrs6], ["Damage", Data6[0]], ["Cancel", Data6[1]], ["Guard", Data6[2]], ["Startup", Data6[3]], ["Active", Data6[4]], ["Recovery", Data6[5]], ["Frame Adv.", Data6[6]], ["Attribute", Data6[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] +"```"
            mpB = "```" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Mystique Momo"
            embed.add_field(name="Melee Item Frame Data", value=tab)
            embed.add_field(name="Magical Missile Frame Data", value=tab1)
            embed.add_field(name="Magical Missile Special Ground Frame Data", value=tab2)
            embed.add_field(name="Magical Bomb Frame Data", value=tab3)
            embed.add_field(name="Magical Bomb Special Frame Data", value=tab4)
            embed.add_field(name="Magical Dreamy Box Rod Frame Data", value=tab5)
            embed.add_field(name="Magical Dreamy Box Special Frame Data", value=tab6)
			
            embed1 = discord.Embed()
            embed1.title = "Mystique Momo Cont."
            embed1.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Mystique Momo Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/b/b1/BBCS_Platinum_MystiqueMomo.png')
            embed2.add_field(name="AP Cont.", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @pl.command(name="41236d", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s10_pl(self):   
        """Dashing command grab! Refills current item count (or equips new one) on successful hit."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[91]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/83/BBCS_Platinum_DramaticSammy.png')
            embed.title = "Dramatic Sammy"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")

    @pl.command(name="28d", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s11_pl(self):   
        """Loli bait"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[93]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Happy Magicka"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d6/BBCP_Platinum_HappyMagicka1.png')
            embed.add_field(name="Catch Frame Data", value=tab)
            embed.add_field(name="Attack Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Happy Magicka"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a5/BBCP_Platinum_HappyMagicka2.png')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")				
			
    @pl.command(name="632146c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _dd1_pl(self):
        """(AIR OK)Invuln until the first hit, but not afterwards. Clashes with many attacks due to the amount of hits in rapid succession."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[95]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Cure Dot Typhoon(Air OK)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/29/BBCS_Platinum_CureDotTyphoon.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Ground OD Frame Data", value=tab2)
            embed.add_field(name="Air OD Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @pl.command(name="236236d", pass_context=False)  # Platinum the Trinity from blazblue
    async def _dd2_pl(self):
        """Invuln during superflash, but has one frame of recovery, so using as a ghetto DP is very discouraged."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[97]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Platinum_MiracleJeanne.png')
            embed.title = "Miracle Jeanne"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")			

    @pl.command(name="abcd", pass_context=False)  # Platinum the Trinity from blazblue
    async def _abcd_pl(self): 
        """Vroom, Vroom"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[99]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Angelic Blast"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e5/BBCF_Platinum_BlastAngel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
			
    @pl.command(name="236236c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _astral_pl(self):   
        """STARLIGHT BREAKER"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[101]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Shining Layered Force"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1c/BBCS_Platinum_ShiningLayeredForce.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
###################################################################################################################################################################################################
    @ni.command(name="5a", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _5a_ni(self):
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"        
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5a/BBCF_Nine_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
		
            await self.bot.say(embed=embed)
            
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @ni.command(name="5b", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _5b_ni(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"    
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1a/BBCF_Nine_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)		
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @ni.command(name="5c", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _5c_ni(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9d/BBCF_Nine_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
	
    @ni.command(name="2a", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _2a_ni(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/60/BBCF_Nine_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @ni.command(name="2b", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _2b_ni(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/02/BBCF_Nine_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @ni.command(name="2c", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _2c_ni(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/31/BBCF_Nine_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @ni.command(name="6a", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _6a_ni(self):  
        """Main Anti-air."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()					

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/61/BBCF_Nine_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ni.command(name="6b", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _6b_ni(self):  
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0c/BBCF_Nine_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @ni.command(name="6c", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _6c_ni(self):  
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6b/BBCF_Nine_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ni.command(name="4a", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _4a_ni(self):  
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "4a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/de/BBCF_Nine_4A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ni.command(name="4b", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _4b_ni(self):  
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "4b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/73/BBCF_Nine_4B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ni.command(name="4c", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _4c_ni(self):  
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "4c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/97/BBCF_Nine_4C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ni.command(name="3c", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _3c_ni(self):   
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1a/BBCF_Nine_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @ni.command(name="ja", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _ja_ni(self): 
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/da/BBCF_Nine_j.A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
			
    @ni.command(name="jb", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _jb_ni(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/02/BBCF_Nine_j.B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @ni.command(name="jc", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _jc_ni(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"

			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/96/BBCF_Nine_j.C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @ni.command(name="j2a", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _j2a_ni(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/08/BBCF_Nine_j.2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @ni.command(name="j2b", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _j2b_ni(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/36/BBCF_Nine_j.2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @ni.command(name="j2c", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _j2c_ni(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('li').get_text()		
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1c/BBCF_Nine_j.2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @ni.command(name="es", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _es_ni(self):   
        """Everlasting Schorl"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('p').get_text() 			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')		
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Everlasting Schorl"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a5/BBCF_Nine_Shawl.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @ni.command(name="wxn", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _wxn_ni(self):   
        """Lapis Lazuli of Lamentation"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]		
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()			
            mp1 = info.find('li').get_text()	
            mp2 = [op.get_text() for op in info1.find_all('li')]
            mp3 = info1.find('p').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpC = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Lapis Lazuli of Lamentation"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c3/BBCF_Nine_LapisLazuli.png')
            embed.add_field(name="Wx1 Frame Data", value=tab)
            embed.add_field(name="Wx2 Frame Data", value=tab1)
            embed.add_field(name="Wx2 Attack Props:", value=mpA)
            embed.add_field(name="Wx3 Frame Data", value=tab2)
            embed.add_field(name="Wx3 Attack Props:", value=mpB)
            embed.add_field(name="Additional Attack Props:", value=mpC)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @ni.command(name="axn", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _axn_ni(self):   
        """Emerald of Enmity"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]		
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()			
            mp1 = info.find('li').get_text()	
            mp2 = [op.get_text() for op in info1.find_all('li')]
            mp3 = info1.find('p').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            mpC = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Emerald of Enmity"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f8/BBCF_Nine_Emerald.png')
            embed.add_field(name="Ax1 Frame Data", value=tab)
            embed.add_field(name="Ax2 Frame Data", value=tab1)
            embed.add_field(name="Ax2 Attack Props:", value=mpA)
            embed.add_field(name="Ax3 Frame Data", value=tab2)
            embed.add_field(name="Ax3 Attack Props:", value=mpB)
            embed.add_field(name="Additional Attack Props:", value=mpC)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @ni.command(name="fxn", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _fxn_ni(self):   
        """Coral of Catastrophe"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]		
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()			
            mp1 = info.find('li').get_text()	
            mp2 = [op.get_text() for op in info1.find_all('li')]
            mp3 = info1.find('p').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpC = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Coral of Catastrophe"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d8/BBCF_Nine_Coral.png')
            embed.add_field(name="Fx1 Frame Data", value=tab)
            embed.add_field(name="Fx2 Frame Data", value=tab1)
            embed.add_field(name="Fx2 Attack Props:", value=mpA)
            embed.add_field(name="Fx3 Frame Data", value=tab2)
            embed.add_field(name="Fx3 Attack Props:", value=mpB)
            embed.add_field(name="Additional Attack Props:", value=mpC)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @ni.command(name="wa", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _wa_ni(self):   
        """Heliodor of Humility"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]				
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]			

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Heliodor of Humility"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/ce/BBCF_Nine_Heliodor.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @ni.command(name="wf", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _wf_ni(self):   
        """Amethyst of Annihilation"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]				
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Amethyst of Annihilation"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/18/BBCF_Nine_Amethyst.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @ni.command(name="af", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _af_ni(self):   
        """Citrine of Change"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()			
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')			
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Citrine of Change"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e3/BBCF_Nine_Citrine.png')
            embed.add_field(name="Cast Frame Data", value=tab)
            embed.add_field(name="K.M Frame Data", value=tab1)
            embed.add_field(name="R.P Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @ni.command(name="wwa", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _wwa_ni(self):   
        """Celestite of the Covenant"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]				
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Celestite of the Covenant"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c6/BBCF_Nine_Celestite.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")			

    @ni.command(name="wwf", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _wwf_ni(self):   
        """Taaffeite of Temptation"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]				
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Taaffeite of Temptation"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/85/BBCF_Nine_Taafeite.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @ni.command(name="aaw", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _aaw_ni(self):   
        """Andradite of Accord"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]				
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Andradite of Accord"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0c/BBCF_Nine_Andradite.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @ni.command(name="aaf", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _aaf_ni(self):   
        """Uvarovite of Undoing"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]				
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Uvarovite of Undoing"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCF_Nine_Uvarovite_of_Destruction.jpg')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @ni.command(name="ffw", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _ffw_ni(self):   
        """Kunzite of Keep Breaker"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]				
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```"
			
            embed = discord.Embed(description='Also goes by Rock of Guard Breaking')
            embed.title = "Kunzite of Keep Breaker"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/12/BBCF_Nine_Kunzite.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @ni.command(name="ffa", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _ffa_ni(self):   
        """Morganite of Malice"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]				
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Morganite of Malice"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCF_Nine_Morganite.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @ni.command(name="waf", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _waf_ni(self):   
        """Nephirite of Nullification"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]				
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Nephirite of Nullification"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fb/BBCF_Nine_Nephirite.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @ni.command(name="ft", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _ft_ni(self):   
        """Forward Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/80/BBCF_Nine_GroundThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @ni.command(name="bt", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _bt_ni(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/80/BBCF_Nine_GroundThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @ni.command(name="at", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _at_ni(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/be/BBCF_Nine_AirThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ni.command(name="ca", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _ca_ni(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/00/BBCF_Nine_CounterAssalut.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @ni.command(name="ct", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _ct_ni(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/36/BBCF_Nine_CrushTrigger.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @ni.command(name="214a", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _s1_ni(self):   
        """(AIR OK) KAMAKAZI"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [op.get_text() for op in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Crimson Raider"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/eb/BBCF_Nine_CrimsonRaider.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')			
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @ni.command(name="214b", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _s2_ni(self):   
        """Anti-Air special"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Mauvette Roar"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCF_Nine_MauvetteRoar.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @ni.command(name="214c", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _s3_ni(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Navy Pressure"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e7/BBCF_Nine_NavyPressure.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @ni.command(name="236d", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _s4_ni(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/81/BBCF_Nine_SeaMossGate.png')
            embed.title = "Seamoss Gate"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @ni.command(name="214d", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _s5_ni(self):   
        """(AIR Ok)The DP of DPs"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[85]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='Air OK')
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0c/BBCF_Nine_FluxNurture.png')
            embed.title = "Flax Nurture"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")
				
			
    @ni.command(name="236236a", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _dd1_ni(self):
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[87]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Flame Punisher"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2c/BBCF_Nine_FlamePunisher.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @ni.command(name="236236b", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _dd2_ni(self):
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[89]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[2]
            info1 =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [op.get_text() for op in info1.find_all('li')]
            mp3 = info1.find('p').get_text()
            mp1 = info.find('li').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            mpC = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Cardinal Nova"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/30/BBCF_Nine_CardinalNova.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            embed.add_field(name="Additional Info:", value=mpC, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")				

    @ni.command(name="236236c", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _dd3_ni(self):
        """Reverse Witch Hunt?"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[91]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Azurite Inferno"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/37/BBCF_Nine_AzuriteInferno.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ni.command(name="abcd", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _abcd_ni(self): 
        """Need a hand?"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[93]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Scarlet Vein"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/01/BBCF_Nine_ScarletVein.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
			
    @ni.command(name="236236d", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _astral_ni(self):   
        """OVERKILL.... KILLL...KILLLLLLL"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[95]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Colorless Void"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/34/BBCF_Nine_ColorlessVoid.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")				
###################################################################################################################################################################################################
    @na.command(name="5a", pass_context=False)  # Naoto from blazblue
    async def _5a_na(self):
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            my_table1 = table[3]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp4 = info1.find('p').get_text()
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "```" 
            mpAA = "```" + "*" + mp1[3] + "\n" + "*" + mp2[2] + "\n" + "Title Links to Example Video" + "```" 
            mpAAA = "```" + "*" + mp2[4] + "\n" + "Title Links to Example Video" + "```" 
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"  			
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ac/BBCF_Naoto_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Surprisingly an amazing starter')
            embed1.title = "5aa"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCF_Naoto_5AA.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            embed2 = discord.Embed(description='Optimal 5A BnBs')
            embed2.title = "Bread and Butter."
            embed2.url='https://twitter.com/QCF_Odin/status/816709260184879105?s'
            embed2.add_field(name="Mid Screen Enhanced", value=mpAA)
			
            embed3 = discord.Embed(description='Full Screen 50 Heat BnBs')
            embed3.title = "Bread and Butter Cont."
            embed3.url='https://mobile.twitter.com/QCF_Odin/status/841880497613635585/video/1'
            embed3.add_field(name="Mid Screen OD Full HP", value=mpAAA)
		
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)           
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @na.command(name="5b", pass_context=False)  # Naoto from blazblue
    async def _5b_na(self):   
        """Sweet Chin Music"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [op.get_text() for op in info.find_all('p')]
            mp1 = info.find('li').get_text()
            mp3 = [aba.get('href') for aba in info.find_all('a')]
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "```" 
            mpB = "```" + "*" + mp2[2] + "\n" + "Title Links to Example Video" + "```" 
            mpC = "```" + "*" + mp2[4] + "\n" + "Title Links to Example Video" + "```"  
            mpD = "```" + "*" + mp2[6] + "\n" + "Title Links to Example Video" + "```"   
            mpE = "```" + "*" + mp2[8] + "\n" + "Title Links to Example Video" + "```"  			
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/56/BBCF_Naoto_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Mid Screen BnBs')
            embed1.title = "Bread and Butter"
            embed1.url='https://mobile.twitter.com/QCF_Odin/status/816646607013814273/video/1'
            embed1.add_field(name="Mid Screen", value=mpB)
			
            embed2 = discord.Embed(description='Mid Screen Enhanced BnBs')
            embed2.title = "Bread and Butter Cont."
            embed2.url='https://mobile.twitter.com/QCF_Odin/status/816678251359830016/video/1'
            embed2.add_field(name="Mid Screen Enhanced", value=mpC)
			
            embed3 = discord.Embed(description='Mid Screen OD BnBs')
            embed3.title = "Bread and Butter Cont."
            embed3.url='https://mobile.twitter.com/QCF_Odin/status/816692345638883329/video/1'
            embed3.add_field(name="Mid Screen OD Full HP", value=mpD)
			
            embed4 = discord.Embed(description='Mid Screen BnBs')
            embed4.title = "Bread and Butter Cont."
            embed4.url='https://mobile.twitter.com/QCF_Odin/status/816700047698128896/video/1'
            embed4.add_field(name="Corner", value=mpE)
			
            await self.bot.say(embed=embed)	
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)				
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @na.command(name="5c", pass_context=False)  # Naoto from blazblue
    async def _5c_na(self): 
        """Pretty decent neutral tool."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ec/BBCF_Naoto_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
	
    @na.command(name="2a", pass_context=False)  # Naoto from blazblue
    async def _2a_na(self):   
        """ITS A LOW!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f5/BBCF_Naoto_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @na.command(name="2b", pass_context=False)  # Naoto from blazblue
    async def _2b_na(self): 
        """Another Good Low"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/86/BBCF_Naoto_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @na.command(name="2c", pass_context=False)  # Naoto from blazblue
    async def _2c_na(self):   
        """Anti-air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/79/BBCF_Naoto_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @na.command(name="6a", pass_context=False)  # Naoto from blazblue
    async def _6a_na(self):  
        """Use this to dunk on people's heads."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/70/BBCF_Naoto_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @na.command(name="6b", pass_context=False)  # Naoto from blazblue
    async def _6b_na(self):  
        """No Low/Throw Zone"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f6/BBCF_Naoto_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @na.command(name="6c", pass_context=False)  # Naoto from blazblue
    async def _6c_na(self):  
        """CRACKSHOO- I mean..It is"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/14/BBCF_Naoto_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @na.command(name="3c", pass_context=False)  # Naoto from blazblue
    async def _3c_na(self):   
        """Sweep. Dont get hit by Dash Sweep"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f0/BBCF_Naoto_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @na.command(name="ja", pass_context=False)  # Naoto from blazblue
    async def _ja_na(self): 
        """Air to Air"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/30/BBCF_Naoto_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
			
    @na.command(name="jb", pass_context=False)  # Naoto from blazblue
    async def _jb_na(self):   
        """The New Shoto kick"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/46/BBCF_Naoto_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @na.command(name="jc", pass_context=False)  # Naoto from blazblue
    async def _jc_na(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"

			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/53/BBCF_Naoto_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
				
			
    @na.command(name="5d", pass_context=False)  # Naoto from blazblue
    async def _5d_na(self):   
        """Blood Sword and Blood Sword that Guard Breaks (Charged)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]			
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = [po.get_text() for po in info.find_all('p')]	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')	
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp2[3] + "```"
            mpC = "```" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp1[8] + "\n" + "*" + mp2[6] + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Uncharged Attack Props:", value=mpA)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Charged Attack Props:", value=mpB)
			
            embed1 = discord.Embed()
            embed1.title = "OD 5D"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/9c/BBCF_Naoto_5D.png')
            embed1.add_field(name="Uncharged Frame Data", value=tab2)
            embed1.add_field(name="Charged Frame Data", value=tab3)
            embed1.add_field(name="Charged Attack Props:", value=mpC)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @na.command(name="2d", pass_context=False)  # Naoto from blazblue
    async def _2d_na(self):   
        """Low Blood Sword with a small hurtbox"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]			
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')	
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/78/BBCF_Naoto_2D.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="OD Uncharged Frame Data", value=tab2)
            embed.add_field(name="OD Charged Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @na.command(name="6d", pass_context=False)  # Naoto from blazblue
    async def _6d_na(self):   
        """Dont. Get. Hit"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]			
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')	
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/67/BBCF_Naoto_6D.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="OD Uncharged Frame Data", value=tab2)
            embed.add_field(name="OD Charged Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @na.command(name="jd", pass_context=False)  # Naoto from blazblue
    async def _jd_na(self):   
        """Jumping blood sword and "This is my Area" Sword"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]			
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')	
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9b/BBCF_Naoto_jD.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="OD Uncharged Frame Data", value=tab2)
            embed.add_field(name="OD Charged Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		


    @na.command(name="ft", pass_context=False)  # Naoto from blazblue
    async def _ft_na(self):   
        """Forward Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fa/BBCF_Naoto_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @na.command(name="bt", pass_context=False)  # Naoto from blazblue
    async def _bt_na(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/31/BBCF_Naoto_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @na.command(name="at", pass_context=False)  # Naoto from blazblue
    async def _at_na(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[5]
            info =  table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/11/BBCF_Naoto_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @na.command(name="ca", pass_context=False)  # Naoto from blazblue
    async def _ca_na(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ec/BBCF_Naoto_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @na.command(name="ct", pass_context=False)  # Naoto from blazblue
    async def _ct_na(self):   
        """Crush Trigger: HOL UP! DAB"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/98/BBCF_Naoto_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @na.command(name="236b", pass_context=False)  # Naoto from blazblue
    async def _s1_na(self):   
        """Rekka. Has more strict inputs than a college professor."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            my_table1 = table[45]
            my_table2 = table[47]
            my_table3 = table[49]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            table_body3 = my_table3.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
            headers3 = table_body2.find_all('tr')[1]
            info2 =  table_body2.find_all('tr')[2]
            headers4 = table_body2.find_all('tr')[3]
            info3 =  table_body2.find_all('tr')[4]
            headers5 = table_body3.find_all('tr')[1]
            info4 =  table_body3.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            mp2 = [po.get_text() for po in info.find_all('li')]
            mp3 = info1.find('li').get_text()
            mp4 = info1.find('p').get_text()
            mp5 = info2.find('li').get_text()
            mp6 = info2.find('p').get_text()
            mp7 = [op1.get_text() for op1 in info3.find_all('li')]
            mp8 = info3.find('p').get_text()
            mp9 = info4.find('p').get_text()
            vrs = headers1.find('th').get_text()
            vrs1 = headers2.find('th').get_text()
            vrs2 = headers3.find('th').get_text()
            vrs3 = headers4.find('th').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs1], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs2], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs3], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" +  mp1[1] + "\n" + "*" + mp1[2] + "\n" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
            mpC = "```" + "*" + mp5 + "\n" + "*" + mp6 + "```"
            mpD = "```" + "*" + mp7[0] + "\n" + "*" + mp7[1] + "\n" + "*" + mp8 + "```"
            mpE = "```" + "*" + mp9 + "```"
			
            embed = discord.Embed()
            embed.title = "Banishing Fang"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4a/BBCF_Naoto_BanishingFang.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed(description='236B after Banishing Fang')
            embed1.title = "Banishing Fang: Roar"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/5/52/BBCF_Naoto_BanishingFangRoar.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Enhanced Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Deceptive Hitbox, WE WERE WRONG ABOUT THE FATAL. SO SO WRONG.')	

            embed2 = discord.Embed(description='236B after Banishing Fang: Roar')
            embed2.title = "Banishing Fang: Bash"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/e/e7/BBCF_Naoto_BanishingFangBash.png')
            embed2.add_field(name="Frame Data", value=tab3)
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')
            embed2.add_field(name="Enhanced Frame Data", value=tab4)
            embed2.add_field(name="Enhanced Attack Props:", value=mpD, inline='true')
            embed2.set_footer(text='Normal rekka ender, Dont get Fataled By this')

            embed3 = discord.Embed(description='236C after Banishing Fang: Roar')
            embed3.title = "Banishing Fang: Raid"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/8/8f/BBCF_Naoto_BanishingFangRaid.png')
            embed3.add_field(name="Frame Data", value=tab5)
            embed3.add_field(name="Attack Props:", value=mpE, inline='true')	
            embed3.set_footer(text='Alternate rekka ender')				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except:
            await self.bot.say("No Frame Data Found...")	

    @na.command(name="623c", pass_context=False)  # Naoto from blazblue
    async def _s2_na(self):   
        """Very, very solid DP. Not Inferno Divider, though."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            my_table1 = table[53]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Inferno Crusader(C)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/16/BBCF_Naoto_InfernoCrusader_D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Enhanced Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='2C after Inferno Crusader')
            embed1.title = "Overhead Kick"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/97/BBCF_Naoto_OverheadKick.png')
            embed1.add_field(name="Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @na.command(name="623d", pass_context=False)  # Naoto from blazblue
    async def _s3_na(self):   
        """Very, very solid DP. Not Inferno Divider, though."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            my_table1 = table[53]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[4]
            headers1 = table_body.find_all('tr')[5]
            info =  table_body.find_all('tr')[6]
            headers2 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp2 = [op.get_text() for op in info.find_all('p')]
            mp1 = info.find('li').get_text()
            mp3 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Inferno Crusader(D)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/16/BBCF_Naoto_InfernoCrusader_D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Enhanced Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='2C after Inferno Crusader')
            embed1.title = "Overhead Kick"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/97/BBCF_Naoto_OverheadKick.png')
            embed1.add_field(name="Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")

    @na.command(name="214d", pass_context=False)  # Naoto from blazblue
    async def _s4_na(self):   
        """S P A C I N G"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b9/BBCF_Naoto_SlashKaid.png')
            embed.title = "Slash Kaid"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Enhanced Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	

    @na.command(name="214a", pass_context=False)  # Naoto from blazblue
    async def _s5_na(self):   
        """Is that a Jojo's Reference?"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            my_table1 = table[59]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Shift Sway"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c0/BBCF_Naoto_ShiftSway.png')
            embed.add_field(name="Frame Data", value=tab)
			
            embed1 = discord.Embed()
            embed1.title = "Shift Sway Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/37/BBCF_Naoto_ShiftSwayEnhanced.png')
            embed.add_field(name="Enhanced Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed2 = discord.Embed(description='28A after Shift Sway')
            embed2.title = "Phantom Pain"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/3/3a/BBCF_Naoto_PhantomPain.png')
            embed2.add_field(name="Frame Data", value=tab2)
            embed2.add_field(name="Attack Props:", value=mpB, inline='true')
            embed2.set_footer(text='Please Dont jump or stand')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found.....")
				
			
    @na.command(name="632146b", pass_context=False)  # Naoto from blazblue
    async def _dd1_na(self):
        """Rock Howard would be proud"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
            headers3 = table_body.find_all('tr')[5]
            headers4 = table_body.find_all('tr')[6]
            info1 =  table_body.find_all('tr')[7]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp3 = info1.find('li').get_text()
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Divine Smasher"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/95/BBCF_Naoto_DivineSmasher.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Enhanced Frame Data", value=tab1)
            embed.add_field(name="OD Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            embed1 = discord.Embed()
            embed1.title = "Air Divine Smasher"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/0/00/BBCF_Naoto_DivineSmasher2.png')
            embed1.add_field(name="Frame Data", value=tab3)
            embed1.add_field(name="OD Frame Data", value=tab4)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @na.command(name="632146d", pass_context=False)  # Naoto from blazblue
    async def _dd2_na(self):
        """Pictured: First part of the move"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body.find_all('tr')[4]
            headers3 = table_body.find_all('tr')[5]
            info1 =  table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp3 = info1.find('li').get_text()
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Divine Reaper"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/35/BBCF_Naoto_DivineReaper.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Projectile Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            embed1 = discord.Embed()
            embed1.title = "OverDrive Divine Reaper"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/35/BBCF_Naoto_DivineReaper.png')
            embed1.add_field(name="Frame Data", value=tab2)
            embed1.add_field(name="Projectile Frame Data", value=tab3)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")				
			
    @na.command(name="abcd", pass_context=False)  # Naoto from blazblue
    async def _abcd_na(self): 
        """Cool Move, Whack Knockdown"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Grim of Phantom (G.O.P)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/49/BBCF_Naoto_GrimOfPhantom.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
			
    @na.command(name="2141236c", pass_context=False)  # Naoto from blazblue
    async def _astral_na(self):   
        """-LITERALLY- Black Onslaught"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Edge of Eternity"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/53/BBCF_Naoto_EdgeoOfEternity.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
###################################################################################################################################################################################################
    @ma.command(name="5a", pass_context=False)  # Makoto from blazblue
    async def _5a_ma(self):
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [op.get_text() for op in info.find_all('li')]
            mp1 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 			
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/30/BBCS_Makoto_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
		
            await self.bot.say(embed=embed)
            
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @ma.command(name="5b", pass_context=False)  # Makoto from blazblue
    async def _5b_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp2[0] + "\n" + "\n" + mp1[1] + "\n" + "*" + mp2[1] + "```" 
			
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2b/BBCS_Makoto_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)		
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @ma.command(name="5c", pass_context=False)  # Makoto from blazblue
    async def _5c_ma(self): 
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            my_table1 = table[7]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info1.find('p').get_text()
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/54/BBCS_Makoto_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5cc"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/5/57/BBCS_Makoto_5CC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
	
    @ma.command(name="2a", pass_context=False)  # Makoto from blazblue
    async def _2a_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/11/BBCS_Makoto_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @ma.command(name="2b", pass_context=False)  # Makoto from blazblue
    async def _2b_ma(self): 
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e5/BBCS_Makoto_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @ma.command(name="2c", pass_context=False)  # Makoto from blazblue
    async def _2c_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp2[0] + "\n" + mp2[1] + "\n" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fd/BBCS_Makoto_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @ma.command(name="6a", pass_context=False)  # Makoto from blazblue
    async def _6a_ma(self):  
        """Anti-Air"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = info.find('li').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/29/BBCS_Makoto_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ma.command(name="6b", pass_context=False)  # Makoto from blazblue
    async def _6b_ma(self):  
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            my_table1 = table[19]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp3 = info1.find('p').get_text()
            mp2 = info.find('li').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + mp1[1] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/06/BBCS_Makoto_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6b > C"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/5/57/BBCS_Makoto_5CC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")

    @ma.command(name="6c", pass_context=False)  # Makoto from blazblue
    async def _6c_ma(self):  
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3d/BBCS_Makoto_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ma.command(name="3c", pass_context=False)  # Makoto from blazblue
    async def _3c_ma(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [op.get_text() for op in info.find_all('li')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
            mpB = "```" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Feint Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "3c Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/8a/BBCS_Makoto_3C.png')
            embed1.add_field(name="AP Cont.", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @ma.command(name="ja", pass_context=False)  # Makoto from blazblue
    async def _ja_ma(self): 
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCS_Makoto_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
			
    @ma.command(name="jb", pass_context=False)  # Makoto from blazblue
    async def _jb_ma(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c1/BBCS_Makoto_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @ma.command(name="jc", pass_context=False)  # Makoto from blazblue
    async def _jc_ma(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            my_table1 = table[31]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/71/BBCS_Makoto_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "J.CC"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/fb/BBCS_Makoto_jCC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ma.command(name="j2c", pass_context=False)  # Makoto from blazblue
    async def _j2c_ma(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0e/BBCS_Makoto_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
				
			
    @ma.command(name="5d", pass_context=False)  # Makoto from blazblue
    async def _5d_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]			
            mp2 = info.find('li').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')	
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0e/BBCS_Makoto_5D.png')
            embed.add_field(name="Lv.1 Frame Data", value=tab)
            embed.add_field(name="Lv.2 Frame Data", value=tab1)
            embed.add_field(name="Lv.3 Frame Data", value=tab2)
            embed.add_field(name="Lv.G Frame Data", value=tab3)
            embed.add_field(name="Charged Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @ma.command(name="2d", pass_context=False)  # Makoto from blazblue
    async def _2d_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]			
            mp2 = info.find('li').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')	
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/43/BBCS_Makoto_2D.png')
            embed.add_field(name="Lv.1 Frame Data", value=tab)
            embed.add_field(name="Lv.2 Frame Data", value=tab1)
            embed.add_field(name="Lv.3 Frame Data", value=tab2)
            embed.add_field(name="Lv.G Frame Data", value=tab3)
            embed.add_field(name="Charged Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	


    @ma.command(name="jd", pass_context=False)  # Makoto from blazblue
    async def _jd_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]			
            mp2 = info.find('li').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')	
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/78/BBCS_Makoto_jD.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="OD Uncharged Frame Data", value=tab2)
            embed.add_field(name="OD Charged Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		


    @ma.command(name="ft", pass_context=False)  # Makoto from blazblue
    async def _ft_ma(self):   
        """Forward Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/31/BBCS_Makoto_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @ma.command(name="bt", pass_context=False)  # Makoto from blazblue
    async def _bt_ma(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/59/BBCS_Makoto_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @ma.command(name="at", pass_context=False)  # Makoto from blazblue
    async def _at_ma(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()


            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/04/BBCS_Makoto_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @ma.command(name="ca", pass_context=False)  # Makoto from blazblue
    async def _ca_ma(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3d/BBCS_Makoto_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @ma.command(name="ct", pass_context=False)  # Makoto from blazblue
    async def _ct_ma(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b7/BBCP_Makoto_CrushTrigger1.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @ma.command(name="236a", pass_context=False)  # Makoto from blazblue
    async def _s1_ma(self):   
        """Projectile."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            my_table1 = table[53]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            headers3 = table_body1.find_all('tr')[3]
            headers4 = table_body1.find_all('tr')[4]
            info1 =  table_body1.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            mp2 = [po.get_text() for po in info.find_all('li')]
            mp3 = [op1.get_text() for op1 in info1.find_all('p')]
            vrs = headers1.find('th').get_text()
            vrs1 = headers2.find('th').get_text()
            vrs2 = headers3.find('th').get_text()
            vrs3 = headers4.find('th').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs1], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs2], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs3], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" +  mp1[1] + "\n" + "*" + mp2[0] + "\n" + mp2[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Comet Cannon"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ef/BBCS_Makoto_CometCannon.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed(description='D during Comet Cannon')
            embed1.title = "Break Shot"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/e9/BBCS_Makoto_BreakShot.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab1)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab2)
            embed1.add_field(name="Lv. 3 Frame Data", value=tab3)
            embed1.add_field(name="Lv. G Frame Data", value=tab4)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Projectile.')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")	

    @ma.command(name="623c", pass_context=False)  # Makoto from blazblue
    async def _s2_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            my_table1 = table[57]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            headers3 = table_body1.find_all('tr')[3]
            headers4 = table_body1.find_all('tr')[4]
            info1 =  table_body1.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            mp2 = [op1.get_text() for op1 in info1.find_all('p')]
            vrs = headers1.find('th').get_text()
            vrs1 = headers2.find('th').get_text()
            vrs2 = headers3.find('th').get_text()
            vrs3 = headers4.find('th').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs1], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs2], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs3], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Corona Upper"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1f/BBCS_Makoto_CoronaUpper.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='D during Corona Upper')
            embed1.title = "Meteor Dive"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/60/BBCS_Makoto_MeteorDive.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab1)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab2)
            embed1.add_field(name="Lv. 3 Frame Data", value=tab3)
            embed1.add_field(name="Lv. G Frame Data", value=tab4)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @ma.command(name="j623c", pass_context=False)  # Makoto from blazblue
    async def _s3_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            my_table1 = table[61]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            headers3 = table_body1.find_all('tr')[3]
            headers4 = table_body1.find_all('tr')[4]
            info1 =  table_body1.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers1.find('th').get_text()
            vrs1 = headers2.find('th').get_text()
            vrs2 = headers3.find('th').get_text()
            vrs3 = headers4.find('th').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs1], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs2], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs3], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Corona Upper(Air)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1f/BBCS_Makoto_CoronaUpper.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='D during Corona Upper')
            embed1.title = "Meteor Dive"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/60/BBCS_Makoto_MeteorDive.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab1)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab2)
            embed1.add_field(name="Lv. 3 Frame Data", value=tab3)
            embed1.add_field(name="Lv. G Frame Data", value=tab4)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @ma.command(name="214d", pass_context=False)  # Makoto from blazblue
    async def _s4_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            headers2 = table_body.find_all('tr')[4]
            headers3 = table_body.find_all('tr')[5]
            headers4 = table_body.find_all('tr')[6]
            headers5 = table_body.find_all('tr')[7]
            info =  table_body.find_all('tr')[2]
            info1 =  table_body.find_all('tr')[8]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [op.get_text() for op in info1.find_all('li')]
            mp3 = [po.get_text() for po in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/ce/BBCS_Makoto_SpaceCounter.png')
            embed.title = "Space Counter"
            embed.add_field(name="Parry Frame Data", value=tab)
            embed.add_field(name="Parry Props:", value=mpA, inline='true')
            embed.add_field(name="Catch Frame Data", value=tab1)
            embed.add_field(name="Lv. 1 Frame Data", value=tab2)
            embed.add_field(name="Lv. 2 Frame Data", value=tab3)
            embed.add_field(name="Lv. 3 Frame Data", value=tab4)
            embed.add_field(name="Lv. G Frame Data", value=tab5)
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found...")	
			
    @asteroidA.command(name="a", pass_context=False)  # Makoto from blazblue
    async def _s5_ma(self):   
        """A after Asteroid Vision A: Break"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            my_table1 = table[67]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[4]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp3 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp2[0] + "\n" + mp2[1] + "\n" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Asteroid Vision(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Makoto_AsteroidVision.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='A after Asteroid Vision A')
            embed1.title = "Break"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/4b/BBCS_Makoto_Break.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....") 

    @asteroidA.command(name="b", pass_context=False)  # Makoto from blazblue
    async def _s6_ma(self):   
        """B after Asteroid Vision A: Eclipse Turn"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            my_table1 = table[69]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[4]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp3 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp2[0] + "\n" + mp2[1] + "\n" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Asteroid Vision(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Makoto_AsteroidVision.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Eclipse Turn"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/e8/BBCS_Makoto_Turn.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....") 

    @asteroidA.command(name="c", pass_context=False)  # Makoto from blazblue
    async def _s7_ma(self):   
        """C after Asteroid Vision A: Rush"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            my_table1 = table[71]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[4]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp3 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp2[0] + "\n" + mp2[1] + "\n" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + mp3[2] + "\n" + mp3[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Asteroid Vision(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Makoto_AsteroidVision.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Rush"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Makoto_InfiniteRush.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....") 	

    @asteroidA.command(name="d", pass_context=False)  # Makoto from blazblue
    async def _s8_ma(self):   
        """D after Asteroid Vision A: Cosmic Ray"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            my_table1 = table[73]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[4]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            headers3 = table_body1.find_all('tr')[3]
            headers4 = table_body1.find_all('tr')[4]
            info1 =  table_body1.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp3 = [po1.get_text() for po1 in info1.find_all('p')]
            mp4 = info1.find('li').get_text()
            mp5 = info1.find('pre').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp2[0] + "\n" + mp2[1] + "\n" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + mp3[1] + "\n" + mp4 + "\n" + "*" + mp5 + "```"
			
            embed = discord.Embed()
            embed.title = "Asteroid Vision(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Makoto_AsteroidVision.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Cosmic Ray"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/c6/BBCP_Makoto_CosmicRay1.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab1)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab2)
            embed1.add_field(name="Lv. 3 Frame Data", value=tab3)
            embed1.add_field(name="Lv. G Frame Data", value=tab4)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....") 	

    @rush.command(name="a", pass_context=False)  # Makoto from blazblue
    async def _s9_ma(self):   
        """A after Rush:  Mars Chopper"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            my_table1 = table[75]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + mp2[1] + "\n" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed(description='C after Asteroid Vision A')
            embed.title = "Rush"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Makoto_InfiniteRush.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Mars Chopper"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/78/BBCS_Makoto_MarsChopper.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....") 	

    @rush.command(name="b", pass_context=False)  # Makoto from blazblue
    async def _s10_ma(self):   
        """B after Rush: Stargazer"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            my_table1 = table[77]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + mp2[1] + "\n" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed(description='C after Asteroid Vision A')
            embed.title = "Rush"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Makoto_InfiniteRush.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Stargazer"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/2/27/BBCS_Makoto_StarGazer.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....") 	

    @rush.command(name="c", pass_context=False)  # Makoto from blazblue
    async def _s11_ma(self):   
        """CCCCC after Rush: Infinite Rush"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            my_table1 = table[79]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='C after Asteroid Vision A')
            embed.title = "Rush"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Makoto_InfiniteRush.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Infinite Rush"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Makoto_InfiniteRush.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....") 	

    @rush.command(name="d", pass_context=False)  # Makoto from blazblue
    async def _s12_ma(self):   
        """D after Rush: Lander Blow"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            my_table1 = table[81]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            headers3 = table_body1.find_all('tr')[3]
            headers4 = table_body1.find_all('tr')[4]
            info1 =  table_body1.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('li')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp4 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers1.find('th').get_text()
            vrs1 = headers2.find('th').get_text()
            vrs2 = headers3.find('th').get_text()
            vrs3 = headers4.find('th').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs1], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs2], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs3], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + mp4[0] + "\n" + mp4[1] + "\n" + mp4[2] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + mp3[3] + "\n" + "*" + mp3[4] + "\n" + "*" + mp3[5] + "\n" + "*" + mp3[6] + "\n" + "*" + mp3[7] + "```"
			
            embed = discord.Embed(description='C after Asteroid Vision A')
            embed.title = "Rush"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Makoto_InfiniteRush.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Lander Blow"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCP_Makoto_LanderBlow1.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab1)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab2)
            embed1.add_field(name="Lv. 3 Frame Data", value=tab3)
            embed1.add_field(name="Lv. G Frame Data", value=tab4)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....") 			
			
    @ma.command(name="214b", pass_context=False)  # Makoto from blazblue
    async def _s13_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            my_table1 = table[83]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[4]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            headers3 = table_body1.find_all('tr')[3]
            headers4 = table_body1.find_all('tr')[4]
            info1 =  table_body1.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Asteroid Vision(B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Makoto_AsteroidVision.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='D after Asteroid Vision B')
            embed1.title = "Lightning Arrow"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/60/BBCS_Makoto_MeteorDive.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab1)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab2)
            embed1.add_field(name="Lv. 3 Frame Data", value=tab3)
            embed1.add_field(name="Lv. G Frame Data", value=tab4)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
				
    @ma.command(name="214c", pass_context=False)  # Makoto from blazblue
    async def _s14_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            my_table1 = table[83]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            headers3 = table_body1.find_all('tr')[3]
            headers4 = table_body1.find_all('tr')[4]
            info1 =  table_body1.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Asteroid Vision(C)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Makoto_AsteroidVision.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='D after Asteroid Vision C')
            embed1.title = "Lightning Arrow"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/60/BBCS_Makoto_MeteorDive.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab1)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab2)
            embed1.add_field(name="Lv. 3 Frame Data", value=tab3)
            embed1.add_field(name="Lv. G Frame Data", value=tab4)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ma.command(name="236b", pass_context=False)  # Makoto from blazblue
    async def _s15_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[85]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp2[0] + "\n" + mp2[1] + "\n" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Shooting Star"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b6/BBCS_Makoto_ShootingStar.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ma.command(name="41236c", pass_context=False)  # Makoto from blazblue
    async def _s16_ma(self):   
        """AHH YOU OKAY!?"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[87]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Sirius Jolt"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/28/BBCF_Makoto_SiriusJolt.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @ma.command(name="632146d", pass_context=False)  # Makoto from blazblue
    async def _dd1_ma(self):
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[89]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Big Bang Smash"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8a/BBCS_Makoto_BigBangSmash.png')
            embed.add_field(name="Lv. 1 Frame Data", value=tab)
            embed.add_field(name="Lv. 2 Frame Data", value=tab1)
            embed.add_field(name="Lv. 3 Frame Data", value=tab2)
            embed.add_field(name="Lv. G Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @ma.command(name="236236d", pass_context=False)  # Makoto from blazblue
    async def _dd2_ma(self):
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[91]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            headers4 = table_body.find_all('tr')[5]
            headers5 = table_body.find_all('tr')[6]
            headers6 = table_body.find_all('tr')[7]
            headers7 = table_body.find_all('tr')[8]
            headers8 = table_body.find_all('tr')[9]
            headers9 = table_body.find_all('tr')[10]
            headers10 = table_body.find_all('tr')[11]
            headers11 = table_body.find_all('tr')[12]
            info =  table_body.find_all('tr')[13]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]
            Data7 = [head7.get_text() for head7 in headers7.find_all('td')]
            Data8 = [head8.get_text() for head8 in headers8.find_all('td')]
            Data9 = [head9.get_text() for head9 in headers9.find_all('td')]
            Data10 = [head10.get_text() for head10 in headers10.find_all('td')]
            Data11 = [head11.get_text() for head11 in headers11.find_all('td')]
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()
            vrs6 = headers6.find('th').get_text()
            vrs7 = headers7.find('th').get_text()
            vrs8 = headers8.find('th').get_text()
            vrs9 = headers9.find('th').get_text()
            vrs10 = headers10.find('th').get_text()
            vrs11 = headers11.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')
            tab6 = tabulate([["Version", vrs6], ["Damage", Data6[0]], ["Cancel", Data6[1]], ["Guard", Data6[2]], ["Startup", Data6[3]], ["Active", Data6[4]], ["Recovery", Data6[5]], ["Frame Adv.", Data6[6]], ["Attribute", Data6[7]]], tablefmt='simple', stralign='left')
            tab7 = tabulate([["Version", vrs7], ["Damage", Data7[0]], ["Cancel", Data7[1]], ["Guard", Data7[2]], ["Startup", Data7[3]], ["Active", Data7[4]], ["Recovery", Data7[5]], ["Frame Adv.", Data7[6]], ["Attribute", Data7[7]]], tablefmt='simple', stralign='left')
            tab8 = tabulate([["Version", vrs8], ["Damage", Data8[0]], ["Cancel", Data8[1]], ["Guard", Data8[2]], ["Startup", Data8[3]], ["Active", Data8[4]], ["Recovery", Data8[5]], ["Frame Adv.", Data8[6]], ["Attribute", Data8[7]]], tablefmt='simple', stralign='left')
            tab9 = tabulate([["Version", vrs9], ["Damage", Data9[0]], ["Cancel", Data9[1]], ["Guard", Data9[2]], ["Startup", Data9[3]], ["Active", Data9[4]], ["Recovery", Data9[5]], ["Frame Adv.", Data9[6]], ["Attribute", Data9[7]]], tablefmt='simple', stralign='left')
            tab10 = tabulate([["Version", vrs10], ["Damage", Data10[0]], ["Cancel", Data10[1]], ["Guard", Data10[2]], ["Startup", Data10[3]], ["Active", Data10[4]], ["Recovery", Data10[5]], ["Frame Adv.", Data10[6]], ["Attribute", Data10[7]]], tablefmt='simple', stralign='left')
            tab11 = tabulate([["Version", vrs11], ["Damage", Data11[0]], ["Cancel", Data11[1]], ["Guard", Data11[2]], ["Startup", Data11[3]], ["Active", Data11[4]], ["Recovery", Data11[5]], ["Frame Adv.", Data11[6]], ["Attribute", Data11[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Particle Flare"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/08/BBCS_Makoto_ParticleFlare.png')
            embed.add_field(name="1st Hit, Level 1 Frame Data", value=tab)
            embed.add_field(name="1st Hit, Level 2 Frame Data", value=tab1)
            embed.add_field(name="1st Hit, Level 3 Frame Data", value=tab2)
            embed.add_field(name="1st Hit, Level G Frame Data", value=tab3)
            embed.add_field(name="2st Hit, Level 1 Frame Data", value=tab)
            embed.add_field(name="2st Hit, Level 2 Frame Data", value=tab1)
            embed.add_field(name="2st Hit, Level 3 Frame Data", value=tab2)
            embed.add_field(name="2st Hit, Level G Frame Data", value=tab3)
            
            embed1 = discord.Embed()
            embed1.title = "Particle Flare Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/6c/BBCS_Makoto_ParticleFlare2.png')
            embed1.add_field(name="3rd Hit, Level 1 Frame Data", value=tab)
            embed1.add_field(name="3rd Hit, Level 2 Frame Data", value=tab1)
            embed1.add_field(name="3rd Hit, Level 3 Frame Data", value=tab2)
            embed1.add_field(name="3st Hit, Level G Frame Data", value=tab3)
            embed1.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")				
			
    @ma.command(name="abcd", pass_context=False)  # Makoto from blazblue
    async def _abcd_ma(self): 
        """Exceed Accel"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[93]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Cygnus Combination"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5e/BBCF_Makoto_CygnusCombination.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
			
    @ma.command(name="236214d", pass_context=False)  # Makoto from blazblue
    async def _astral_ma(self):   
        """Atatatatatatatatatata"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[95]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Planet Crusher"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0b/BBCS_Makoto_PlanetCrusher.png')
            embed.add_field(name="Lv. 1 Frame Data", value=tab)
            embed.add_field(name="Lv. 2 Frame Data", value=tab1)
            embed.add_field(name="Lv. 3 Frame Data", value=tab2)
            embed.add_field(name="Lv. G Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Planet Crusher Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/aa/BBCS_Makoto_PlanetCrusher2.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")	

###################################################################################################################################################################################################
    @mai.command(name="5a", pass_context=False)  # Mai from blazblue
    async def _5a_mai(self):
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            headers2 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[6] #Character does not have anything else, JUST DEFAULT?
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = info.find('li').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 			
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ae/BBCF_Mai_5A.png')
            embed.add_field(name="5A Frame Data", value=tab)
			
            embed1 = discord.Embed()
            embed1.title = "5xA"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/8e/BBCF_Mai_5AA.png')
            embed1.add_field(name="5xA Frame Data", value=tab1)

            embed2 = discord.Embed()
            embed2.title = "5xAA"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/0/0e/BBCF_Mai_5AAA.png')
            embed2.add_field(name="5xAA Frame Data", value=tab2)
            embed2.add_field(name="5xAA Attack Props:", value=mpA, inline='true')
		
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @mai.command(name="5b", pass_context=False)  # Mai from blazblue
    async def _5b_mai(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            #info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp2[0] + "\n" + mp1[1] + "\n" + "*" + mp2[1] + "```" 
			
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4b/BBCF_Mai_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5xb"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/cf/BBCF_Mai_5BB.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)				
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @vh.command(name="a", pass_context=False)  # Mai from blazblue
    async def _vha_mai(self): 
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            my_table1 = table[7]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
			
            embed = discord.Embed(description='Variant Heart Stance')
            embed.title = "5x[B]"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f6/BBCF_Mai_5x%28B%29.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5x[B]A"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/72/BBCF_Mai_5x%28B%29A.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @vh.command(name="c", pass_context=False)  # Mai from blazblue
    async def _vhc_mai(self): 
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            my_table1 = table[7]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
			
            embed = discord.Embed(description='Variant Heart Stance')
            embed.title = "5x[B]"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f6/BBCF_Mai_5x%28B%29.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5x[B]C"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/72/BBCF_Mai_5x%28B%29A.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @vh.command(name="6a", pass_context=False)  # Mai from blazblue
    async def _vh6a_mai(self): 
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            my_table1 = table[9]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            #info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            #mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            #mpB = "```" + "*" + mp2[0] + "```"
			
            embed = discord.Embed(description='Variant Heart Stance')
            embed.title = "5x[B]"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f6/BBCF_Mai_5x%28B%29.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5x[B]6A"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/75/BBCF_Mai_5x%28B%296A.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @vh.command(name="6c", pass_context=False)  # Mai from blazblue
    async def _vh6c_mai(self): 
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            my_table1 = table[9]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            #info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            #mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            #mpB = "```" + "*" + mp2[0] + "```"
			
            embed = discord.Embed(description='Variant Heart Stance')
            embed.title = "5x[B]"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f6/BBCF_Mai_5x%28B%29.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5x[B]6C"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/75/BBCF_Mai_5x%28B%296A.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @vh.command(name="8a", pass_context=False)  # Mai from blazblue
    async def _vh8a_mai(self): 
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            my_table1 = table[11]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='Variant Heart Stance')
            embed.title = "5x[B]"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f6/BBCF_Mai_5x%28B%29.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5x[B]8A"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/fb/BBCF_Mai_5x%28B%298A.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @vh.command(name="8c", pass_context=False)  # Mai from blazblue
    async def _vh8c_mai(self): 
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            my_table1 = table[11]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='Variant Heart Stance')
            embed.title = "5x[B]"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f6/BBCF_Mai_5x%28B%29.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5x[B]8C"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/fb/BBCF_Mai_5x%28B%298A.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @mai.command(name="5c", pass_context=False)  # Mai from blazblue
    async def _5c_mai(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            headers2 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[4]
            info2 = table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            mp3 = [op2.get_text() for op2 in info2.find_all('li')]
            mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + mp3[2] + "```" 
			
			
            embed = discord.Embed(description='1 Button Fatals')
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/15/BBCF_Mai_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Poke of the gods')
            embed1.title = "5xC"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/1c/BBCF_Mai_5CC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed2 = discord.Embed(description='Mash C to fill combos')
            embed2.title = "5xCC"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/5/56/BBCF_Mai_5CCC.png')
            embed2.add_field(name="Frame Data", value=tab2)
            embed2.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
	
    @mai.command(name="2a", pass_context=False)  # Mai from blazblue
    async def _2a_mai(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            my_table1 = table[19]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info1.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/82/BBCF_Mai_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "2xC"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/6c/BBCF_Mai_2BC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @mai.command(name="2b", pass_context=False)  # Mai from blazblue
    async def _2b_mai(self): 
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            my_table1 = table[19]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info1.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b1/BBCF_Mai_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "2xC"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/6c/BBCF_Mai_2BC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @mai.command(name="2c", pass_context=False)  # Mai from blazblue
    async def _2c_mai(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp2 = [po.get_text() for po in info.find_all('p')]
            #mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp2[0] + "\n" + mp2[1] + "\n" + "*" + mp1[0] + "\n" + "*" + mp[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/50/BBCF_Mai_2C_%282%29.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
    @mai.command(name="5xab", pass_context=False)  # Mai from blazblue
    async def _5xAB_mai(self):  
        #"""Insert Tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            #mp1 = info.find('p').get_text()
            #mp2 = info.find('li').get_text()	
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "5xAB"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4c/BBCF_Mai_5AAB.png')
            embed.add_field(name="Strike Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
            embed.add_field(name="Shot Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @mai.command(name="5xac", pass_context=False)  # Mai from blazblue
    async def _5xAC_mai(self):  
        #"""Insert Tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            #mp1 = info.find('p').get_text()
            #mp2 = info.find('li').get_text()	
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "5xAC"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4c/BBCF_Mai_5AAB.png')
            embed.add_field(name="Strike Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
            embed.add_field(name="Shot Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
    @mai.command(name="5xca", pass_context=False)  # Mai from blazblue
    async def _5xca_mai(self):  
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]

			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
			
            embed = discord.Embed()
            embed.title = "5xCA"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cb/BBCF_Mai_5xCA.png')
            embed.add_field(name="Strike Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")

    @mai.command(name="5xcb", pass_context=False)  # Mai from blazblue
    async def _5xcb_mai(self):  
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]				

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
			
            embed = discord.Embed()
            embed.title = "5xCB"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/60/BBCF_Mai_5xCB.png')
            embed.add_field(name="Strike Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")			
			
    @mai.command(name="ja", pass_context=False)  # Mai from blazblue
    async def _ja_mai(self): 
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b2/BBCF_Mai_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except:
            await self.bot.say("No Frame Data Found.....")  # oh holy crap we have a houston!
			
			
    @mai.command(name="jb", pass_context=False)  # Mai from blazblue
    async def _jb_mai(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/95/BBCF_Mai_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
			
			
    @mai.command(name="jc", pass_context=False)  # Mai from blazblue
    async def _jc_mai(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/82/BBCF_Mai_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")
							
    @mai.command(name="d", pass_context=False)  # Mai from blazblue
    async def _d_mai(self):   
        """Inputting 2,5, or 8 will change the spear trajectory, While charging makes it unblockable"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            my_table1 = table[37]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[4]
            headers3 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[6]
            headers4 = table_body1.find_all('tr')[1]
            info2 = table_body1.find_all('tr')[2]
            headers5 = table_body1.find_all('tr')[3]
            info3 = table_body1.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]	
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]	
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]	
            mp1 = info.find('li').get_text()			
            mp2 = info.find('p').get_text()			
            mp3 = [po.get_text() for po in info1.find_all('li')]
            mp4 = info1.find('p').get_text()
            mp5 = info2.find('p').get_text()	
            mp6 = info3.find('li').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')	
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')	
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')			
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
            mpC = "```" + "*" + mp5 + "```"
            mpD = "```" + "*" + mp6 + "```"
			
            embed = discord.Embed(description='Uncharged')
            embed.title = "Exseal"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/57/BBCF_Mai_5D.png')
            embed.add_field(name="2/5/8D Frame Data", value=tab)
            embed.add_field(name="OD 2/5/8D Frame Data", value=tab1)
            embed.add_field(name="Uncharged Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Charged')
            embed1.title = "Exseal"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f0/BBCF_Mai_5D%21.png')
            embed1.add_field(name="Charged 2/5/8D Frame Data", value=tab2)
            embed1.add_field(name="OD Charged 2/5/8D Frame Data", value=tab3)
            embed1.add_field(name="Charged Attack Props:", value=mpB)
			
            embed2 = discord.Embed(description='D after any Drive (Air OK)')
            embed2.title = "Direction Change"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/df/BBCF_Mai_DD.png')
            embed2.add_field(name="Uncharged Frame Data", value=tab4)
            embed2.add_field(name="Attack Props:", value=mpC)
            embed2.add_field(name="Charged Frame Data", value=tab5)
            embed2.add_field(name="Attack Props:", value=mpD)
            embed2.set_footer(text='"Did you really think I missed?"')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
    @mai.command(name="jd", pass_context=False)  # Mai from blazblue
    async def _jd_mai(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            my_table1 = table[37]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[7]
            headers1 = table_body.find_all('tr')[8]
            headers2 = table_body.find_all('tr')[10]
            headers3 = table_body.find_all('tr')[11]
            info = table_body.find_all('tr')[9]
            info1 = table_body.find_all('tr')[12]
            headers4 = table_body1.find_all('tr')[1]
            info2 = table_body1.find_all('tr')[2]
            headers5 = table_body1.find_all('tr')[3]
            info3 = table_body1.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]	
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]	
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]	
            mp1 = info.find('li').get_text()			
            mp2 = info.find('p').get_text()			
            mp3 = [po.get_text() for po in info1.find_all('li')]
            mp4 = info1.find('p').get_text()
            mp5 = info2.find('p').get_text()	
            mp6 = info3.find('li').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')	
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Cancel", Data4[1]], ["Guard", Data4[2]], ["Startup", Data4[3]], ["Active", Data4[4]], ["Recovery", Data4[5]], ["Frame Adv.", Data4[6]], ["Attribute", Data4[7]]], tablefmt='simple', stralign='left')	
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Cancel", Data5[1]], ["Guard", Data5[2]], ["Startup", Data5[3]], ["Active", Data5[4]], ["Recovery", Data5[5]], ["Frame Adv.", Data5[6]], ["Attribute", Data5[7]]], tablefmt='simple', stralign='left')			
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
            mpC = "```" + "*" + mp5 + "```"
            mpD = "```" + "*" + mp6 + "```"
			
            embed = discord.Embed(description='Uncharged')
            embed.title = "Air Exseal"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d5/BBCF_Mai_j.D.png')
            embed.add_field(name="J.2/5/8D Frame Data", value=tab)
            embed.add_field(name="OD J.2/5/8D Frame Data", value=tab1)
            embed.add_field(name="Uncharged Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Charged')
            embed1.title = "Air Exseal"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/95/BBCF_Mai_j.D%21.png')
            embed1.add_field(name="Charged J.2/5/8D Frame Data", value=tab2)
            embed1.add_field(name="OD Charged J.2/5/8D Frame Data", value=tab3)
            embed1.add_field(name="Charged Attack Props:", value=mpB)
			
            embed2 = discord.Embed(description='D after any Drive (Air OK)')
            embed2.title = "Direction Change"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/df/BBCF_Mai_DD.png')
            embed2.add_field(name="Uncharged Frame Data", value=tab4)
            embed2.add_field(name="Attack Props:", value=mpC)
            embed2.add_field(name="Charged Frame Data", value=tab5)
            embed2.add_field(name="Attack Props:", value=mpD)
            embed2.set_footer(text='"Did you really think I missed?"')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except:
            await self.bot.say("No Frame Data Found.....")			


    @mai.command(name="ft", pass_context=False)  # Mai from blazblue
    async def _ft_mai(self):   
        """Forward Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/03/BBCF_Mai_ForwardThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @mai.command(name="bt", pass_context=False)  # Mai from blazblue
    async def _bt_mai(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/03/BBCF_Mai_ForwardThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @mai.command(name="at", pass_context=False)  # Mai from blazblue
    async def _at_mai(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()


            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/57/BBCF_Mai_AirThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found....")
			
    @mai.command(name="ca", pass_context=False)  # Mai from blazblue
    async def _ca_mai(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [po.get_text() for po in info.find_all('p')]	

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cf/BBCF_Mai_5BB.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		

    @mai.command(name="ct", pass_context=False)  # Mai from blazblue
    async def _ct_mai(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            #mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b5/BBCF_Mai_CrushTrigger.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @jun.command(name="a", pass_context=False)  # Mai from blazblue
    async def _s1_mai(self):   
        """A after Juncture"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            my_table1 = table[49]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            #mp1 = info.find('p').get_text()
            vrs = headers1.find('th').get_text()
            vrs1 = headers2.find('th').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs1], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='236: Command Dash')
            embed.title = "Juncture"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bf/BBCF_Mai_Setsuna.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed(description='A after Juncture')
            embed1.title = "A Himeyuri"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/39/BBCF_Mai_Himeyuri.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="OD Frame Data", value=tab2)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Rocket Stab.')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")	

    @jun.command(name="b", pass_context=False)  # Mai from blazblue
    async def _s2_mai(self):   
        """B after Juncture"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            my_table1 = table[51]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            #mp1 = info.find('p').get_text()
            vrs = headers1.find('th').get_text()
            vrs1 = headers2.find('th').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs1], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='236: Command Dash')
            embed.title = "Juncture"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bf/BBCF_Mai_Setsuna.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed(description='B after Juncture')
            embed1.title = "B Himeyuri"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/39/BBCF_Mai_Himeyuri.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="OD Frame Data", value=tab2)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Rocket Stab.')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")
			
    @jun.command(name="c", pass_context=False)  # Mai from blazblue
    async def _s3_mai(self):   
        """C after Juncture"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            my_table1 = table[53]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            #mp1 = info.find('p').get_text()
            vrs = headers1.find('th').get_text()
            vrs1 = headers2.find('th').get_text()

            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs1], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='236: Command Dash')
            embed.title = "Juncture"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bf/BBCF_Mai_Setsuna.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed(description='C after Juncture')
            embed1.title = "C Himeyuri"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/2/2b/BBCF_Mai_Himeyuri-Dipper.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="OD Frame Data", value=tab2)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Rocket Stab.')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")

    @moon.command(name="a", pass_context=False)  # Mai from blazblue
    async def _s4_mai(self):   
        """A after Moon Blossom"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            my_table1 = table[57]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            headers3 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            #mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='214: Command Jump')
            embed.title = "Moon Blossom"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCF_Mai_MoonBlossom.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed(description='A after Moon Blossom')
            embed1.title = "Suzuran"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/45/BBCF_Mai_Suzuran.png')
            embed1.add_field(name="Uncharged Frame Data", value=tab2)
            embed1.add_field(name="Charged Frame Data", value=tab3)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Diving Stab')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")	
			
    @moon.command(name="b", pass_context=False)  # Mai from blazblue
    async def _s5_mai(self):   
        """B after Moon Blossom"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            my_table1 = table[59]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            headers3 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            #mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='214: Command Jump')
            embed.title = "Moon Blossom"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCF_Mai_MoonBlossom.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed(description='B after Moon Blossom')
            embed1.title = "Suzuran: Blaze"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/e5/BBCF_Mai_SuzuranBlaze.png')
            embed1.add_field(name="Uncharged Frame Data", value=tab2)
            embed1.add_field(name="Charged Frame Data", value=tab3)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')		
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")

    @moon.command(name="c", pass_context=False)  # Mai from blazblue
    async def _s6_mai(self):   
        """C after Moon Blossom"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            my_table1 = table[61]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            headers3 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            #mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Cancel", Data2[1]], ["Guard", Data2[2]], ["Startup", Data2[3]], ["Active", Data2[4]], ["Recovery", Data2[5]], ["Frame Adv.", Data2[6]], ["Attribute", Data2[7]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Cancel", Data3[1]], ["Guard", Data3[2]], ["Startup", Data3[3]], ["Active", Data3[4]], ["Recovery", Data3[5]], ["Frame Adv.", Data3[6]], ["Attribute", Data3[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='214: Command Jump')
            embed.title = "Moon Blossom"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCF_Mai_MoonBlossom.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed(description='C after Moon Blossom')
            embed1.title = "Suzuran: Dipper"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/65/BBCF_Mai_SuzuranDipper.png')
            embed1.add_field(name="Uncharged Frame Data", value=tab2)
            embed1.add_field(name="Charged Frame Data", value=tab3)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Angled Diving Stab')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except:
            await self.bot.say("No Frame Data Found...")	 
			
    @mai.command(name="214d", pass_context=False)  # Mai from blazblue
    async def _dd1_mai(self):
        """Hold button to go into autoguard stance"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Floral Blizzard Blossom"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/34/BBCF_Mai_FloralBlizzardBlossom.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	

    @mai.command(name="236d", pass_context=False)  # Mai from blazblue
    async def _dd2_mai(self):
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Sylvan Hurricane Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/59/BBCF_Mai_SylvanHurricaneAssault.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")				
			
    @mai.command(name="abcd", pass_context=False)  # Mai from blazblue
    async def _abcd_mai(self): 
        """Exceed Accel"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Cancel", Data1[1]], ["Guard", Data1[2]], ["Startup", Data1[3]], ["Active", Data1[4]], ["Recovery", Data1[5]], ["Frame Adv.", Data1[6]], ["Attribute", Data1[7]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Shearing Cherry Blossom Storm"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8a/BBCF_Mai_ShearingCherryBlossomStorm.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")	
			
			
    @mai.command(name="222d", pass_context=False)  # Mai from blazblue
    async def _astral_mai(self):   
        """Soaring Spear that Strikes with Death"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [po.get_text() for po in info.find_all('p')]
       
            tab = tabulate([["Damage", Data[0]], ["Cancel", Data[1]], ["Guard", Data[2]], ["Startup", Data[3]], ["Active", Data[4]], ["Recovery", Data[5]], ["Frame Adv.", Data[6]], ["Attribute", Data[7]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Royal Crimson Sprout: New Moon Lotus"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5e/BBCF_Mai_NewMoonLotus.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except:
            await self.bot.say("No Frame Data Found.....")		
###################################################################################################################################################################################################
def setup(bot):
    if soupAvailable is False:
        raise RuntimeError("You don't have BeautifulSoup installed, run\n```pip3 install bs4```And try again")
        return
    if tabulateAvailable is False:
        raise RuntimeError("You don't have tabulate installed, run\n```pip3 install tabulate```And try again")
        return
    bot.add_cog(bb(bot))
