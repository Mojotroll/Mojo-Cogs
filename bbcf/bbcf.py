import aiohttp
import discord
from discord.ext import commands
from __main__ import send_cmd_help
try:   # check if BeautifulSoup4 is installed
    from bs4 import BeautifulSoup
    soupAvailable = True
except:
    soupAvailable = False
try:   # Check if Tabulate is installed
    from tabulate import tabulate
    tabulateAvailable = True
except:
    tabulateAvailable = False


class bbcf:
    """Blazblue Central Fiction:  Character Frame Data Search"""

    def __init__(self, bot):
        self.bot = bot
        self.version = "1.5.3.3"

    @commands.group(pass_context=True)
    async def am(self, ctx):
        """Fashion Master"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)       
	
    @commands.group(pass_context=True)
    async def az(self, ctx):
        """Gorilla King"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx) 
	
    @commands.group(pass_context=True)
    async def ra(self, ctx):
        """Ragna Oni-san."""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def es(self, ctx):
        """SWWWWWWWWWWWWWWOOOOOOOOOORRRRRRRDDDD--YUKEN"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)  
		
    @commands.group(pass_context=True)
    async def hk(self, ctx):
        """White Susano'o"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
		
    @commands.group(pass_context=True)
    async def jin(self, ctx):
        """Jin Kisaragi, Former Paradise Island Owner."""
		
        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)  
		
    @commands.group(pass_context=True)
    async def su(self, ctx):
        """Black Susano'o"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def ce(self, ctx):
        """Aunt Celica"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def no(self, ctx):
        """Non-Mecha Noel"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def la(self, ctx):
        """Super Fighting Lambda"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @la.group(pass_context=True)
    async def apt(self, ctx):
        """Act Parser Tri: 236b, 6a, 6b, 6c"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def mu(self, ctx):
        """Mecha Noel"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def nu(self, ctx):
        """Ragna's Pyscho"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def te(self, ctx):
        """TERRRRRRRRRUUUUUMMMMMMMMMMMMMMMIIIIIIIIIIIIII"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def vk(self, ctx):
        """The Butler"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def ts(self, ctx):
        """Hammer Gorilla"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def tk(self, ctx):
        """Dancing Edge"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def re(self, ctx):
        """Best Dad Award Winner"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @re.group(pass_context=True)
    async def idl(self, ctx):
        """Id Lauger(236c/j.236c)/214a, 214b, 214c"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def rac(self, ctx):
        """Prim and Proper"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def pl(self, ctx):
        """The Queen Loli"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def ni(self, ctx):
        """Queen Gorilla"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def na(self, ctx):
        """Swwwwwwwwwaaaaaaaayyyyy Mastah"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @na.group(pass_context=True)
    async def bf(self, ctx):
        """Banishing Fang/Commands: 236b, roar, bash, and raid"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def ma(self, ctx):
        """Fist of the Squirrel Star"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @ma.group(pass_context=True)
    async def asteroidA(self, ctx):
        """Asteroid Vision(A) follow-ups: a, b, c, d, and rush(a/b/c/d)"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @asteroidA.group(pass_context=True)
    async def rush(self, ctx):
        """Going into the Follow-ups used after Rush: a, b, c, d"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def mai(self, ctx):
        """She has a pointy thingy"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @mai.group(pass_context=True)
    async def vh(self, ctx):
        """Variant Heart Stance Follow-ups: a/c, 6a/6c, 8a/8c"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @mai.group(pass_context=True)
    async def jun(self, ctx):
        """Juncture Follow-ups: a, b, c"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @mai.group(pass_context=True)
    async def moon(self, ctx):
        """Moon Blossom Follow-ups a, b, c"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def li(self, ctx):
        """The Doctor has a stick"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @li.group(pass_context=True)
    async def m(self, ctx):
        """Litchi w/ Staff Specials/Distortions"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @li.group(pass_context=True)
    async def e(self, ctx):
        """Litchi w/o Staff Specials/Distortions"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @e.group(pass_context=True)
    async def reach(self, ctx):
        """Reach Group Commands: a,b,c,d,63214b,63214c, 46d(Astral)"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def ko(self, ctx):
        """The Mad genius herself"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def ka(self, ctx):
        """The Ladies Man"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @ka.group(pass_context=True)
    async def s5d(self, ctx):
        """5D Follow-ups: a,b,c"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @ka.group(pass_context=True)
    async def s2d(self, ctx):
        """2D Follow-ups: a,b,c"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @ka.group(pass_context=True)
    async def s6d(self, ctx):
        """6D Follow-ups: a,b,c"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def iz(self, ctx):
        """YOU LIKE DAMAGE?!"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def mi(self, ctx):
        """Izanami: Death Herself, and Pain Train"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def ta(self, ctx):
        """GIGANTIC TAGER PAIN TRAIN, Gadget Finger!"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def hi(self, ctx):
        """THE Secretary"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @hi.group(pass_context=True)
    async def sk(self, ctx):
        """Soaring Kick/SK Follow-ups: a, b, c, D, ja"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def haz(self, ctx):
        """SUPER SNAKE KICK"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @haz.group(pass_context=True)
    async def nd(self, ctx):
        """5d/Follow-ups: A, B, C, D"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @haz.group(pass_context=True)
    async def crd(self, ctx):
        """2d/Follow-ups: A, B, C, D"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @haz.group(pass_context=True)
    async def fd(self, ctx):
        """6d/Follow-ups: A, B, C, D"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)

    @haz.group(pass_context=True)
    async def bd(self, ctx):
        """4d/Follow-ups: A, B, C, D"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @haz.group(pass_context=True)
    async def jd(self, ctx):
        """j.d/Follow-ups: A, B, C, D"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @haz.group(pass_context=True)
    async def j2d(self, ctx):
        """j.2d/Follow-ups: A, B, C, D"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @haz.group(pass_context=True)
    async def j6d(self, ctx):
        """j.6d/Follow-ups: A, B, C, D"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @haz.group(pass_context=True)
    async def j4d(self, ctx):
        """j.4d/Follow-ups: A, B, C, D"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @haz.group(pass_context=True)
    async def j8d(self, ctx):
        """j.8d/Follow-ups: A, B, C, D"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @haz.group(pass_context=True)
    async def sbj(self, ctx):
        """Serpent's Benediction: 214d, 44/66, A, B, C, D, 632146d"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def ca(self, ctx):
        """Puppeter for Vengence"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def bu(self, ctx):
        """Crouching Tiger, Wannabe Tager"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @bu.group(pass_context=True)
    async def sa(self, ctx):
        """Serpentine Assault/Follow-ups: 720a, 720d, 1080d"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)

    @commands.group(pass_context=True)
    async def ba(self, ctx):
        """Ninja for Love and Justice"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @ba.group(pass_context=True)
    async def bh(self, ctx):
        """Drive/Commands: 5d,2d,6d,jd,gp(Guardpoints A\B\C),gpd"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.group(pass_context=True)
    async def ar(self, ctx):
        """bugs.... BUGS..... BUGGGSSSSS!"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @ar.group(pass_context=True)
    async def bugs(self, ctx):
        """Frame Data for A Bug, B Bug, C Bug, D Bug"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)

    @commands.group(pass_context=True)
    async def ju(self, ctx):
        """Master Swordsman, Jubei-sama"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @ju.group(pass_context=True)
    async def rek(self, ctx):
        """Rekkōzan: 236a/236236a, A, B, 6b, 4b, C, 646c, 4d/6d"""

        if ctx.invoked_subcommand is None:
            await send_cmd_help(ctx)
			
    @commands.command(pass_context=True, aliases=["teachmemisslitchi", "MissLitchi", "bbhelp", "assistme"])
    async def TeachMeMissLitchi(self, ctx):
        """Fighting Game/BBCF Tutorial"""		

		####Introduction to Fighting Games##########
        #https://www.youtube.com/watch?v=nd9sEB6ku14
        #https://www.youtube.com/watch?v=CyV7Ca5T2Zc
        #https://www.youtube.com/watch?v=1NnK5f617_A
        ############################################
		
		###Introduction to Anime Fighting Games###
        #https://www.youtube.com/watch?v=HWfk3tOJjaQ
        ############################################
		
		###Introduction to Blazblue Central Fiction###
        #https://www.youtube.com/watch?v=Gt0wT4BzsLg
        #https://www.youtube.com/watch?v=Gt0wT4BzsLg
        #https://www.youtube.com/watch?v=owTyfLATh-A
        #https://www.youtube.com/watch?v=IUo1DdceOUw
        #https://www.youtube.com/watch?v=GbCpujVrRLM
        #https://www.youtube.com/watch?v=52FiYl8SoZ8
        #https://www.youtube.com/watch?v=Mh2pHaueM8M
        ############################################
		
        embed = discord.Embed()
        embed.title = "Introduction to Fighting Games"
        embed.set_image(url='https://s-media-cache-ak0.pinimg.com/originals/d2/f3/89/d2f389b68559cc8dc6f3500612b7ad96.jpg')
        embed.add_field(name="Concepts Every 2D Fighting Game Player Should Know", value="https://www.youtube.com/watch?v=nd9sEB6ku14", inline='true')
        embed.add_field(name="REAL TALK: Fighting Game Advice (How To Play Great Fast)", value="https://www.youtube.com/watch?v=CyV7Ca5T2Zc", inline='true')
        embed.add_field(name="Exploring Fighting Games Series", value="https://www.youtube.com/watch?v=1NnK5f617_A", inline='true')
		
        embed1 = discord.Embed()
        embed1.title = "Introduction to Anime Fighting Games"
        embed1.set_image(url='http://airdasherchile.com/wp-content/uploads/2014/02/Teach-me-Miss.Litchi-184x180.png')
        embed1.add_field(name="Air Dash Academy Series", value="https://www.youtube.com/watch?v=HWfk3tOJjaQ", inline='true')
		
        embed2 = discord.Embed()
        embed2.title = "Introduction to Blazblue Central Fiction"
        embed2.set_image(url='http://i175.photobucket.com/albums/w127/antiwhippy/NoelBangSwap.jpg')
        embed2.add_field(name="Learning Blazblue Centralfiction Series", value="https://www.youtube.com/watch?v=Gt0wT4BzsLg", inline='true')
        embed2.add_field(name="BBCF Meaty Hitstop OS Tutorial", value="https://www.youtube.com/watch?v=Gt0wT4BzsLg", inline='true')
        embed2.add_field(name="BBCF L/R OS Tutorial", value="https://www.youtube.com/watch?v=owTyfLATh-A", inline='true')
        embed2.add_field(name="BBCF Fuzzy Jump Tutorial", value="https://www.youtube.com/watch?v=IUo1DdceOUw", inline='true')
        embed2.add_field(name="BBCF Trip Guard Tutorial: Proximity Guard", value="https://www.youtube.com/watch?v=GbCpujVrRLM", inline='true')
        embed2.add_field(name="BBCF Trip Guard Tutorial: Dash Cancelling", value="https://www.youtube.com/watch?v=52FiYl8SoZ8", inline='true')
        embed2.add_field(name="BBCF Kara Cancel Tutorial", value="https://www.youtube.com/watch?v=Mh2pHaueM8M", inline='true')
        
        await self.bot.whisper(embed=embed)
        await self.bot.whisper(embed=embed1)
        await self.bot.whisper(embed=embed2)
		
    @commands.command(pass_context=True)
    async def bbcfAbout(self, ctx):
        """BBCF Information"""

        mpA = "```" + "The information is retrieved from the Dustloop Character Wiki Pages, using the information kept up by the Community! Thank you all!" + "```"
        mpB = "https://trello.com/b/K4froUcU"
        version = self.version
		
        embed = discord.Embed()
        embed.title = "BBCF Cog Information"
        embed.set_image(url='http://i2.wp.com/shoryuken.com/wp-content/uploads/2015/08/bbcf-logo-750.png?fit=750%2C420&resize=750%2C400')
        embed.add_field(name="How does this cog get its information?", value=mpA)
        embed.add_field(name="Version", value=version)
        embed.add_field(name="Trello", value="{}".format(mpB))
		
        await self.bot.say(embed=embed)
			
#########################################################################################################################################
    @am.command(name="5a", pass_context=False)  # Amane from blazblue
    async def _5a_am(self):
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = movesp.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
		
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4c/BBCP_Amane_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)            
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="5b", pass_context=False)  # Amane from blazblue
    async def _5b_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = movesp.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/07/BBCP_Amane_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)		
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="5c", pass_context=False)  # Amane from blazblue
    async def _5c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = movesp.find_all('li')[0].get_text()
            mp2 = movesp.find_all('li')[1].get_text()
            mp3 = movesp.find_all('li')[2].get_text()
            mp4 = movesp.find_all('li')[3].get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/28/BBCP_Amane_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="2a", pass_context=False)  # Amane from blazblue
    async def _2a_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]

            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6e/BBCP_Amane_2A.png')
            embed.add_field(name="2A", value=tab)
            embed.add_field(name="2AA", value=tab1)
            embed.add_field(name="2AAA", value=tab2)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="2b", pass_context=False)  # Amane from blazblue
    async def _2b_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/53/BBCP_Amane_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="2c", pass_context=False)  # Amane from blazblue
    async def _2c_am(self):   
        """Ground control from a distance"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7e/BBCP_Amane_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="6a", pass_context=False)  # Amane from blazblue
    async def _6a_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b0/BBCP_Amane_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="6b", pass_context=False)  # Amane from blazblue
    async def _6b_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find_all('li')[2].get_text()
            mp4 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b4/BBCP_Amane_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="6c", pass_context=False)  # Amane from blazblue
    async def _6c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find_all('li')[2].get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/26/BBCP_Amane_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="4c", pass_context=False)  # Amane from blazblue
    async def _4c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]

            Data = [head.get_text() for head in headers.find_all('td')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "4C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/01/BBCF_Amane_4C.png')
            embed.add_field(name="Frame Data", value=tab)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="1c", pass_context=False)  # Amane from blazblue
    async def _1c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]

            Data = [head.get_text() for head in headers.find_all('td')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "1C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/02/BBCF_Amane_1C.png') #no image found
            embed.add_field(name="Frame Data", value=tab)

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="3c", pass_context=False)  # Amane from blazblue
    async def _3c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2a/BBCP_Amane_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="ja", pass_context=False)  # Amane from blazblue
    async def _ja_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "j.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ee/BBCP_Amane_jA.png')
            embed.add_field(name="J.A", value=tab)
            embed.add_field(name="J.AA", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="jb", pass_context=False)  # Amane from blazblue
    async def _jb_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "j.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c1/BBCP_Amane_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @am.command(name="j2b", pass_context=False)  # Amane from blazblue
    async def _j2b_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n" + "*" + mps[1] + "\n" + "*" + mps[2] + "\n" + "*" + mps[3] +"```"
			
            embed = discord.Embed()
            embed.title = "j.2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b4/BBCP_Amane_j2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="jc", pass_context=False)  # Amane from blazblue
    async def _jc_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n" + "*" + mps[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "j.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4f/BBCP_Amane_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @am.command(name="j6c", pass_context=False)  # Amane from blazblue
    async def _j6c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "j.6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/18/BBCP_Amane_j6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="j4c", pass_context=False)  # Amane from blazblue
    async def _j4c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n" + "*" + mps[1] + "```"
			
            embed = discord.Embed()
            embed.title = "j.4C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9b/BBCP_Amane_j4C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="j2c", pass_context=False)  # Amane from blazblue
    async def _j2c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n" + "*" + mps[1] + "```"
			
            embed = discord.Embed()
            embed.title = "j.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9b/BBCP_Amane_j4C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="5d", pass_context=False)  # Amane from blazblue
    async def _5d_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d0/BBCP_Amane_5D.png')
            embed.add_field(name="Lv. 1", value=tab)
            embed.add_field(name="Lv. 2", value=tab1)
            embed.add_field(name="Lv. 3", value=tab2)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="2d", pass_context=False)  # Amane from blazblue
    async def _2d_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCP_Amane_2D.png')
            embed.add_field(name="Lv. 1", value=tab)
            embed.add_field(name="Lv. 2", value=tab1)
            embed.add_field(name="Lv. 3", value=tab2)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="6d", pass_context=False)  # Amane from blazblue
    async def _6d_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d8/BBCP_Amane_6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="jd", pass_context=False)  # Amane from blazblue
    async def _jd_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "j.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/60/BBCP_Amane_jD.png')
            embed.add_field(name="Lv. 1", value=tab)
            embed.add_field(name="Lv. 2", value=tab1)
            embed.add_field(name="Lv. 3", value=tab2)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="j6d", pass_context=False)  # Amane from blazblue
    async def _j6d_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "j.6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/44/BBCP_Amane_j6D.png')
            embed.add_field(name="Lv. 1", value=tab)
            embed.add_field(name="Lv. 2", value=tab1)
            embed.add_field(name="Lv. 3", value=tab2)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="ft", pass_context=False)  # Amane from blazblue
    async def _ft_am(self): 
        """Pinwheel"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/75/BBCP_Amane_ForwardThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="bt", pass_context=False)  # Amane from blazblue
    async def _bt_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5d/BBCP_Amane_BackThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="at", pass_context=False)  # Amane from blazblue
    async def _at_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/68/BBCP_Amane_AirThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="ca", pass_context=False)  # Amane from blazblue
    async def _ca_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/07/BBCP_Amane_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="ct", pass_context=False)  # Amane from blazblue
    async def _ct_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/18/BBCP_Amane_CT.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @am.command(name="236d", pass_context=False)  # Amane from blazblue
    async def _236d_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            headers2 = table_body.find_all('tr')[4]
            headers3 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[6]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = [fo1.get_text() for fo1 in info1.find_all('li')]
            mp3 = info1.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Ninpu Sengeki: Hariken"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/52/BBCP_Amane_Hariken.png')
            embed.add_field(name="Stance", value=tab)
            embed.add_field(name="Attack(foot)", value=tab1)
            embed.add_field(name="Attack (drill)", value=tab2)
            embed.add_field(name="Break", value=tab3)
            embed.add_field(name="Stance:", value=mpA, inline='true')
            embed.add_field(name="Follow-up:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @am.command(name="623c", pass_context=False)  # Amane from blazblue
    async def _623c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Jyuuken Dageki: Gekiren"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a1/BBCP_Amane_Gekiren.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="236c", pass_context=False)  # Amane from blazblue
    async def _236c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Choujyuu Rengeki: Raibu"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fa/BBCP_Amane_Raibu.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="j236c", pass_context=False)  # Amane from blazblue
    async def _j236c_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp = [fo.get_text() for fo in info.find_all('li')]            
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp[0] + "\n" + "*" + mp[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Tensou Rakugeki: Gosei"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2c/BBCP_Amane_Gosei.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="214a", pass_context=False)  # Amane from blazblue
    async def _214a_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[9]

            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [fo.get_text() for fo in info.find_all('li')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Choujin Kaihi: Zettou(214A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCP_Amane_Zettou.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	

    @am.command(name="j214a", pass_context=False)  # Amane from blazblue
    async def _j214a_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[6]
            info = table_body.find_all('tr')[9]

            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [fo.get_text() for fo in info.find_all('li')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Choujin Kaihi: Zettou(j.214A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCP_Amane_Zettou.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @am.command(name="214b", pass_context=False)  # Amane from blazblue
    async def _214b_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[9]

            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [fo.get_text() for fo in info.find_all('li')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Choujin Kaihi: Zettou(214B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCP_Amane_Zettou.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	

    @am.command(name="j214b", pass_context=False)  # Amane from blazblue
    async def _j214b_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[8]
            info = table_body.find_all('tr')[9]

            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [fo.get_text() for fo in info.find_all('li')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Choujin Kaihi: Zettou(j.214B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCP_Amane_Zettou.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @am.command(name="236a", pass_context=False)  # Amane from blazblue
    async def _236a_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[9]

            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [fo.get_text() for fo in info.find_all('li')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Choujin Kaihi: Zettou(236A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCP_Amane_Zettou.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	

    @am.command(name="j236a", pass_context=False)  # Amane from blazblue
    async def _j236a_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[9]

            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [fo.get_text() for fo in info.find_all('li')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Choujin Kaihi: Zettou(j.236A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCP_Amane_Zettou.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @am.command(name="236b", pass_context=False)  # Amane from blazblue
    async def _236b_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[9]

            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [fo.get_text() for fo in info.find_all('li')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Choujin Kaihi: Zettou(236B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCP_Amane_Zettou.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")

    @am.command(name="j236b", pass_context=False)  # Amane from blazblue
    async def _j236b_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[7]
            info = table_body.find_all('tr')[9]

            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [fo.get_text() for fo in info.find_all('li')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Choujin Kaihi: Zettou(J.236B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCP_Amane_Zettou.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @am.command(name="214c", pass_context=False)  # Amane from blazblue
    async def _214c_am(self): 
        """A patch for his dead zone"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  
            mp1 = [fo.get_text() for fo in info.find_all('p')]	
            mp2 = [po.get_text() for po in info.find_all('li')]				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "\n" + "*" + mp2[4] + "```"
			
            embed = discord.Embed()
            embed.title = "Gangan Senbu: Ginga"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/93/BBCF_Amane_Ginga.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="236236d", pass_context=False)  # Amane from blazblue
    async def _236236d_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = [fo1.get_text() for fo1 in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + mp1[4] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp2[3] + "\n" + "*" + mp1[7] + "\n" + "*" + mp2[4] + "\n" + "*" + mp1[8] + "```"
			
            embed = discord.Embed()
            embed.title = "Kyouryuu Tokkou: Seijyuu Rensoukyaku"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8f/BBCP_Amane_SeijyuuRensoukyaku.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @am.command(name="632146d", pass_context=False)  # Amane from blazblue
    async def _632146d_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n"  + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Kaizoku Senkou: Goukai Rasen Renpa"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/79/BBCP_Amane_GoukaiRasenRenpa.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="abcd", pass_context=False)  # Amane from blazblue
    async def _abcd_am(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n"  + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Hazan Gekisou: Jakua Dengekitai"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f9/BBCF_Amane_JiyakuoDengekitai.png')
            embed.add_field(name="Normal", value=tab)
            embed.add_field(name="Active Flow", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @am.command(name="222d", pass_context=False)  # Amane from blazblue
    async def _222d_am(self):   
        """I wanna be, forever young"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Amane_Nishiki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n"  + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Jyatoku Meika: Gouha Houyou"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e5/BBCP_Amane_GouhaHouyou.png')
            embed.add_field(name="Normal", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
			
#################################################################################################################################################			
    @ra.command(name="5a", pass_context=False)  # Amane from blazblue
    async def _5a_ra(self): 
        """Although the start-up is fast, 5A only sees somewhat occasional use"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info1.find_all('li')]
            mp1 = [ti.get_text() for ti in info1.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n"  + "*" + mps[1] + "\n"  + "*" + mp1[0] + "\n"  + "*" + mp1[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f7/BBCS_Ragna_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="5b", pass_context=False)  # Amane from blazblue
    async def _5b_ra(self):   
        """Fast and powerful, but can be dangerous to use in certain situations"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info1.find_all('li')]
            mp1 = [ti.get_text() for ti in info1.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n"  + "*" + mps[1] + "\n"  + "*" + mps[2] + "\n"  + "*" + mps[3] + "```"
            mpd = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5B Cont:"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a6/BBCS_Ragna_5B.png')
            embed1.add_field(name='Attack Props', value=mpd, inline='true')
            
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="5c", pass_context=False)  # Amane from blazblue
    async def _5c_ra(self):   
        """The slower, but longer alternative to 5B"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = [ui.get_text() for ui in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n"  + "*" + mp1[1] + "\n"  + "*" + mp1[2] + "\n"  + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5C Cont:"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/93/BBCS_Ragna_5C.png')
            embed1.add_field(name='Attack Props', value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ra.command(name="2a", pass_context=False)  # Amane from blazblue
    async def _2a_ra(self):   
        """The ±0 frame advantage makes 2A a useful pressure tool"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info1.find_all('li')]
            mp1 = [ui.get_text() for ui in info1.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n"  + "*" + mps[1] + "\n"  + "*" + mp1[0] + "\n"  + "*" + mp1[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "2a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/03/BBCS_Ragna_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @ra.command(name="2b", pass_context=False)  # Amane from blazblue
    async def _2b_ra(self):  
        """Fast low, and can also be used as a footsie"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info1.find_all('li')]
            mp1 = [ui.get_text() for ui in info1.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n"  + "*" + mps[1] + "\n"  + "*" + mp1[0] + "\n"  + "*" + mp1[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c6/BBCS_Ragna_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @ra.command(name="2c", pass_context=False)  # Amane from blazblue
    async def _2c_ra(self): 
        """No longer a fatal, but still a very good move"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info1.find_all('li')]
            mp1 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n"  + "*" + mps[1] + "\n"  + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/28/BBCS_Ragna_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")						

    @ra.command(name="6a", pass_context=False)  # Amane from blazblue
    async def _6a_ra(self):   
        """An anti-air that has been buffed"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info1.find_all('li')]
            mp1 = [ui.get_text() for ui in info1.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n"  + "*" + mps[1] + "\n"  + "*" + mps[2] + "\n"  + "*" + mp1[0] + "\n"  + "*" + mp1[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fd/BBCS_Ragna_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @ra.command(name="6b", pass_context=False)  # Amane from blazblue
    async def _6b_ra(self):  
        """No chains into C make this move a dangerous one to use"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info1.find_all('li')]
            mp2 = [ui.get_text() for ui in info1.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n"  + "*" + mp1[1] + "\n"  + "*" + mp1[2] + "\n"  + "*" + mp2[0] + "\n"  + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/92/BBCS_Ragna_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ra.command(name="6c", pass_context=False)  # Amane from blazblue
    async def _6c_ra(self):   
        """Staple launcher off crouching opponents"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info1.find_all('li')]
            mp2 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n"  + "*" + mp1[1] + "\n"  + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ec/BBCS_Ragna_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="3c", pass_context=False)  # Amane from blazblue
    async def _3c_ra(self):   
        """The okizeme setup off this move is still good, but not as versatile anymore"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mps = [fo.get_text() for fo in info1.find_all('li')]
            mp1 = [ui.get_text() for ui in info1.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mps[0] + "\n"  + "*" + mp1[0] + "```" 
            mpd = "```" + "*" + mp1[1]  + "\n"  + "*" + mps[1] + "\n"  + "*" + mps[2] + "\n"  + "*" + mps[3] + "\n"  + "*" + mps[4] + "\n"  + "*" + mps[5] + "\n"  + "*" + mp1[2] + "```" 
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Cont:"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/ee/BBCS_Ragna_3C.png')
            embed1.add_field(name='Attack Props', value=mpd, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @ra.command(name="ja", pass_context=False)  # Amane from blazblue
    async def _ja_ra(self):   
        """Simple aerial jab"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCS_Ragna_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @ra.command(name="jb", pass_context=False)  # Amane from blazblue
    async def _jb_ra(self): 
        """Aerial crossup move"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b4/BBCS_Ragna_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @ra.command(name="jc", pass_context=False)  # Amane from blazblue
    async def _jc_ra(self):  
        """Main aerial approach, due to the huge hitbox"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/07/BBCS_Ragna_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @ra.command(name="5d", pass_context=False)  # Amane from blazblue
    async def _5d_ra(self): 
        """Valuable in combos, not so much elsewhere"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[5]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp = [ninja.get_text() for ninja in info.find_all('li')]
            mpp = [nin.get_text() for nin in info1.find_all('li')]
            mp2 = info.find('p').get_text()
            mp22 = info1.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            fro = "```" + "*" + mp[0] + "\n" + "*" + mp[1] + "\n" + "*" + mp2 + "```"
            afro = "```" + "*" + mpp[0] + "\n" + "*" + mpp[1] + "\n" + "*" + mp22 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5b/BBCS_Ragna_5D.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=fro, inline='true')
            embed.add_field(name="OD Attack Props:", value=afro, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="2d", pass_context=False)  # Amane from blazblue
    async def _2d_ra(self):   
        """Safe move when spaced properly"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[5]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp = [ninja.get_text() for ninja in info.find_all('li')]
            mpp = [nin.get_text() for nin in info1.find_all('li')]
            mp22 = info1.find('p').get_text()
            mp2 = [up.get_text() for up in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            fro = "```" + "*" + mp[0] + "\n" + "*" + mp[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            afro = "```" + "*" + mpp[0] + "\n" + "*" + mpp[1] + "\n" + "*" + mpp[2] + "\n" + "*" + mp22 + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f4/BBCS_Ragna_2D.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Normal Attack Props:", value=fro, inline='true')
            embed.add_field(name="OD Attack Props:", value=afro, inline='true')
			
            await self.bot.say(embed=embed)	
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="6d", pass_context=False)  # Amane from blazblue
    async def _6d_ra(self): 
        """Great mix-up potential, but can be tricky to execute consistently"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[5]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [ninja.get_text() for ninja in info.find_all('li')]
            mp3 = [nin.get_text() for nin in info1.find_all('li')]
            mp2 = [na.get_text() for na in info.find_all('p')]
            mp4 = info1.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[2] + "```"
            mpB = "```" + "*" + "The overhead is from j.D. There is absolutely no gap between 6D and j.D, no matter how late you perform j.D (unless you land before j.D comes out), so if you are close enough when 6D lands, the overhead is almost guaranteed. The only time j.D can whiff is when 6D hits too far away or the opponent barriers while slightly spaced away. Fortunately, you cannot be punished even if j.D does not hit, due to the frame advantage. The low is performed slightly differently. To perform the low, use j.D just before landing, then input 2B. Be wary that because 2B has a 9 frame start-up, many characters' fastest moves are able to beat you out. Your best bet for landing 2B in this situation is to condition the opponent to block high after 6D (using j.D), and then surprising them with 2B. " + "```" 
            mpC = "```" + "*" + "Performing the throw is similar to performing the low, but it is riskier. To perform the low, use j.D just before landing, then input throw. The hitbox on throw is very small, so any sort of barrier or spacing will cause the throw to miss. You can utilize a kara throw (B~C) to gain a tiny bit of distance so that the throw will land. Overall, use the throw option scarcely." + "```" 
            mpD = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp3[3] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.add_field(name="Normal FD", value=tab)
            embed.add_field(name="OD FD", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Attack Props:", value=mpD, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6D Norm Cont:"
            embed1.add_field(name='Cont.', value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "6D Norm Cont:"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/8/8d/BBCS_Ragna_6D.png')
            embed2.add_field(name='Cont.', value=mpC, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="jd", pass_context=False)  # Amane from blazblue
    async def _jd_ra(self):   
        """Trades damage for lifesteal"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[5]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp = info.find('li').get_text()
            mpp = info.find('p').get_text()
            mp2 = info1.find('li').get_text()
            mp22 = info1.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            fro = "```" + "*" + mp + "\n" + "*" + mpp + "```"
            afro = "```" + "*" + mp2 + "\n" + "*" + mp22 + "```"
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d5/BBCS_Ragna_jD.png')
            embed.add_field(name="Normal FD", value=tab)
            embed.add_field(name="OD FD", value=tab1)
            embed.add_field(name="Normal Attack Props:", value=fro, inline='true')
            embed.add_field(name="OD Attack Props:", value=afro, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="ft", pass_context=False)  # Amane from blazblue
    async def _ft_ra(self):   
        """This will sting!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('li').get_text()
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            fro = "```" + "*" + mp + "\n" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c2/BBCS_Ragna_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=fro, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="bt", pass_context=False)  # Amane from blazblue
    async def _bt_ra(self):   
        """Here comes the combo"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('li').get_text()
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            fro = "```" + "*" + mp + "\n" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCS_Ragna_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=fro, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="at", pass_context=False)  # Amane from blazblue
    async def _at_ra(self):   
        """Pretty much his only mandatory throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('li').get_text()
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            fro = "```" + "*" + mp + "\n" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/03/BBCS_Ragna_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=fro, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="ca", pass_context=False)  # Amane from blazblue
    async def _ca_ra(self):   
        """Same animation as 5B, with the same start-up and hitbox"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('li').get_text()
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            fro = "```" + "*" + mp + "\n" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a6/BBCS_Ragna_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=fro, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="ct", pass_context=False)  # Amane from blazblue
    async def _ct_ra(self): 
        """A Crush Trigger that is as basic as you can get"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp = [nin.get_text() for nin in info.find_all('li')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            fro = "```" + "*" + mp[0] + "\n" + "*" + mp[1] + "\n" + "*" + mp[2] + "\n" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a0/BBCP_Ragna_CrushTrigger.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=fro, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="214a", pass_context=False)  # Amane from blazblue
    async def _214a_ra(self): 
        """Combo material for just about any mid-screen combo, Follow-up:  Typical combo ender for pushing your opponent towards the corner and for good corner okizeme"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            my_table1 = table[47]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[3]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
            info2 = table_body1.find_all('tr')[4]

			
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = [fo1.get_text() for fo1 in info1.find_all('li')]
            mp3 = [fo2.get_text() for fo2 in info2.find_all('li')]
            mp4 = info.find('p').get_text()
            mp5 = info2.find('p').get_text()


            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp4 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpC = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp5 + "```"
			
			
            embed = discord.Embed()
            embed.title = "Hell's Fang"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/70/BBCS_Ragna_HellsFang.png')
            embed.add_field(name="Hell's Fang Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed()
            embed1.title = "Hell's Fang: Follow-up"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Ragna_HellsFangFollowup.png')
            embed1.add_field(name="214D Follow-up Normal Frame Data", value=tab1)
            embed1.add_field(name="Follow-up Normal Attack Props", value=mpB)
            embed1.add_field(name="214D Follow-up OverDrive Frame Data", value=tab2)
            embed1.add_field(name="Follow-up OverDrive Attack Props", value=mpC)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="623c", pass_context=False)  # Amane from blazblue
    async def _623c_ra(self):
        """Wake up DP! C version is your go-to reversal"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            my_table1 = table[51]
            my_table2 = table[53]
            my_table3 = table[55]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            table_body3 = my_table3.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
            info2 = table_body.find_all('tr')[12]
			
            headers2 = table_body1.find_all('tr')[1]
            info3 = table_body1.find_all('tr')[2]
			
            headers3 = table_body2.find_all('tr')[1]
            info4 =table_body2.find_all('tr')[2]
			
            headers4 = table_body3.find_all('tr')[1]
            info5 = table_body3.find_all('tr')[2]
            headers5 = table_body3.find_all('tr')[3]
            info6 = table_body3.find_all('tr')[4]
			

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers4.find('th').get_text()
            vrs3 = headers5.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info1.find('li').get_text()
            mp3 = info2.find('p').get_text()
            mp4 = info3.find('li').get_text()
            mp5 = info3.find('p').get_text()
            mp6 = [op.get_text() for op in info4.find_all('li')]
            mp7 = info4.find('p').get_text()
            mp8 = info5.find('li').get_text()
            mp9 = [op1.get_text() for op1 in info6.find_all('li')]
            mp10 = info6.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs2], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs3], ["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "\n" + "*" + mp3 + "```"
            mpC = "```" + "*" + mp4 + "\n" + "*" + mp5 + "```"
            mpD = "```" + "*" + mp6[0] + "\n" + "*" + mp6[1] + "\n" + "*" + mp7 + "```"
            mpE = "```" + "*" + mp8 + "```"
            mpF = "```" + "*" + mp9[0] + "\n" + "*" + mp9[1] + "\n" + "*" + mp9[2] + "\n" + "*" + mp10 + "```"
			
			
            embed = discord.Embed()
            embed.title = "C Inferno Divider"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/50/BBCS_Ragna_InfernoDivider.png')
            embed.add_field(name="C Inferno Divider", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
            embed.add_field(name="Aerial C Inferno Divider", value=tab1)
            embed.add_field(name="Attack Props:", value=mpB)
			
            embed1 = discord.Embed(description='236C during Inferno Divider')
            embed1.title = "Upper"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/39/BBCS_Ragna_Upper.png')
            embed1.add_field(name="Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpC)
            embed1.set_footer(text='Otherwise known as "that one in the middle"')
			
            embed2 = discord.Embed(description='236C after Upper')
            embed2.title = "Straight Punch"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/5/5a/BBCS_Ragna_Straight.png')
            embed2.add_field(name="Frame Data", value=tab3)
            embed2.add_field(name="Attack Props:", value=mpD)
            embed2.set_footer(text="For when you're otherwise just out of corner's reach")
			
            embed3 = discord.Embed(description='214D after Upper')
            embed3.title = "Ax Kick"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/1/19/BBCS_Ragna_AxKick.png')
            embed3.add_field(name="Normal Frame Data", value=tab4)
            embed3.add_field(name="Normal Attack Props:", value=mpE)
            embed3.add_field(name="OD Frame Data", value=tab)
            embed3.add_field(name="OD Attack Props:", value=mpF)
            embed3.set_footer(text="Ragna's most universal form of knockdown")
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="623d", pass_context=False)  # Amane from blazblue
    async def _623d_ra(self):  
        """Damage DP, D version is your go-to combo ender for damage and light okizeme"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            my_table1 = table[51]
            my_table2 = table[53]
            my_table3 = table[55]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            table_body3 = my_table3.find("table")
            headers = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[6]
            headers1 = table_body.find_all('tr')[7]
            info1 = table_body.find_all('tr')[8]
            headers2 = table_body.find_all('tr')[9]
            info2 = table_body.find_all('tr')[10]
            headers3 = table_body.find_all('tr')[11]
            info3 = table_body.find_all('tr')[12]
			
            headers4 = table_body1.find_all('tr')[1]
            info4 = table_body1.find_all('tr')[2]
			
            headers5 = table_body2.find_all('tr')[1]
            info5 =table_body2.find_all('tr')[2]
			
            headers6 = table_body3.find_all('tr')[1]
            info6 = table_body3.find_all('tr')[2]
            headers7 = table_body3.find_all('tr')[3]
            info7 = table_body3.find_all('tr')[4]
			

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers6.find('th').get_text()
            vrs5 = headers7.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]
            Data7 = [head7.get_text() for head7 in headers7.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info1.find('li').get_text()
            mp3 = info2.find('li').get_text()
            mp4 = info3.find('li').get_text()
            mp5 = info4.find('li').get_text()
            mp6 = info4.find('p').get_text()
            mp7 = [op.get_text() for op in info5.find_all('li')]
            mp8 = info5.find('p').get_text()
            mp9 = info6.find('li').get_text()
            mp10 = [op.get_text() for op in info7.find_all('li')]
            mp11 = info7.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')
            tab6 = tabulate([["Version", vrs4], ["Damage", Data6[0]], ["Guard", Data6[1]], ["Startup", Data6[2]], ["Active", Data6[3]], ["Recovery", Data6[4]], ["Frame Adv.", Data6[5]], ["Attribute", Data6[6]]], tablefmt='simple', stralign='left')
            tab7 = tabulate([["Version", vrs5], ["Damage", Data7[0]], ["Guard", Data7[1]], ["Startup", Data7[2]], ["Active", Data7[3]], ["Recovery", Data7[4]], ["Frame Adv.", Data7[5]], ["Attribute", Data7[6]]], tablefmt='simple', stralign='left')
            mpG = "```" + "*" + mp9 + "```"
            mpH = "```" + "*" + mp10[0] + "\n" + "*" + mp10[1] + "\n" + "*" + mp10[2] + "\n" + "*" + mp11 + "```"
            mpF = "```" + "*" + mp7[0] + "\n" + "*" + mp7[1] + "\n" + "*" + mp8 + "```"
            mpE = "```" + "*" + mp5 + "\n" + "*" + mp6 + "```"
            mpD = "```" + "*" + mp4 + "```"
            mpC = "```" + "*" + mp3 + "```"
            mpB = "```" + "*" + mp2 + "```"
            mpA = "```" + "*" + mp1 + "```"
			
			
            embed = discord.Embed()
            embed.title = "D Inferno Divider"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/50/BBCS_Ragna_InfernoDivider.png')
            embed.add_field(name="D Inferno Divider", value=tab)
            embed.add_field(name="D Inferno Divider:  Attack Props", value=mpA)
            embed.add_field(name="Aerial D Inferno Divider", value=tab1)
            embed.add_field(name="Aerial D Inferno Divider:  Attack Props", value=mpB)
            embed.add_field(name="Over Drive D Inferno Divider", value=tab2)
            embed.add_field(name="OD D Inferno Divider:  Attack Props", value=mpC)
            embed.add_field(name="Over Drive Aerial D Inferno Divider", value=tab3)
            embed.add_field(name="OD Aerial D Inferno Divider:  Attack Props", value=mpD)
			
            embed1 = discord.Embed(description='236C during Inferno Divider')
            embed1.title = "Upper"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/39/BBCS_Ragna_Upper.png')
            embed1.add_field(name="Frame Data", value=tab4)
            embed1.add_field(name="Attack Props", value=mpE)
            embed1.set_footer(text='Otherwise known as "that one in the middle"')
			
            embed2 = discord.Embed(description='236C after Upper')
            embed2.title = "Straight Punch"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/5/5a/BBCS_Ragna_Straight.png')
            embed2.add_field(name="Frame Data", value=tab5)
            embed2.add_field(name="Attack Props", value=mpF)
            embed2.set_footer(text="For when you're otherwise just out of corner's reach")
			
            embed3 = discord.Embed(description='214D after Upper')
            embed3.title = "Ax Kick"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/1/19/BBCS_Ragna_AxKick.png')
            embed3.add_field(name="Normal:  Frame Data", value=tab6)
            embed3.add_field(name="Normal Attack Props", value=mpG)
            embed3.add_field(name="OD:  Frame Data", value=tab7)
            embed3.add_field(name="OD Attack Props", value=mpH)
            embed3.set_footer(text="Ragna's most universal form of knockdown")
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="214b", pass_context=False)  # Amane from blazblue
    async def _214b_ra(self):   
        """A risky overhead that now functions as a mid-screen combo part"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            my_table1 = table[59]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            headers3 = table_body1.find_all('tr')[3]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[4]
            info2 = table_body1.find_all('tr')[2]
            info3 = table_body1.find_all('tr')[4]

			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = info.find('li').get_text()
            mp3 = info1.find('p').get_text()
            mp2 = [op.get_text() for op in info1.find_all('li')]
            mp4 = info2.find('li').get_text()
            mp6 = [po.get_text() for po in info3.find_all('p')]
            mp5 = info3.find('li').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp3 + "```"
            mpC = "```" + "*" + mp4 + "```"
            mpD = "```" + "*" + mp5 + "\n" + "*" + mp6[0] + "\n" + "*" + mp6[1] + "```"
			
			
            embed = discord.Embed()
            embed.title = "Gauntlet Hades"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/de/BBCS_Ragna_GauntletHades.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpB)
			
            embed1 = discord.Embed(description='214D after Gauntlet Hades')
            embed1.title = "Spin Kick"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/6f/BBCS_Ragna_SpinKick.png')
            embed1.add_field(name="214D Follow-up Normal Frame Data", value=tab1)
            embed1.add_field(name="Follow-up Normal Attack Props:", value=mpC)
            embed1.add_field(name="214D Follow-up OverDrive Frame Data", value=tab2)
            embed1.add_field(name="Follow-up OverDrive Attack Props:", value=mpD)
            embed1.set_footer(text='The follow-up to Gauntlet Hades, and now gets more love in regular combos')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="236d", pass_context=False)  # Amane from blazblue
    async def _236d_ra(self):   
        """A beefy projectile used for resetting pressure. Now actually moves!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp3 = [nin.get_text() for nin in info1.find_all('p')]
            mp2 = info1.find('li').get_text()
            mp1 = info.find('li').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpB = "```" + "*" + mp2 + "\n" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Dead Spike"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5f/BBCP_Ragna_DeadSpike.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="Normal Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="22c", pass_context=False)  # Amane from blazblue
    async def _22c_ra(self):   
        """Massive corner carry potential mid-screen and a fantastic combo part in the corner"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [nin.get_text() for nin in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Not Over Yet"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/13/BBCS_Ragna_NotOverYet.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="214d", pass_context=False)  # Amane from blazblue
    async def _214d_ra(self):  
        """The new king of lifesteal specials. Ground version is incredibly slow but advantageous."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            table_body1 = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[6]
            info2 = table_body.find_all('tr')[8]
			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            mp3 = [po.get_text() for po in info2.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Blood Scythe"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ec/BBCP_Ragna_BloodScythe.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="j214d", pass_context=False)  # Amane from blazblue
    async def _j214d_ra(self):   
        """The new king of lifesteal specials.  Aerial version is great for corner carry."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            table_body1 = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[7]
            info = table_body.find_all('tr')[4]
            info1 = table_body.find_all('tr')[8]
			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info1.find('li').get_text()
            mp3 = [furry.get_text() for furry in info1.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "\n" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
            mpC = "```" + "*" + mp3[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Aerial Blood Scythe"
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="Attack Props", value=mpA, inline='true')
            embed.add_field(name="OverDrive Frame Data", value=tab1)
            embed.add_field(name="OverDrive Attack Properties", value=mpB, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Attack Props. Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/ec/BBCP_Ragna_BloodScythe.png')
            embed1.add_field(name="Attack Props:", value=mpC, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="j214c", pass_context=False)  # Amane from blazblue
    async def _j214c_ra(self):   
        """When ending air combos, do you choose between okizeme, or damage?"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            my_table1 = table[69]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[3]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
            info2 = table_body1.find_all('tr')[4]
			
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = info1.find('li').get_text()
            mp4 = info2.find('li').get_text()
            mp5 = info2.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"		
            mpC = "```" + "*" + mp4 + "\n" + "*" + mp5 + "```"			
			
            embed = discord.Embed()
            embed.title = "Nightmare Edge"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fa/BBCF_Ragna_NightmareEdge.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='214D after Nightmare Edge')
            embed1.title = "Nightmare Edge"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/fc/BBCF_Ragna_NightmareEdgeFollowUp.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props", value=mpB, inline='true')
            embed1.add_field(name="OD Frame Data", value=tab2)
            embed1.add_field(name="OD Attack Props", value=mpC, inline='true')
            embed1.set_footer(text='For when you choose damage/lifesteal')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="632146d", pass_context=False)  # Amane from blazblue
    async def _632146d_ra(self):  
        """Use this outside of Overdrive if it will kill. Use this during Overdrive for Soul Eater progression and possible relaunches in the corner."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[4]
			
            vrs1 = headers.find('th').get_text()
            vrs2 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            mp3 = [po.get_text() for po in info1.find_all('p')]

            tab = tabulate([["Version", vrs1], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs2], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Carnage Scissors"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1b/BBCS_Ragna_CarnageScissors.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="214214d", pass_context=False)  # Amane from blazblue
    async def _214214d_ra(self):  
        """A useless, blockable move without Overdrive. In OD, it's unblockable and actually a very good move."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[4]
			
            vrs1 = headers.find('th').get_text()
            vrs2 = headers1.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            mp3 = [po.get_text() for po in info1.find_all('p')]

            tab = tabulate([["Version", vrs1], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs2], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Devoured by Darkness"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6f/BBCS_Ragna_DevouredByDarkness.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="abcd", pass_context=False)  # Amane from blazblue
    async def _abcd_ra(self):  
        """Exceed Accel:  A+B+C+D during Overdrive"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]
			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Seed of Tartarus"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1f/BBCF_Ragna_SeedOfTartarus.png')
            embed.add_field(name="w/o cancel, no Active Flow Frame Data", value=tab)
            embed.add_field(name="w/ cancel, no Active Flow Frame Data", value=tab1)
            embed.add_field(name="w/o cancel, Active Flow Frame Data", value=tab2)
            embed.add_field(name="w/ cancel, Active Flow Frame Data", value=tab3)
            embed.add_field(name="Attack Properties", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ra.command(name="2141236c", pass_context=False)  # Amane from blazblue
    async def _2141236c_ra(self):  
        """There is no Hell, only darkness."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Ragna_the_Bloodedge"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Black Onslaught"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cc/BBCS_Ragna_BlackOnslaught2.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
#################################################################################################################################################
    @es.command(name="5a", pass_context=False)  # Es from blazblue
    async def _5a_es(self):
        """Terribly short range"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"         
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/thumb/1/15/BBCF_Es_5A.png/175px-BBCF_Es_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @es.command(name="5b", pass_context=False)  # Es from blazblue
    async def _5b_es(self):   
        """Combo Filler"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"  
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/09/BBCF_Es_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @es.command(name="5c", pass_context=False)  # Es from blazblue
    async def _5c_es(self):  
        """Long recovery"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7b/BBCF_Es_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @es.command(name="2a", pass_context=False)  # Es from blazblue
    async def _2a_es(self):  
        """Same story as 5A"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/62/BBCF_Es_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @es.command(name="2b", pass_context=False)  # Es from blazblue
    async def _2b_es(self):   
        """Decent neutral poke"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ee/BBCF_Es_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @es.command(name="2c", pass_context=False)  # Es from blazblue
    async def _2c_es(self):   
        """Combo Tool/Punish Starter"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/91/BBCF_Es_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @es.command(name="6a", pass_context=False)  # Es from blazblue
    async def _6a_es(self):   
        """Pretty decent overhead"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2]  + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/dc/BBCF_Es_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @es.command(name="6b", pass_context=False)  # Es from blazblue
    async def _6b_es(self): 
        """Main anti air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]          

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ea/BBCF_Es_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @es.command(name="6c", pass_context=False)  # Es from blazblue
    async def _6c_es(self): 
        """Combo Filler"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()          

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/43/BBCF_Es_6C.png')
            embed.add_field(name="Normal 6C", value=tab)
            embed.add_field(name="Dash 6C", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @es.command(name="3c", pass_context=False)  # Es from blazblue
    async def _3c_es(self):   
        """Combo Ender/Poke"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')] 		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4f/BBCF_Es_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @es.command(name="ja", pass_context=False)  # Es from blazblue
    async def _ja_es(self): 
        """Situational air to air"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()  

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1b/BBCF_Es_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @es.command(name="jb", pass_context=False)  # Es from blazblue
    async def _jb_es(self):  
        """Great air to air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]          

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9f/BBCF_Es_jB.png')
            embed.add_field(name="Normal", value=tab)
            embed.add_field(name="Follow-up", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @es.command(name="jc", pass_context=False)  # Es from blazblue
    async def _jc_es(self):  
        """Optional jump-in"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]  		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "JC"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7f/BBCF_Es_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @es.command(name="5d", pass_context=False)  # Es from blazblue
    async def _5d_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs3 = headers3.find('th').get_text()
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]  
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]  			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f0/BBCF_Es_5D.png')
            embed.add_field(name="Normal", value=tab)
            embed.add_field(name="OD", value=tab1)
            embed.add_field(name="Crest", value=tab2)
            embed.add_field(name="OD Crest", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @es.command(name="2d", pass_context=False)  # Es from blazblue
    async def _2d_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs3 = headers3.find('th').get_text()
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6a/BBCF_Es_2D.png')
            embed.add_field(name="Normal", value=tab)
            embed.add_field(name="OD", value=tab1)
            embed.add_field(name="Crest", value=tab2)
            embed.add_field(name="OD Crest", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @es.command(name="6d", pass_context=False)  # Es from blazblue
    async def _6d_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs3 = headers3.find('th').get_text()
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')] 	
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/60/BBCF_Es_6D.png')
            embed.add_field(name="Normal", value=tab)
            embed.add_field(name="OD", value=tab1)
            embed.add_field(name="Crest", value=tab2)
            embed.add_field(name="OD Crest", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @es.command(name="jd", pass_context=False)  # Es from blazblue
    async def _jd_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs3 = headers3.find('th').get_text()
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]	 			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')		
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a6/BBCF_Es_jD.png')
            embed.add_field(name="Normal", value=tab)
            embed.add_field(name="OD", value=tab1)
            embed.add_field(name="Crest", value=tab2)
            embed.add_field(name="OD Crest", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @es.command(name="ft", pass_context=False)  # Es from blazblue
    async def _ft_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/21/BBCF_Es_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @es.command(name="bt", pass_context=False)  # Es from blazblue
    async def _bt_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e5/BBCF_Es_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @es.command(name="at", pass_context=False)  # Es from blazblue
    async def _at_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[5]
            info =  table_body.find_all('tr')[6]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCF_Es_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @es.command(name="ca", pass_context=False)  # Es from blazblue
    async def _ca_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7b/BBCF_Es_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @es.command(name="ct", pass_context=False)  # Es from blazblue
    async def _ct_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]

            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]		

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/37/BBCF_Es_CT.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @es.command(name="214d", pass_context=False)  # Es from blazblue
    async def _s1_es(self):   
        """Does not enhance her fireball attacks"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Type: Enchanter Bors"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/aa/BBCF_Es_EnchanterBors.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @es.command(name="623c", pass_context=False)  # Es from blazblue
    async def _s2_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]      

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Type: Slasher Griflet"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/75/BBCF_Es_SlasherGriflet.png')
            embed.add_field(name="Normal 623C", value=tab)
            embed.add_field(name="623C Crest", value=tab1)
            embed.add_field(name="623C Followup", value=tab2)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @es.command(name="214a", pass_context=False)  # Es from blazblue
    async def _s3_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()       

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Type: Assaulter Erec"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/93/BBCF_Es_AssaulterErec.png')
            #embed.set_footer(icon_url='http://www.dustloop.com/wiki/index.php/File:BBCF_Es_AssaulterErec2.png') It does not look like it supports multiple inages being embedded, commented out until this changes.
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @es.command(name="214b", pass_context=False)  # Es from blazblue
    async def _s4_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[5]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp3 = [po.get_text() for po in info1.find_all('p')]
            mp2 = [op.get_text() for op in info1.find_all('li')]
            mp1 = info.find('li').get_text()  			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "\n" + "*" + mp2[4] + "\n" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Type: Slasher Gawain"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/00/BBCF_Es_Gawain.png')
            embed.add_field(name="Uncharged", value=tab)
            embed.add_field(name="Charged", value=tab1)
            embed.add_field(name="Charged Attack Props:", value=mpA, inline='true')
            embed.add_field(name="Gawain Crest", value=tab2)
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @es.command(name="214c", pass_context=False)  # Es from blazblue
    async def _s5_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[4]
            headers3 = table_body.find_all('tr')[6]
            info = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[5]
            info2 = table_body.find_all('tr')[7]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs3 = headers3.find('th').get_text()
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info1.find('li').get_text()
            mp3 = [op.get_text() for op in info2.find_all('li')]
            mp4 = [po.get_text() for po in info2.find_all('p')]
       

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
            mpC = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Type: Slasher Mordred"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c2/BBCF_Es_SlasherMordred2.png')
            embed.add_field(name="214C", value=tab)
            embed.add_field(name="214C Crest", value=tab1)
            embed.add_field(name="214C Attack Props:", value=mpA, inline='true')
            embed.add_field(name="214C->214C", value=tab2)
            embed.add_field(name="214C -> 214C Attack Props:", value=mpB, inline='true')
            embed.add_field(name="214C->214C Crest", value=tab3)
            embed.add_field(name="Attack Props:", value=mpC, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @es.command(name="tsb", pass_context=False)  # Es from blazblue
    async def _s6_es(self):
        """236A/B (Air OK)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[5]
            headers4 = table_body.find_all('tr')[6]
            headers5 = table_body.find_all('tr')[7]
            headers6 = table_body.find_all('tr')[8]
            info = table_body.find_all('tr')[4]
            info1 = table_body.find_all('tr')[9]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs3 = headers3.find('th').get_text()
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            vrs4 = headers4.find('th').get_text()
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            vrs5 = headers5.find('th').get_text()
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            vrs6 = headers6.find('th').get_text()
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]
            mp1 = info.find('li').get_text()   
            mp2 = [op.get_text() for op in info1.find_all('li')]
            mp3 = [po.get_text() for po in info1.find_all('p')]			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')
            tab6 = tabulate([["Version", vrs6], ["Damage", Data6[0]], ["Guard", Data6[1]], ["Startup", Data6[2]], ["Active", Data6[3]], ["Recovery", Data6[4]], ["Frame Adv.", Data6[5]], ["Attribute", Data6[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            mpC = "```" + "*" + mp2[3] + "\n" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "```"

			
            embed = discord.Embed()
            embed.title = "Type: Shooter Breunor"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ac/BBCF_Es_ShooterBreunor.png')
            embed.add_field(name="Ground A", value=tab)
            embed.add_field(name="Ground B", value=tab1)
            embed.add_field(name="Additional Breunor A/B", value=tab2)
            embed.add_field(name="Addition Breunor A/B Attack Props:", value=mpA, inline='true')
            embed.add_field(name="Powered Up Shot", value=tab3)
			
            embed1 = discord.Embed()
            embed1.title = "Type: Shooter Breunor"
            embed1.add_field(name="Air A", value=tab4)
            embed1.add_field(name="Air B Breunor", value=tab5)
            embed1.add_field(name="Additional Air Breunor A/B", value=tab6)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Type: Shooter Breunor Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCF_Es_ShooterBreunorAir.png')
            embed2.add_field(name="Attack Props:", value=mpC)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @es.command(name="j2b", pass_context=False)  # Es from blazblue
    async def _s7_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp2 = info.find('p').get_text()   
            mp1 = [op.get_text() for op in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Type: Assaulter Tristan"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/64/BBCF_Es_j2BBB.png')
            embed.add_field(name="J.2B", value=tab)
            embed.add_field(name="J.2BB", value=tab1)
            embed.add_field(name="J.2BB", value=tab2)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @es.command(name="632146d", pass_context=False)  # Es from blazblue
    async def _dd1_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Type: Enchanter Percival"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/91/BBCF_Es_EnchanterPercival.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @es.command(name="632146a", pass_context=False)  # Es from blazblue
    async def _dd2_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            headers2 = table_body.find_all('tr')[5]
            headers3 = table_body.find_all('tr')[7]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[4]
            info2 = table_body.find_all('tr')[6]
            info3 = table_body.find_all('tr')[8]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs3 = headers3.find('th').get_text()
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [op.get_text() for op in info1.find_all('li')]
            mp3 = info2.find('li').get_text()
            mp4 = [op1.get_text() for op1 in info3.find_all('li')]
            mp5 = [po.get_text() for po in info3.find_all('p')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpC = "```" + "*" + mp3 + "```"
            mpD = "```" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "\n" + "*" + mp5[0] + "\n" + "*" + mp5[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Type: Shooter Palamedes"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4a/BBCF_Es_ShooterPalamedes.png')
            embed.add_field(name="Ground", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="Ground(Overdrive)", value=tab1)
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
            embed.add_field(name="Air(Normal)", value=tab2)
            embed.add_field(name="Attack Props:", value=mpC, inline='true')
            embed.add_field(name="Air(Overdrive)", value=tab3)
            embed.add_field(name="Attack Props:", value=mpD, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	

			#Note we may do a merger into one command like TSB during recode.
			
    @es.command(name="632146b", pass_context=False)  # Es from blazblue
    async def _dd2a_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            headers2 = table_body.find_all('tr')[5]
            headers3 = table_body.find_all('tr')[7]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[4]
            info2 = table_body.find_all('tr')[6]
            info3 = table_body.find_all('tr')[8]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs3 = headers3.find('th').get_text()
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [op.get_text() for op in info1.find_all('li')]
            mp3 = info2.find('li').get_text()
            mp4 = [op1.get_text() for op1 in info3.find_all('li')]
            mp5 = [po.get_text() for po in info3.find_all('p')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpC = "```" + "*" + mp3 + "```"
            mpD = "```" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "\n" + "*" + mp5[0] + "\n" + "*" + mp5[1] + "```"
			
            embed = discord.Embed(description='Air Ok')
            embed.title = "Type: Shooter Palamedes"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4a/BBCF_Es_ShooterPalamedes.png')
            embed.add_field(name="Ground", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="Ground(Overdrive)", value=tab1)
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
            embed.add_field(name="Air(Normal)", value=tab2)
            embed.add_field(name="Attack Props:", value=mpC, inline='true')
            embed.add_field(name="Air(Overdrive)", value=tab3)
            embed.add_field(name="Attack Props:", value=mpD, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @es.command(name="632146c", pass_context=False)  # Es from blazblue
    async def _dd3_es(self):
        """Reversal super"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[4]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [op.get_text() for op in info1.find_all('li')]
            mp3 = info1.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Type: Slasher Galahad"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b1/BBCF_Es_SlasherGalahad.png')
            embed.add_field(name="Regular", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OverDrive", value=tab1)
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @es.command(name="abcd", pass_context=False)  # Es from blazblue
    async def _abcd_es(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Type: Braver Lancelot"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCF_Es_BraverLancelot.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @es.command(name="236236c", pass_context=False)  # Es from blazblue
    async def _236236c_es(self):  
        """DATA DRAIN"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Es"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Type: Exterminator Artorius"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/03/BBCF_Es_AH.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
####################################################################################################
    @az.command(name="5a", pass_context=False)  # Azrael from blazblue
    async def _5a_az(self):
        """Basic Poke"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info2 = movesp.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info2 + "```"
            			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a1/BBCP_Azrael_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="5b", pass_context=False)  # Azrael from blazblue
    async def _5b_az(self):   
        """Good Poke/Decent Anti-air"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            my_table1 = table[5]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
            movesp1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Info = movesp.find('p').get_text()
            Info1 = movesp1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "```"
            mp1 = "```" + "*" + Info1 + "```"
			
            embed = discord.Embed()
            embed.title = '5b'
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCP_Azrael_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed(description='Easy Hitconfirm')
            embed1.title = '5bb'
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/cb/BBCP_Azrael_5BB.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mp1, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="5c", pass_context=False)  # Azrael from blazblue
    async def _5c_az(self): 
        """Mid-range Poke"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find('li').get_text()
            Info1 = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "\n" + "*" + Info1 + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/47/BBCP_Azrael_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @az.command(name="2a", pass_context=False)  # Azrael from blazblue
    async def _2a_az(self):   
        """Crouching Low Poke"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/71/BBCP_Azrael_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="2b", pass_context=False)  # Azrael from blazblue
    async def _2b_az(self): 
        """Further Crouching Poke/Combo Extender"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCP_Azrael_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="2c", pass_context=False)  # Azrael from blazblue
    async def _2c_az(self):   
        """Mostly Combo Filler/Somewhat Anti-air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b2/BBCP_Azrael_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="6a", pass_context=False)  # Azrael from blazblue
    async def _6a_az(self):  
        """Combo Filler/Decent Against Ground Attacks"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find('p').get_text()            

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3  + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bf/BBCP_Azrael_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="6b", pass_context=False)  # Azrael from blazblue
    async def _6b_az(self):  
        """Situational Anti-air"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text() 
            mp3 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/79/BBCP_Azrael_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @az.command(name="6c", pass_context=False)  # Azrael from blazblue
    async def _6c_az(self):  
        """Good Range"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()  
            mp3 = info.find_all('li')[2].get_text() 
            mp4 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/94/BBCP_Azrael_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="3c", pass_context=False)  # Azrael from blazblue
    async def _3c_az(self):   
        """Long-range Low"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]	
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1f/BBCP_Azrael_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="ja", pass_context=False)  # Azrael from blazblue
    async def _ja_az(self): 
        """Basic Air Poke"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c3/BBCP_Azrael_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="jb", pass_context=False)  # Azrael from blazblue
    async def _jb_az(self):   
        """Good Air Poke/Crosses-Up"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text() 
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/81/BBCP_Azrael_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="jc", pass_context=False)  # Azrael from blazblue
    async def _jc_az(self): 
        """Mostly Combo Filler"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "JC"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCP_Azrael_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="j2c", pass_context=False)  # Azrael from blazblue
    async def _j2c_az(self): 
        """Dive Kick"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ed/BBCP_Azrael_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="5d", pass_context=False)  # Azrael from blazblue
    async def _5d_az(self):   
        """Overhead"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = info.find('p').get_text()						

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/28/BBCP_Azrael_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="2d", pass_context=False)  # Azrael from blazblue
    async def _2d_az(self):  
        """Low"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/be/BBCP_Azrael_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="3d", pass_context=False)  # Azrael from blazblue
    async def _3d_az(self):  
        """Slightly ambiguous low"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "3D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e1/BBCP_Azrael_3D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="6d", pass_context=False)  # Azrael from blazblue
    async def _6d_az(self):  
        """Overhead"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCP_Azrael_6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="jd", pass_context=False)  # Azrael from blazblue
    async def _jd_az(self):  
        """Upper weakpoint air ender"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"			
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/23/BBCP_Azrael_jD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="j2d", pass_context=False)  # Azrael from blazblue
    async def _j2d_az(self):  
        """Lower weakpoint air ender"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"			
			
            embed = discord.Embed()
            embed.title = "J.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cd/BBCP_Azrael_j2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="ft", pass_context=False)  # Azrael from blazblue
    async def _ft_az(self):   
        """Launches upward"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cc/BBCP_Azrael_ForwardThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="bt", pass_context=False)  # Azrael from blazblue
    async def _bt_az(self):   
        """Slams behind him"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6f/BBCP_Azrael_BackThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="at", pass_context=False)  # Azrael from blazblue
    async def _at_az(self):   
        """Drops to the ground"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
		    
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cd/BBCP_Azrael_AirThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="ca", pass_context=False)  # Azrael from blazblue
    async def _ca_az(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]	
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bf/BBCP_Azrael_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @az.command(name="ct", pass_context=False)  # Azrael from blazblue
    async def _ct_az(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/44/BBCP_Azrael_CrushTrigger.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @az.command(name="236a", pass_context=False)  # Azrael from blazblue
    async def _s1_az(self):   
        """Neutral Attack/Pressure Ender"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()


            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Gustaf Buster"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6a/BBCP_Azrael_GustafBuster.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @az.command(name="236c", pass_context=False)  # Azrael from blazblue
    async def _s2_az(self):   
        """Combo filler/Big damage starter"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            my_table1 = table[57]
            my_table2 = table[59]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body2.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[2]
            info2 =  table_body2.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text() 
            mp3 = info2.find('p').get_text()     			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
            mp1 = "```" + "*" + mp2 + "```"
            mp2 = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Tiger Magnum"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/61/BBCP_Azrael_TigerMagnum.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed(description='6C Follow-up after Tiger Magnum')
            embed1.title = "Cobra Strike"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/c2/BBCP_Azrael_CobraStrike.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mp1, inline='true')
			
            embed2 = discord.Embed(description='6C after Cobra Strike')
            embed2.title = "Leopard Launcher"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCP_Azrael_LeopardLauncher.png')
            embed2.add_field(name="Frame Data", value=tab2)
            embed2.add_field(name="Attack Props:", value=mp2, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @az.command(name="214b", pass_context=False)  # Azrael from blazblue
    async def _s3_az(self):   
        """Reversal / Anti-projectile"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            my_table1 = table[63]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find('p').get_text()
            mp4 = info1.find('li').get_text()
            mp5 = info1.find('p').get_text()      			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
            mp1 = "```" + "*" + mp4 + "\n" + "*" + mp5 + "```"
			
            embed = discord.Embed(description='Chargeble')
            embed.title = "Growler Field"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCP_Azrael_Growler_Field.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed(description='236B (After absorbing projectile with Growler Field')
            embed1.title = "Phalanx Cannon)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/4a/BBCP_Azrael_Phalanx_Cannon.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mp1, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @az.command(name="214c", pass_context=False)  # Azrael from blazblue
    async def _s4_az(self):
        """Used for crouch confirm / Random attack"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp1[8] + "```"
			
            embed = discord.Embed(description='or 22C on downed opponent')
            embed.title = "Sentinel Dump"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/db/BBCP_Azrael_SentinelDump.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @az.command(name="623b", pass_context=False)  # Azrael from blazblue
    async def _s5_az(self):   
        """Two-part move AKA DP"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]      

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "```"
			
            embed = discord.Embed()
            embed.title = "Panzer Strike"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0e/BBCF_Azrael_PanzerStrike.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @az.command(name="236d", pass_context=False)  # Azrael from blazblue
    async def _s6_az(self): 
        """Overhead / Leads to corner carry / Big damage"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            my_table1 = table[71]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp3 = [fo1.get_text() for fo1 in info1.find_all('li')]
            mp2 = info.find('p').get_text()
            mp4 = info1.find('p').get_text()     

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed(description='236D (Chargeable)')
            embed.title = "Valiant Crash"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/66/BBCP_Azrael_ValiantCrash.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Press [6] during Valiant Crash w/ upper weakpoint applied')
            embed1.title = "Valiant Charger"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b9/BBCP_Azrael_ValiantCharger.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @az.command(name="214d", pass_context=False)  # Azrael from blazblue
    async def _s7_az(self):   
        """Low / Slightly Useful"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            my_table1 = table[75]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp3 = [fo1.get_text() for fo1 in info1.find_all('li')]
            mp2 = info.find('p').get_text()
            mp4 = info1.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp2 + "```"
            mp1 = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed(description='214D (Chargeable)')
            embed.title = "Hornet Bunker"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/25/BBCP_Azrael_HornetBunker.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed(description='Press [8] during Hornet Bunker w/ lower weakpoint applied')
            embed1.title = "Hornet Chaser"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCP_Azrael_HornetChaser.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mp1, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @az.command(name="236236d", pass_context=False)  # Azrael from blazblue
    async def _dd1_az(self):   
        """Combo ender for extra damage"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Black Hawk Stinger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7b/BBCP_Azrael_BlackHawkStinger.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @az.command(name="214214d", pass_context=False)  # Azrael from blazblue
    async def _dd2_az(self):   
        """Gets both weakpoints / Special effect"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Scud Punishment"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e5/BBCP_Azrael_ScudPunishment.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @az.command(name="abcd", pass_context=False)  # Azrael from blazblue
    async def _abcd_az(self): 
        """Pretty much a souped-up TCL"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find_all('p')[0].get_text()
            mp3 = info.find_all('p')[1].get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Full Spartan"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/07/BBCF_Azrael_FullSpartan.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @az.command(name="632146c", pass_context=False)  # Azrael from blazblue
    async def _632146c_az(self):   
        """Enchant Dragunov"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Azrael"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Patriot Apocalypse"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cf/BBCP_Azrael_PatriotApocalypse1.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')			
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
####################################################################################################
    @jin.command(name="5a", pass_context=False)  # Jin from blazblue
    async def _5a_jin(self):
        """It leads into 5b"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "```"          
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c9/BBCS_Jin_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="5b", pass_context=False)  # Jin from blazblue
    async def _5b_jin(self):   
        """Great tool for its range and speed."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"			
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3a/BBCS_Jin_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="5c", pass_context=False)  # Jin from blazblue
    async def _5c_jin(self): 
        """Good zoning tool, but can lose to mash if you're not careful."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/79/BBCS_Jin_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @jin.command(name="2a", pass_context=False)  # Jin from blazblue
    async def _2a_jin(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e6/BBCS_Jin_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="2b", pass_context=False)  # Jin from blazblue
    async def _2b_jin(self):   
        """Surprisingly long range for its animation."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2d/BBCS_Jin_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="2c", pass_context=False)  # Jin from blazblue
    async def _2c_jin(self):   
        """Long vertical range, has head invul before and through the first active frame."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c1/BBCS_Jin_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="6a", pass_context=False)  # Jin from blazblue
    async def _6a_jin(self):  
        """Overhead, short range, fast, -4 on block. Requires resources or CH for conversions."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()  
            mp2 = info.find('p').get_text()        

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0b/BBCS_Jin_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="6b", pass_context=False)  # Jin from blazblue
    async def _6b_jin(self):  
        """NOT an overhead. Goes over lows"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()           

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/69/BBCS_Jin_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @jin.command(name="6c", pass_context=False)  # Jin from blazblue
    async def _6c_jin(self):   
        """Combo filler, especially in the corner."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()           

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/91/BBCS_Jin_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="3c", pass_context=False)  # Jin from blazblue
    async def _3c_jin(self):  
        """Combo ender, occasional zoning tool."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/54/BBCF_Jin_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="ja", pass_context=False)  # Jin from blazblue
    async def _ja_jin(self):  
        """Good for an air-to-air battle."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCS_Jin_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="jb", pass_context=False)  # Jin from blazblue
    async def _jb_jin(self):   
        """Hits above, in front, and below Jin. Has a cross-up hitbox."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()           

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/79/BBCS_Jin_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="jc", pass_context=False)  # Jin from blazblue
    async def _jc_jin(self):   
        """Safe air poke at range, strong air-to-air."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "JC"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8f/BBCS_Jin_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="j2c", pass_context=False)  # Jin from blazblue
    async def _j2c_jin(self):  
        """Primarily used for combos and jump-ins."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/63/BBCS_Jin_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="5d", pass_context=False)  # Jin from blazblue
    async def _5d_jin(self): 
        """The infamous Wofhead"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()  			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/93/BBCS_Jin_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="2d", pass_context=False)  # Jin from blazblue
    async def _2d_jin(self):   
        """Zoning tool."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]		

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text() 			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0c/BBCS_Jin_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="6d", pass_context=False)  # Jin from blazblue
    async def _6d_jin(self):   
        """Pressure reset tool, combo filler."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c7/BBCS_Jin_6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mpA)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="jd", pass_context=False)  # Jin from blazblue
    async def _jd_jin(self):   
        """Combo filler, gimmicky crossup."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/54/BBCS_Jin_jD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="236d", pass_context=False)  # Jin from blazblue
    async def _236d_jin(self):  
        """Snowflake"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
		
            mp1 = info.find('p').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]		
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Hishousetsu"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8c/BBCF_Jin_Hishousetsu.png')
            embed.add_field(name="Ground:  Frame Data", value=tab)
            embed.add_field(name="Air:  Frame Data", value=tab1)
            embed.add_field(name="Attack Properties", value=mp)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="623d", pass_context=False)  # Jin from blazblue
    async def _623d_jin(self):  
        """Dragon punch. Leads to good damage in the corner."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
		
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Hirensou"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/28/BBCS_Jin_Hirensou.png')
            embed.add_field(name="Ground:  Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="214d", pass_context=False)  # Jin from blazblue
    async def _214d_jin(self):  
        """Really fast. Used for combos. Can continue combo if semi-near corner."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
		
            mp1 = info.find('p').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]		
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Musou Tousshugeki"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/df/BBCS_Jin_MusouTousshugeki.png')
            embed.add_field(name="1st hit Frame Data", value=tab)
            embed.add_field(name="2nd hit,214d-c, Frame Data", value=tab1)
            embed.add_field(name="Attack Properties", value=mp)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="j214d", pass_context=False)  # Jin from blazblue
    async def _j214d_jin(self):   
        """Aerial combo ender or used as an overhead."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
		
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]	
            Data = [head.get_text() for head in headers.find_all('td')]					

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"

			
            embed = discord.Embed()
            embed.title = "Hizangeki"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8f/BBCP_Jin_Hizangeki.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="ft", pass_context=False)  # Jin from blazblue
    async def _ft_jin(self):  
        """Can cancel into specials and supers on 3rd hit."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ac/BBCS_Jin_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="bt", pass_context=False)  # Jin from blazblue
    async def _bt_jin(self): 
        """Can cancel into specials and supers on 2nd hit."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Jin_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="at", pass_context=False)  # Jin from blazblue
    async def _at_jin(self):  
        """Has a variety of combo options depending on throw height."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/16/BBCS_Jin_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jin.command(name="ca", pass_context=False)  # Jin from blazblue
    async def _ca_jin(self): 
        """Jin's Counter Assault, it uses 5C's animation."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/79/BBCS_Jin_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @jin.command(name="ct", pass_context=False)  # Jin from blazblue
    async def _ct_jin(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()		

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c2/BBCP_Jin_CT.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @jin.command(name="236a", pass_context=False)  # Jin from blazblue
    async def _s1_jin(self):  
        """Zoning tool."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Hishouken"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1d/BBCS_Jin_Hishouken.png')
            embed.add_field(name="Ground:  Frame Data", value=tab)
            embed.add_field(name="Air:  Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @jin.command(name="623b", pass_context=False)  # Jin from blazblue
    async def _s2_jin(self):   
        """Head invincibility starting on frame 5 and lasts through initial active frames."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()       

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Fubuki"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/06/BBCS_Jin_Fubuki.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @jin.command(name="623c", pass_context=False)  # Jin from blazblue
    async def _s3_jin(self): 
        """Invincible from frame 1 through all active frames"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()    

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Rehhyou"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e4/BBCS_Jin_Rehhyou.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @jin.command(name="214b", pass_context=False)  # Jin from blazblue
    async def _s4_jin(self):   
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
       

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Musou Senshouzan"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/ba/BBCS_Jin_MusouSenshouzanB.png')
            embed.add_field(name="1st Hit", value=tab)
            embed.add_field(name="2nd Hit:  214b-c", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @jin.command(name="j214c", pass_context=False)  # Jin from blazblue
    async def _s5_jin(self):  
        """The new aerial combo ender."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp3 = info.find('p').get_text()      

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Hizansen"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2f/BBCP_Jin_Hizansen.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @jin.command(name="22c", pass_context=False)  # Jin from blazblue
    async def _s6_jin(self):   
        """Snowstorm"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[4]
            headers2 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[6]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp3 = info.find_all('p')[0].get_text()
            mp2 = info.find_all('p')[1].get_text()
            mp1 = info1.find('p').get_text()
       

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp3 + "\n" + "*" + mp2 + "```"
            mp1 = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Sekkajin"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7f/BBCS_Jin_Sekkajin.png')
            embed.add_field(name="22c Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            embed.add_field(name="Follow-up Normal", value=tab1)
            embed.add_field(name="Follow-up OverDrive", value=tab2)
            embed.add_field(name="Follow-up:  Attack Props:", value=mp1, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @jin.command(name="632146c", pass_context=False)  # Jin from blazblue
    async def _dd1_jin(self):  
        """	Punish tool"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Touga Hyojin"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6c/BBCS_Jin_IceWave.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @jin.command(name="632146d", pass_context=False)  # Jin from blazblue
    async def _dd2_jin(self): 
        """Invincible startup, damaging metered combo ender"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs3 = headers3.find('th').get_text()
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            gnd = info.find_all('p')[0].get_text()
            gndod = info.find_all('p')[1].get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + gnd + "\n" + "*" + gndod + "```"
			
            embed = discord.Embed()
            embed.title = "Hiyoku Getsume"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ad/BBCS_Jin_IceArrow.png')
            embed.add_field(name="Ground", value=tab)
            embed.add_field(name="Air", value=tab1)
            embed.add_field(name="Ground Over Drive", value=tab2)
            embed.add_field(name="Air Over Drive", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @jin.command(name="236236d", pass_context=False)  # Jin from blazblue
    async def _dd3_jin(self):   
        """Catches any blockable attack, Unblockable, invincible the whole time."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs2 = headers2.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Yukikaze"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/dc/BBCS_Jin_Yukikaze1.png')
            embed.add_field(name="Catch", value=tab)
            embed.add_field(name="Attack(Normal)", value=tab1)
            embed.add_field(name="Attack(OD)", value=tab2)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @jin.command(name="abcd", pass_context=False)  # Jin from blazblue
    async def _abcd_jin(self):  
        """DP#6""" 
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find_all('p')[0].get_text()
            mp2 = info.find_all('p')[1].get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Gekka Hyourou"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/10/BBCF_Jin_Gekka.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	
			
    @jin.command(name="28d", pass_context=False)  # Jin from blazblue
    async def _28d_jin(self):   
        """Hits the entire ground. Combos from ground throw."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jin_Kisaragi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Rengoku Hyouya"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/da/BBCS_Jin_Astral2.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Properties", value=mp)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
################################################################################################################################
    @su.command(name="5a", pass_context=False)  # Susano'o from blazblue 
    async def _5a_su(self):
        """Short, but safe"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find_all('li')[0].get_text()
            Info1 = movesp.find_all('li')[1].get_text()
            Info2 = movesp.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "\n" + "*" + Info1 + "\n" + "*" + Info2 + "```"
            			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2e/BBCF_Susanoo_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	
			
    @su.command(name="5b", pass_context=False)  # Susano'o from blazblue
    async def _5b_su(self):   
        """Every Susano'o starts the round with this. No Exceptions"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find_all('li')[0].get_text()
            Info1 = movesp.find_all('li')[1].get_text()
            Info2 = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "\n" + "*" + Info1 + "\n" + "*" + Info2 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8a/BBCF_Susanoo_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	

################# The God Button, I will spam this into 6b because I'm a fraud #############################################################		
			
    @su.command(name="5c", pass_context=False)  # Susano'o from blazblue
    async def _5c_su(self): 
        """Slow, but long-ranged."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find_all('li')[0].get_text()
            Info1 = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "\n" + "*" + Info1 + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/67/BBCF_Susanoo_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @su.command(name="2a", pass_context=False)  # Susano'o from blazblue
    async def _2a_su(self):   
        """Not a low"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find_all('li')[0].get_text()
            Info1 = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "\n" + "*" + Info1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e0/BBCF_Susanoo_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @su.command(name="2b", pass_context=False)  # Susano'o from blazblue
    async def _2b_su(self): 
        """Also not a low..."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find('li').get_text()
            Info1 = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "\n" + "*" + Info1 + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8f/BBCF_Susanoo_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @su.command(name="2c", pass_context=False)  # Susano'o from blazblue
    async def _2c_su(self):   
        """A pretty decent anti-air."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b3/BBCF_Susanoo_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @su.command(name="6a", pass_context=False)  # Susano'o from blazblue
    async def _6a_su(self):  
        """Who needs anti-airs when you have hit scans?"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find_all('li')[2].get_text()
            mp4 = info.find('p').get_text()            

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3  + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/32/BBCF_Susanoo_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @su.command(name="6b", pass_context=False)  # Susano'o from blazblue
    async def _6b_su(self):  
        """Good ol' "Fatal! Fatal!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text() 
            mp3 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/07/BBCF_Susanoo_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @su.command(name="6c", pass_context=False)  # Susano'o from blazblue
    async def _6c_su(self):  
        """Hope you like 50/50s"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()  
            mp3 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a6/BBCF_Susanoo_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @su.command(name="3c", pass_context=False)  # Susano'o from blazblue
    async def _3c_su(self):   
        """Finally, a low!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = [po.get_text() for po in info.find_all('p')]				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/07/BBCF_Susanoo_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @su.command(name="ja", pass_context=False)  # Susano'o from blazblue
    async def _ja_su(self): 
        """Good air to air, but that's about it"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b5/BBCF_Susanoo_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @su.command(name="jb", pass_context=False)  # Susano'o from blazblue
    async def _jb_su(self):   
        """Your staple jump-in"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text() 
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ee/BBCF_Susanoo_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @su.command(name="jc", pass_context=False)  # Susano'o from blazblue
    async def _jc_su(self): 
        """All-around air tool"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "JC"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/16/BBCF_Susanoo_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @su.command(name="5d", pass_context=False)  # Susano'o from blazblue
    async def _5d_su(self):   
        """The Key to the Kingdom!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find('p').get_text()						

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a0/BBCF_Susanoo_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @su.command(name="2d", pass_context=False)  # Susano'o from blazblue
    async def _2d_su(self):  
        """High risk, high reward low"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/45/BBCF_Susanoo_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @su.command(name="4d", pass_context=False)  # Susano'o from blazblue
    async def _4d_su(self):  
        """An unlock tool that doesn't require a hit"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCF_Susanoo_4D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @su.command(name="6d", pass_context=False)  # Susano'o from blazblue
    async def _6d_su(self):  
        """Nice to use raw on occasion, but will see most use in combos"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = [fo.get_text() for fo in info.find_all('li')]		
            mp2 = [fu.get_text() for fu in info.find_all('p')]			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "```"
            #mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6D Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/0/09/BBCF_Susanoo_6D.png')
            embed1.add_field(name="Attack Props:", value=mpB)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @su.command(name="jd", pass_context=False)  # Susano'o from blazblue
    async def _jd_su(self):  
        """Staple air combo ender"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"			
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCF_Susanoo_jD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @su.command(name="ft", pass_context=False)  # Susano'o from blazblue
    async def _ft_su(self):   
        """Up we go!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0a/BBCF_Susanoo_ForwardThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @su.command(name="bt", pass_context=False)  # Susano'o from blazblue
    async def _bt_su(self):   
        """Sucks To Be You 2: Electric Boogaloo"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/06/BBCF_Susanoo_BackThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @su.command(name="at", pass_context=False)  # Susano'o from blazblue
    async def _at_su(self):   
        """Susano'o's throws can all lead to exceptional damage, even with scaling"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]	
		    
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3e/BBCF_Susanoo_AirThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @su.command(name="ca", pass_context=False)  # Susano'o from blazblue
    async def _ca_su(self):   
        """That thing which doesn't exist for Terumi"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a0/BBCF_Susanoo_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @su.command(name="ct", pass_context=False)  # Susano'o from blazblue
    async def _ct_su(self):   
        """Old habits die hard"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a6/BBCF_Susanoo_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @su.command(name="236a", pass_context=False)  # Susano'o from blazblue
    async def _s1_su(self):   
        """Only does the second hit at level 3"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Sundering Claws"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c4/BBCF_Susanoo_SunderingClaws.png')
            embed.add_field(name="Lv.1 Frame Data", value=tab)
            embed.add_field(name="Lv.2 Frame Data", value=tab1)
            embed.add_field(name="Lv.3 Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @su.command(name="623c", pass_context=False)  # Susano'o from blazblue
    async def _s2_su(self):   
        """Pray this attack hits"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()         

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Towering Flame"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5e/BBCF_Susanoo_ToweringFlame.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @su.command(name="214a", pass_context=False)  # Susano'o from blazblue
    async def _s3_su(self):   
        """Kicking Sand!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()        

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Megalith"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c0/BBCF_Susanoo_Megalith.png')
            embed.add_field(name="Lv.1 Frame Data", value=tab)
            embed.add_field(name="Lv.2 Frame Data", value=tab1)
            embed.add_field(name="Lv.3 Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @su.command(name="214b", pass_context=False)  # Susano'o from blazblue
    async def _s4_su(self):
        """Has more uses than you might think"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[5]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]       

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Hunter's Fang"
            embed.add_field(name="Lv.1 Frame Data", value=tab)
            embed.add_field(name="Lv.2 Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
		
            embed1 = discord.Embed()
            embed1.title = "Hunter's Fang Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/ea/BBCF_Susanoo_HuntersFang.png')
            embed1.add_field(name="Attack Props:", value=mpB)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	

    @su.command(name="j214b", pass_context=False)  # Susano'o from blazblue
    async def _s4a_su(self):
        """Has more uses than you might think"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]       

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Hunter's Fang"
            embed.add_field(name="Lv.1 Frame Data", value=tab)
            embed.add_field(name="Lv.2 Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
		
            embed1 = discord.Embed()
            embed1.title = "Hunter's Fang Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/ea/BBCF_Susanoo_HuntersFang.png')
            embed1.add_field(name="Attack Props:", value=mpB)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @su.command(name="236b", pass_context=False)  # Susano'o from blazblue
    async def _s5_su(self):   
        """Grand Vip - I mean, 236B!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()     

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Dancing Dual Kick"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/01/BBCF_Susanoo_DancingDualKick.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @su.command(name="ccc", pass_context=False)  # Susano'o from blazblue
    async def _s6_su(self): 
        """Damage Scaling: The Move."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()   

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Inevitable Calamity"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/18/BBCF_Susanoo_InevitableCalamity.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @su.command(name="63214c", pass_context=False)  # Susano'o from blazblue
    async def _s7_su(self):   
        """Putting the "God" back in God Press"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Splintering Thrust"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Splintering Thrust Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f4/BBCF_Susanoo_SplinteringThrust.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @su.command(name="236d", pass_context=False)  # Susano'o from blazblue
    async def _s8_su(self):   
        """Michael Swor - oops, wrong game"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Blade of Judgement"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0e/BBCF_Susanoo_BladeOfJudgement.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @su.command(name="236236d", pass_context=False)  # Susano'o from blazblue
    async def _dd1_su(self):   
        """This is a no-fireball zone"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Liberating Dagger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/73/BBCF_Susanoo_LiberatingDagger.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @su.command(name="632146d", pass_context=False)  # Susano'o from blazblue
    async def _dd2_su(self):   
        """Deadly Rave meets Gamma Ray"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Strike of the Possessed God"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/69/BBCF_Susanoo_StrikeOfThePossessedGod.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @su.command(name="28d", pass_context=False)  # Susano'o from blazblue
    async def _dd3_su(self):  
        """When 4D goes on as many steroids as Susano'o"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Collapsing Resentment"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6c/BBCF_Susanoo_CollapsingResentment.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @su.command(name="abcd", pass_context=False)  # Susano'o from blazblue
    async def _abcd_su(self): 
        """Cmon and slam!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Bloodsplitter"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9b/BBCF_Susanoo_Bloodsplitter.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @su.command(name="2141236c", pass_context=False)  # Susano'o from blazblue
    async def _214236c_su(self):   
        """｢MUST DIE｣"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Susanoo"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Roar of the Mad King"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e3/BBCF_Susanoo_RoarOfTheMadKing.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')			
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
##################################################################################################################################################################################################
    @hk.command(name="5a", pass_context=False)  # Hakumen from blazblue
    async def _5a_hk(self):
        """King of anti-airs"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            info = movesp.find('li').get_text()
            info2 = movesp.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + info + "\n" + "*" + info2 + "```"           
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Hakumen_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
		
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hk.command(name="5b", pass_context=False)  # Hakumen from blazblue
    async def _5b_hk(self):   
        """Good tool for pressure and mixup due to its frame advantage"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            info2 = movesp.find('p').get_text()
            info = [op.get_text() for op in movesp.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + info[0] + "\n" + "*" + info[1] + "\n" + "*" + info[2] + "\n" + "*" + info[3] + "\n" + "*" + info2 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b2/BBCS_Hakumen_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hk.command(name="5c", pass_context=False)  # Hakumen from blazblue
    async def _5c_hk(self): 
        """King of damage"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = [op.get_text() for op in movesp.find_all('li')]
            Info1 = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info[0] + "\n" + "*" + Info[1] + "\n" + "*" + Info[2] + "\n" + "*" + Info[3] + "\n" + "*" + Info1 + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/86/BBCS_Hakumen_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @hk.command(name="2a", pass_context=False)  # Hakumen from blazblue
    async def _2a_hk(self):   
        """Quite the range for a 2A"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e6/BBCS_Hakumen_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hk.command(name="2b", pass_context=False)  # Hakumen from blazblue
    async def _2b_hk(self): 
        """Poke their feet"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find('p').get_text()
            Info2 = movesp.find('li').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info2 + "\n" + "*" + Info + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c2/BBCS_Hakumen_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hk.command(name="2c", pass_context=False)  # Hakumen from blazblue
    async def _2c_hk(self):   
        """Don't whiff"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/25/BBCS_Hakumen_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hk.command(name="6a", pass_context=False)  # Hakumen from blazblue
    async def _6a_hk(self):  
        """Advancing position"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()          

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/28/BBCS_Hakumen_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hk.command(name="6b", pass_context=False)  # Hakumen from blazblue
    async def _6b_hk(self):  
        """Overhead"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text() 
            mp3 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d1/BBCS_Hakumen_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @hk.command(name="6c", pass_context=False)  # Hakumen from blazblue
    async def _6c_hk(self):  
        """FATAL!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[4]
            info1 = table_body.find_all('tr')[5]
            headers2 = table_body.find_all('tr')[7]
            info2 = table_body.find_all('tr')[8]
			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = [fo1.get_text() for fo1 in info1.find_all('li')]  
            mp3 = [fo2.get_text() for fo2 in info2.find_all('li')]
            mp4 = [fo3.get_text() for fo3 in info2.find_all('p')]			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
            mpA = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "```"
            mpC = "```" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "\n" + "*" + mp4[2] + "```"
			
            embed = discord.Embed()
            embed.title = "6C No Charge"
            embed.add_field(name="No Charge Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            embed.add_field(name="Partial Charge Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="Full Charge Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6C cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/0/00/BBCS_Hakumen_6C.png')
            embed1.add_field(name="Attack Props:", value=mpC, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hk.command(name="3c", pass_context=False)  # Hakumen from blazblue
    async def _3c_hk(self):   
        """Pain lies ahead"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/03/BBCS_Hakumen_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hk.command(name="4c", pass_context=False)  # Hakumen from blazblue
    async def _4c_hk(self):   
        """Literal poke"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()	
            mp2 = info.find_all('li')[1].get_text()	
            mp3 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "4C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/54/BBCS_Hakumen_4C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hk.command(name="ja", pass_context=False)  # Hakumen from blazblue
    async def _ja_hk(self): 
        """Jab your way to the ground"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f8/BBCS_Hakumen_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hk.command(name="j2a", pass_context=False)  # Hakumen from blazblue
    async def _j2a_hk(self): 
        """Sword wall"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2f/BBCS_Hakumen_j2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hk.command(name="jb", pass_context=False)  # Hakumen from blazblue
    async def _jb_hk(self):   
        """Kick your way to the ground"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text() 
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cc/BBCS_Hakumen_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hk.command(name="jc", pass_context=False)  # Hakumen from blazblue
    async def _jc_hk(self): 
        """Air combo ender"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()	
            mp2 = info.find_all('li')[1].get_text()	
            mp3 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f9/BBCS_Hakumen_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hk.command(name="j2c", pass_context=False)  # Hakumen from blazblue
    async def _j2c_hk(self): 
        """No one challenges this"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c3/BBCS_Hakumen_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hk.command(name="5d", pass_context=False)  # Hakumen from blazblue
    async def _5d_hk(self):   
        """Standing counter"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[4]
            headers2 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[6]
            headers3 = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')] 
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')] 			
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = [op2.get_text() for op2 in info1.find_all('li')]	
            mp3 = info1.find('p').get_text()		
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()	
            vrs2 = headers2.find('th').get_text()	
            vrs3 = headers3.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a9/BBCS_Hakumen_5D.png')
            embed.add_field(name="Catch Frame Data", value=tab)
            embed.add_field(name="Catch(Held) Frame Data", value=tab1)
            embed.add_field(name="Catch (Max Hold) Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="Attack Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hk.command(name="2d", pass_context=False)  # Hakumen from blazblue
    async def _2d_hk(self):  
        """Crouching counter"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp2 = info.find('li').get_text()
            mp3 = [op2.get_text() for op2 in info1.find_all('li')]	
            mp4 = info1.find('p').get_text()		
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6d/BBCS_Hakumen_2D.png')
            embed.add_field(name="Catch Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="Attack Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @hk.command(name="6d", pass_context=False)  # Hakumen from blazblue
    async def _6d_hk(self):  
        """Best counter"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp2 = info.find('li').get_text()
            mp3 = [op2.get_text() for op2 in info1.find_all('li')]	
            mp4 = info1.find('p').get_text()		
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b5/BBCS_Hakumen_6D.png')
            embed.add_field(name="Catch Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="Attack Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hk.command(name="jd", pass_context=False)  # Hakumen from blazblue
    async def _jd_hk(self):  
        """Air counter"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp2 = info.find('li').get_text()
            mp3 = [op2.get_text() for op2 in info1.find_all('li')]	
            mp4 = info1.find('p').get_text()		
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "j.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0c/BBCS_Hakumen_jD.png')
            embed.add_field(name="Catch Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="Attack Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @hk.command(name="ft", pass_context=False)  # Hakumen from blazblue
    async def _ft_hk(self):   
        """Crumple"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCS_Hakumen_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hk.command(name="bt", pass_context=False)  # Hakumen from blazblue
    async def _bt_hk(self):   
        """Sick kicks"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/84/BBCS_Hakumen_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hk.command(name="at", pass_context=False)  # Hakumen from blazblue
    async def _at_hk(self):   
        """To the ground with you!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
		    
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/08/BBCS_Hakumen_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hk.command(name="ca", pass_context=False)  # Hakumen from blazblue
    async def _ca_hk(self):   
        """Costly, but effective: Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]	
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/28/BBCS_Hakumen_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @hk.command(name="ct", pass_context=False)  # Hakumen from blazblue
    async def _ct_hk(self):   
        """Plus on block: Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f2/BBCP_Hakumen_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @hk.command(name="fuu", pass_context=False)  # Hakumen from blazblue
    async def _s1_hk(self):   
        """Cut projectile, get Void"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()


            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Fuumajin"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/47/BBCP_Hakumen_Fuumajin.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @hk.command(name="214a", pass_context=False)  # Hakumen from blazblue
    async def _s2_hk(self):   
        """Pressure reset"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()  
            mp1 = [op.get_text() for op in info.find_all('li')] 			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Gurren"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3f/BBCS_Hakumen_gurren.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @hk.command(name="623a", pass_context=False)  # Hakumen from blazblue
    async def _s3_hk(self):   
        """Wavedash, and Certainly not an EWGF"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            my_table1 = table[57]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            mp3 = info.find('p').get_text()
            mp4 = info1.find('p').get_text()     			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp3 + "```"
            mp1 = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Kishuu"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/eb/BBCS_Hakumen_kishuu.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed(description='A (after kishuu)')
            embed1.title = "Enma"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/1c/BBCS_Hakumen_enma.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mp1, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @hk.command(name="236b", pass_context=False)  # Hakumen from blazblue
    async def _s4_hk(self):
        """Combo filler"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Renka"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b4/BBCF_Hakumen_renka.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @hk.command(name="41236c", pass_context=False)  # Hakumen from blazblue
    async def _s5_hk(self):   
        """5C > 41236C = Damage"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Zantetsu"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3c/BBCS_Hakumen_zantetsu.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @hk.command(name="j214b", pass_context=False)  # Hakumen from blazblue
    async def _s6_hk(self): 
        """Aerial Houtenjin"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Hotaru"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/47/BBCS_Hakumen_hotaru.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @hk.command(name="j214c", pass_context=False)  # Hakumen from blazblue
    async def _s7_hk(self):   
        """The scariest thing"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Tsubaki"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d5/BBCS_Hakumen_tsubaki.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @hk.command(name="j214a", pass_context=False)  # Hakumen from blazblue
    async def _s8_hk(self):   
        """The other air ender"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Agito"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e0/BBCP_Hakumen_Agito.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @hk.command(name="214d", pass_context=False)  # Hakumen from blazblue
    async def _s9_hk(self):   
        """Say nope to zoning!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Yanagi"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/31/BBCF_Hakumen_Yanagi.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @hk.command(name="632146c", pass_context=False)  # Hakumen from blazblue
    async def _dd1_hk(self):   
        """Big damage"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[4]
            headers3 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = [fo1.get_text() for fo1 in info1.find_all('li')]
            mp3 = [fo2.get_text() for fo2 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp1[8] + "```"
            mpA = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Kokūjin: Shippu"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/55/BBCS_Hakumen_shippu.png')
            embed.add_field(name="Sword(Uncharged) Frame Data", value=tab)
            embed.add_field(name="Sword(Charged) Frame Data", value=tab1)
            embed.add_field(name="Sowrd Properties Attack Props:", value=mp, inline='true')
            embed.add_field(name="Wave Frame Data", value=tab2)
            embed.add_field(name="Wave(OD) Frame Data", value=tab3)
            embed.add_field(name="Wave Attack Props:", value=mpA)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @hk.command(name="236236d", pass_context=False)  # Hakumen from blazblue
    async def _dd2_hk(self):   
        """Super counter"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            headers2 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info1.find('li').get_text()
            mp3 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Kokūjin: Yukikaze"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/51/BBCS_Hakumen_yukikaze.png')
            embed.add_field(name="Catch Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="Attack Frame Data", value=tab1)
            embed.add_field(name="Attack(OD) Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @hk.command(name="214214b", pass_context=False)  # Hakumen from blazblue
    async def _dd3_hk(self):   
        """Magatama install!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Kokūjin Oūgi: Mugen"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/72/BBCS_Hakumen_mugen.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @hk.command(name="abcd", pass_context=False)  # Hakumen from blazblue
    async def _abcd_hk(self): 
        """MISOGI"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Tengai"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d0/BBCF_Hakumen_Tengai.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hk.command(name="28d", pass_context=False)  # Hakumen from blazblue
    async def _28d_hk(self):   
        """I dare you press a button"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hakumen"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find_all('li')[0].get_text()
            mp2 = info.find_all('li')[1].get_text()
            mp3 = info.find_all('li')[2].get_text()
            mp4 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "\n" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Kokūjin Oūgi: Akumetsu"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e2/BBCS_Hakumen_akumetsu.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')		
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
##################################################################################################################################################################################################
    @ce.command(name="5a", pass_context=False)  # Celica from blazblue
    async def _5a_ce(self):
        #""""""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[2]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
            		
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/15/BBCP_Celica_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ce.command(name="5b", pass_context=False)  # Celica from blazblue
    async def _5b_ce(self):   
        #""""""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[4]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6f/BBCP_Celica_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ce.command(name="5c", pass_context=False)  # Celica from blazblue
    async def _5c_ce(self): 
        #""""""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[6]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/92/BBCP_Celica_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @ce.command(name="2a", pass_context=False)  # Celica from blazblue
    async def _2a_ce(self):   
        #""""""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[8]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3f/BBCP_Celica_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ce.command(name="2b", pass_context=False)  # Celica from blazblue
    async def _2b_ce(self): 
        #""""""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[10]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = [op.get_text() for op in movesp.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info[0] + "\n" + "*" + Info[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f4/BBCP_Celica_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ce.command(name="2c", pass_context=False)  # Celica from blazblue
    async def _2c_ce(self):   
        #""""""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[12]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f4/BBCP_Celica_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ce.command(name="6a", pass_context=False)  # Celica from blazblue
    async def _6a_ce(self):  
        #""""""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[14]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp3 = info.find('p').get_text()            

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/16/BBCP_Celica_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ce.command(name="6b", pass_context=False)  # Celica from blazblue
    async def _6b_ce(self):  
        #""""""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[16]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCP_Celica_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ce.command(name="6c", pass_context=False)  # Celica from blazblue
    async def _6c_ce(self):  
        #""""""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[18]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ae/BBCP_Celica_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ce.command(name="3c", pass_context=False)  # Celica from blazblue
    async def _3c_ce(self):   
        #""""""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[20]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5f/BBCP_Celica_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ce.command(name="ja", pass_context=False)  # Celica from blazblue
    async def _ja_ce(self): 
        #""""""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[22]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/54/BBCP_Celica_j.A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ce.command(name="jb", pass_context=False)  # Celica from blazblue
    async def _jb_ce(self):   
        #""""""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[24]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ac/BBCP_Celica_j.B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ce.command(name="jc", pass_context=False)  # Celica from blazblue
    async def _jc_ce(self): 
        #""""""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[26]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]	
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/64/BBCP_Celica_j.C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ce.command(name="5d", pass_context=False)  # Celica from blazblue
    async def _5d_ce(self):   
        #""""""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[28]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[4]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()	
            vrs2 = headers2.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')			
            mp = "```" + "*" + mp1[0] + "```"
            mpA = "```" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/46/BBCP_Celica_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5DD"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f5/BBCP_Celica_D5D.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "5DDD"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/b/b0/BBCF_Celica_D5DD.png')
            embed2.add_field(name="Frame Data", value=tab2)
            embed2.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ce.command(name="2d", pass_context=False)  # Celica from blazblue
    async def _2d_ce(self):  
        #""""""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[30]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp3 = [op2.get_text() for op2 in info.find_all('li')]			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp3[0] + "```"
            mpB = "```" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e6/BBCP_Celica_2D1.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "2DD"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/fd/BBCP_Celica_D2D.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ce.command(name="6d", pass_context=False)  # Celica from blazblue
    async def _6d_ce(self):  
        #""""""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[32]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp3 = [op2.get_text() for op2 in info.find_all('li')]			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp3[0] + "```"
            mpB = "```" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/81/BBCP_Celica_6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Catch Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6DD"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/6f/BBCP_Celica_D6D.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ce.command(name="jd", pass_context=False)  # Celica from blazblue
    async def _jd_ce(self):
       #""""""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[34]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	 
            mp3 = info.find('li').get_text()	
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')			
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "j.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/06/BBCP_Celica_j.D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ce.command(name="heal", pass_context=False)  # Celica from blazblue
    async def _heal_ce(self):  
        #""""""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[36]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	 
            mp3 = info.find('li').get_text()	
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')			
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Heal"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d5/BBCF_Celica_Heal.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ce.command(name="ft", pass_context=False)  # Celica from blazblue
    async def _ft_ce(self):   
        """Forward Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[38]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f6/BBCP_Celica_ForwardThrow2.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Forward Throw Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/8e/BBCP_Celica_ForwardThrow3.png')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ce.command(name="bt", pass_context=False)  # Celica from blazblue
    async def _bt_ce(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[40]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('li').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
	
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e7/BBCP_Celica_BackThrow2.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Back Throw cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/8a/BBCP_Celica_BackThrow3.png')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ce.command(name="at", pass_context=False)  # Celica from blazblue
    async def _at_ce(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[42]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]	
		    
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
	
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/49/BBCP_Celica_AirThrow2.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Air Throw Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/0/00/BBCP_Celica_AirThrow3.png')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ce.command(name="ca", pass_context=False)  # Celica from blazblue
    async def _ca_ce(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[44]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]	
		    
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/31/BBCP_Celica_CounterAssault.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @ce.command(name="ct", pass_context=False)  # Celica from blazblue
    async def _ct_ce(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[46]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = info.find('li').get_text()
		
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9b/BBCP_Celica_CrushTrigger.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ce.command(name="j214a", pass_context=False)  # Celica from blazblue
    async def _s1_ce(self):   
        #""""""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[48]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]	
		    
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Pic Confit"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/af/BBCP_Celica_Pic_Confit.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ce.command(name="236b", pass_context=False)  # Celica from blazblue
    async def _s2_ce(self):   
        #""""""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[50]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]	
		    
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
			
            embed = discord.Embed()
            embed.title = "Arc Griller"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cc/BBCP_Celica_Arc_Griller.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ce.command(name="214b", pass_context=False)  # Celica from blazblue
    async def _s3_ce(self):   
        #""""""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[52]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]   
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text() 			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Marteau Flan"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/11/BBCP_Celica_Marteau_Flan.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Enhanced Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')			
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ce.command(name="236c", pass_context=False)  # Celica from blazblue
    async def _s4_ce(self):
        #""""""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[54]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')] 
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()	
            vrs3 = headers3.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Hache Rotir"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d8/BBCP_Celica_Hache_Rotir.png')
            embed.add_field(name="Regular, No Charge Frame Data", value=tab)
            embed.add_field(name="Regular, Charged Frame Data", value=tab1)
            embed.add_field(name="Enhanced, No Charge Frame Data", value=tab2)
            embed.add_field(name="Enhanced, Charged Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ce.command(name="214c", pass_context=False)  # Celica from blazblue
    async def _s5_ce(self):   
        #""""""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[56]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [fo.get_text() for fo in info.find_all('li')]        

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Lance Quiche"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e1/BBCP_Celica_Lance_Quiche.png')
            embed.add_field(name="No Charge Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ce.command(name="632146a", pass_context=False)  # Celica from blazblue
    async def _dd1_ce(self):   
        """Big Heal"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[58]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Armure Sorbet"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1c/BBCP_Celica_Armure_Sorbet.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ce.command(name="632146b", pass_context=False)  # Celica from blazblue
    async def _dd2_ce(self):   
        """Imma Firing mah Laser!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[60]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [fo.get_text() for fo in info.find_all('li')]        

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Saber Anglaise"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cb/BBCP_Celica_Saber_Anglaise.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ce.command(name="632146c", pass_context=False)  # Celica from blazblue
    async def _dd3_ce(self):   
        """Oh god she's self aware!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[62]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [fo.get_text() for fo in info.find_all('li')]        

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Casque Veloute"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3c/BBCP_Celica_Casque_Veloute1.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Casque Veloute Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCP_Celica_Casque_Veloute2.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					

    @ce.command(name="abcd", pass_context=False)  # Celica from blazblue
    async def _abcd_ce(self): 
        """Exceed Accel"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[64]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Pue Vapeur"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6b/BBCF_Celica_ExceedAccel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ce.command(name="222a", pass_context=False)  # Celica from blazblue
    async def _222a_ce(self):   
        """Minerva Blackhawk"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Celica_A._Mercury"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[66]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Atout Rillettes"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b1/BBCP_Celica_Atout_Rillettes1.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Atout Rillettes Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCP_Celica_Atout_Rillettes2.png')
			
            embed2 = discord.Embed()
            embed2.title = "Atout Rillettes Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCP_Celica_Atout_Rillettes3.png')
			
            embed3 = discord.Embed()
            embed3.title = "Atout Rillettes Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/0/04/BBCP_Celica_Atout_Rillettes4.png')
			
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
#################################################################################################################################################################################################
    @no.command(name="5a", pass_context=False)  # Noel from blazblue
    async def _5a_no(self):
        """Quick gun jab."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            info = [op.get_text() for op in movesp.find_all('li')]
            info2 = movesp.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + info[0] + "\n" + "*" + info[1] + "\n" + "*" + info2 + "```"          
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/be/BBCP_Noel_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="5b", pass_context=False)  # Noel from blazblue
    async def _5b_no(self):   
        """Mid-range spacing tool."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            info = [op.get_text() for op in movesp.find_all('li')]
            info2 = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + info[0] + "\n" + "*" + info[1] + "\n" + "*" + info2 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/23/BBCP_Noel_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="5c", pass_context=False)  # Noel from blazblue
    async def _5c_no(self): 
        """Farthest reaching normal."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            info = [op.get_text() for op in movesp.find_all('li')]
            info2 = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + info[0] + "\n" + "*" + info[1] + "\n" + "*" + info[2] + "\n" + "*" + info[3] + "\n" + "*" + info[4] + "\n" + "*" + info2 + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b1/BBCP_Noel_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @no.command(name="2a", pass_context=False)  # Noel from blazblue
    async def _2a_no(self):   
        """Crouching Gun Jab"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/73/BBCP_Noel_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="2b", pass_context=False)  # Noel from blazblue
    async def _2b_no(self): 
        """Her fastest Low."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            movesp = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Info = movesp.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + Info + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5d/BBCP_Noel_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="2c", pass_context=False)  # Noel from blazblue
    async def _2c_no(self):   
        """+1 on Block."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/91/BBCP_Noel_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="6a", pass_context=False)  # Noel from blazblue
    async def _6a_no(self):  
        """Anti-Air"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()          

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b9/BBCP_Noel_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="6b", pass_context=False)  # Noel from blazblue
    async def _6b_no(self):  
        """Overhead"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()  			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fb/BBCP_Noel_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @no.command(name="6c", pass_context=False)  # Noel from blazblue
    async def _6c_no(self):  
        """Second hit isn't a projectile anymore."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]		
            mp2 = [fe.get_text() for fe in info.find_all('p')]	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] +"```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6C Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/d4/BBCP_Noel_6C.png')
            embed1.add_field(name="Attack Props Continued:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="3c", pass_context=False)  # Noel from blazblue
    async def _3c_no(self):   
        """Not a Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]	
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5f/BBCP_Noel_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @no.command(name="ja", pass_context=False)  # Noel from blazblue
    async def _ja_no(self): 
        """Overhead."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/32/BBCP_Noel_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @no.command(name="jb", pass_context=False)  # Noel from blazblue
    async def _jb_no(self):   
        """Overhead."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a7/BBCP_Noel_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="jc", pass_context=False)  # Noel from blazblue
    async def _jc_no(self): 
        """NOT an Overhead."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8b/BBCP_Noel_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="j2c", pass_context=False)  # Noel from blazblue
    async def _j2c_no(self): 
        """NOT an Overhead."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp = [op.get_text() for op in info.find_all('li')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp[0] + "\n" + "*" + mp[1] + "\n" + "*" + mp[2] + "\n" + "*" + mp[3] + "\n" + "*" + mp[4] + "\n" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCP_Noel_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @no.command(name="5d", pass_context=False)  # Noel from blazblue
    async def _5d_no(self):   
        """Projectile."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  		
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpA = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/84/BBCP_Noel_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="2d", pass_context=False)  # Noel from blazblue
    async def _2d_no(self):  
        """Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp4 = info1.find('p').get_text()
            mp3 = info1.find('li').get_text()
            mp2 = [op2.get_text() for op2 in info.find_all('p')]	
            mp1 = [op.get_text() for op in info.find_all('li')]			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
            mpC = "```" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "2D Normal Attack Props Cont:"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a9/BBCF_Noel_2D.png')
            embed1.add_field(name="Attack Props:", value=mpC, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="6d", pass_context=False)  # Noel from blazblue
    async def _6d_no(self):  
        """Low, NOT a Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp4 = info1.find('p').get_text()
            mp3 = info1.find('li').get_text()
            mp1 = [op2.get_text() for op2 in info.find_all('li')]	
            mp2 = info.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
            mpC = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6D Normal Attack Props cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/2/2f/BBCF_Noel_6D.png')
            embed1.add_field(name="Attack Props:", value=mpC)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @no.command(name="4d", pass_context=False)  # Noel from blazblue
    async def _4d_no(self):  
        """Projectile."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = [op2.get_text() for op2 in info.find_all('li')]	
            mp2 = info.find('p').get_text()
            mp3 = info1.find('li').get_text()
            mp4 = info1.find('p').get_text()				
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8d/BBCP_Noel_4D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="jd", pass_context=False)  # Noel from blazblue
    async def _jd_no(self):  
        """Projectile, NOT an Overhead."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp3 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1c/BBCP_Noel_jD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="d.5a", pass_context=False)  # Noel from blazblue
    async def _d5a_no(self):  
        """Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()
            mp3 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "D.5A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8b/BBCP_Noel_d5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @no.command(name="d.6a", pass_context=False)  # Noel from blazblue
    async def _d6a_no(self):  
        """(D.4a)Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('p').get_text()	
            mp2 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "D.6A(D.4A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9a/BBCP_Noel_d6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="d.5b", pass_context=False)  # Noel from blazblue
    async def _d5b_no(self):  
        """Second Hit is a Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('p').get_text()	
            mp2 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "D.5B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/11/BBCP_Noel_d5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="d.6b", pass_context=False)  # Noel from blazblue
    async def _d6b_no(self):  
        """(D.4b)Overhead, NOT a Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()				
            mp3 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "D.6B(D.4B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7b/BBCP_Noel_d6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="d.5c", pass_context=False)  # Noel from blazblue
    async def _d5c_no(self):  
        """Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('p').get_text()	
            mp2 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "D.5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/50/BBCP_Noel_d5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="d.6c", pass_context=False)  # Noel from blazblue
    async def _d6c_no(self):  
        """(D.4C)Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()
            mp3 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "D.6C(D.4C)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8b/BBCP_Noel_d6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="d.5d", pass_context=False)  # Noel from blazblue
    async def _d5d_no(self):  
        """Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "D.5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/84/BBCP_Noel_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="d.2d", pass_context=False)  # Noel from blazblue
    async def _d2d_no(self):  
        """Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			
            mp3 = info1.find('li').get_text()	
            mp4 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "D.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a9/BBCF_Noel_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="d.6d", pass_context=False)  # Noel from blazblue
    async def _d6d_no(self):  
        """Low, NOT a Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = [po.get_text() for po in info.find_all('p')]		
            mp2 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "D.6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2f/BBCF_Noel_6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="d.4d", pass_context=False)  # Noel from blazblue
    async def _d4d_no(self):  
        """Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()	
            mp3 = info1.find('li').get_text()			
            mp4 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "D.4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8d/BBCP_Noel_4D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="d.236d", pass_context=False)  # Noel from blazblue
    async def _d236d_no(self):  
        """Second Hit is a Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()				
            mp3 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "D.236D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/20/BBCP_Noel_Bloom_Trigger.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="d.214d", pass_context=False)  # Noel from blazblue
    async def _d214d_no(self):  
        """NOT a Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()	
            mp3 = info1.find('li').get_text()	
            mp4 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "D.214D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6c/BBCP_Noel_Assault_Through.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="d.623d", pass_context=False)  # Noel from blazblue
    async def _d623d_no(self):  
        """NOT a Projectile."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()	
            mp3 = info1.find('li').get_text()	
            mp4 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "D.623D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ae/BBCP_Noel_Spring_Raid.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="ft", pass_context=False)  # Noel from blazblue
    async def _ft_no(self):   
        """Front Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d6/BBCP_Noel_Forward_Throw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="bt", pass_context=False)  # Noel from blazblue
    async def _bt_no(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a1/BBCP_Noel_Back_Throw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="at", pass_context=False)  # Noel from blazblue
    async def _at_no(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCP_Noel_Air_Throw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="ca", pass_context=False)  # Noel from blazblue
    async def _ca_no(self):   
        """New Counter Assault."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/11/BBCP_Noel_d5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @no.command(name="ct", pass_context=False)  # Noel from blazblue
    async def _ct_no(self):   
        """Noel FINALLY has a way to Guard Crush."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8c/BBCP_Noel_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @no.command(name="236a", pass_context=False)  # Noel from blazblue
    async def _s1a_no(self):   
        """Projectile."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()	
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "XI. Optic Barrel 236A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3b/BBCP_Noel_Optic_Barrel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	

    @no.command(name="236b", pass_context=False)  # Noel from blazblue
    async def _s1b_no(self):   
        """Projectile."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()	
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "XI. Optic Barrel 236B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3b/BBCP_Noel_Optic_Barrel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @no.command(name="236c", pass_context=False)  # Noel from blazblue
    async def _s2_no(self):   
        """Projectile."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()			   

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Chamber Shot"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e2/BBCP_Noel_Chamber_Shot.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @no.command(name="j236c", pass_context=False)  # Noel from blazblue
    async def _s3_no(self):   
        """Projectile."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = info1.find('li').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()  			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpB = "```" + "*" + mp3 + "```"
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "XIII. Revolver Blast"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/ca/BBCP_Noel_Revolver_Blast.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="Additional Attack Frame Data", value=tab1)
            embed.add_field(name="Additional Attack Props:", value=mpB, inline='true')		
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	
			
    @no.command(name="214a", pass_context=False)  # Noel from blazblue
    async def _s4_no(self):
        """Command Grab, only works on Standing Opponents."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]  
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "IX. Muzzle Flitter"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/23/BBCP_Noel_Muzzle_Filter.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @no.command(name="22b", pass_context=False)  # Noel from blazblue
    async def _s5b_no(self):   
        """Projectile."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            mp1 = [fo.get_text() for fo in info.find_all('li')]  
            mp2 = info.find('p').get_text()	       

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Silencer(B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3b/BBCP_Noel_Silencer.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	

    @no.command(name="22c", pass_context=False)  # Noel from blazblue
    async def _s5c_no(self):   
        """Projectile."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            mp1 = info.find('p').get_text()	      

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Silencer(C)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3b/BBCP_Noel_Silencer.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @no.command(name="632146d", pass_context=False)  # Noel from blazblue
    async def _dd1_no(self):   
        """Combo Ender Super:  Bullets and Finisher are Projectiles, first hit is not."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[85]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Zero Gun: Fenrir"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e9/BBCP_Noel_Fenrir1.png')
            embed.add_field(name="First Hit Frame Data", value=tab)
            embed.add_field(name="Bullets Frame Data", value=tab1)
            embed.add_field(name="Finisher Frame Data", value=tab2)
            embed.add_field(name="OD Finisher Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @no.command(name="j236236d", pass_context=False)  # Noel from blazblue
    async def _dd2_no(self):   
        """Yolo Anti Air Punish"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[87]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"         
			
            embed = discord.Embed()
            embed.title = "Bullet Storm > Zero Gun: Thor"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4a/BBCP_Noel_Thor2.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @no.command(name="abcd", pass_context=False)  # Noel from blazblue
    async def _abcd_no(self): 
        """Exceed Accel"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[89]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Zero Gun: Sleipnir"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/60/BBCF_Noel_Sleipnir.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="236236c", pass_context=False)  # Noel from blazblue
    async def _astral_no(self):   
        """Counter Attack"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[91]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Valkyrie Veil"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3e/BBCP_Noel_Astral.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
	           
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @no.command(name="214214c", pass_context=False)  # Noel from blazblue
    async def _astral2_no(self):   
        """You Are Already Dead."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Noel_Vermillion"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[93]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Classic Valkyrie Veil"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/db/BBCS_Noel_VVeil.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
	           
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
##################################################################################################################################################################################################
    @la.command(name="5a", pass_context=False)  # Lambda from blazblue
    async def _5a_la(self):
        """Quick poke, not much range"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
            
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/57/BBCS_Lambda_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @la.command(name="5b", pass_context=False)  # Lambda from blazblue
    async def _5b_la(self):   
        """Kick that can be jump cancelled"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/50/BBCS_Lambda_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @la.command(name="5c", pass_context=False)  # Lambda from blazblue
    async def _5c_la(self): 
        """Yes, this is a projectile"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/97/BBCS_Lambda_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @la.command(name="2a", pass_context=False)  # Lambda from blazblue
    async def _2a_la(self):   
        """Same story as 5A"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c7/BBCS_Lambda_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @la.command(name="2b", pass_context=False)  # Lambda from blazblue
    async def _2b_la(self): 
        """Hits low"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ac/BBCS_Lambda_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @la.command(name="2c", pass_context=False)  # Lambda from blazblue
    async def _2c_la(self):   
        """Decent anti-air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1e/BBCS_Lambda_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @la.command(name="6a", pass_context=False)  # Lambda from blazblue
    async def _6a_la(self):  
        """A situational anti-air with head invulnerability"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()          

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/77/BBCS_Lambda_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @la.command(name="6b", pass_context=False)  # Lambda from blazblue
    async def _6b_la(self):  
        """Overhead"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()  			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/af/BBCS_Lambda_4B2.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @la.command(name="6c", pass_context=False)  # Lambda from blazblue
    async def _6c_la(self):  
        """Mainly used in combos"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a7/BBCS_Lambda_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @la.command(name="3c", pass_context=False)  # Lambda from blazblue
    async def _3c_la(self):   
        """Low sweep"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCS_Lambda_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @la.command(name="ja", pass_context=False)  # Lambda from blazblue
    async def _ja_la(self): 
        """Bad range air-to-air"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f4/BBCS_Lambda_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @la.command(name="jb", pass_context=False)  # Lambda from blazblue
    async def _jb_la(self):   
        """Overhead."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a5/BBCS_Lambda_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @la.command(name="jc", pass_context=False)  # Lambda from blazblue
    async def _jc_la(self): 
        """Backwards hitbox"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ac/BBCS_Lambda_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @la.command(name="j2c", pass_context=False)  # Lambda from blazblue
    async def _j2c_la(self): 
        """Combo filler/Situational air-to-air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCS_Lambda_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @la.command(name="5d", pass_context=False)  # Lambda from blazblue
    async def _5d_la(self):   
        """Horizontal sword"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  
            mp1 = info.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  		
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/ff/BBCP_Lambda_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @la.command(name="2d", pass_context=False)  # Lambda from blazblue
    async def _2d_la(self):  
        """70º angle sword"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/69/BBCP_Lambda_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Follow up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @la.command(name="6d", pass_context=False)  # Lambda from blazblue
    async def _6d_la(self):  
        """30° angle sword"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('p').get_text()		
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/db/BBCP_Lambda_6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Follow up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @la.command(name="4d", pass_context=False)  # Lambda from blazblue
    async def _4d_la(self):  
        """Overhead sword"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('p').get_text()				
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCP_Lambda_4D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Follow up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @la.command(name="jd", pass_context=False)  # Lambda from blazblue
    async def _jd_la(self):  
        """Aerial 30° angle sword"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ec/BBCP_Lambda_jD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Follow Up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @la.command(name="j2d", pass_context=False)  # Lambda from blazblue
    async def _j2d_la(self):  
        """Aerial -30° angle sword"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('p').get_text()				
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/83/BBCP_Lambda_j2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Follow up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @la.command(name="j6d", pass_context=False)  # Lambda from blazblue
    async def _j6d_la(self):  
        """Aerial -15° angle sword"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('p').get_text()		
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.6D"
            #embed.set_image(url='http://www.dustloop.com/wiki/images/9/9a/BBCP_lael_d6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Follow Up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @la.command(name="ft", pass_context=False)  # Lambda from blazblue
    async def _ft_la(self):   
        """Front Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c4/BBCS_Lambda_throw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @la.command(name="bt", pass_context=False)  # Lambda from blazblue
    async def _bt_la(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()					

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c4/BBCS_Lambda_throw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @la.command(name="at", pass_context=False)  # Lambda from blazblue
    async def _at_la(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[5]
            info =  table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1c/BBCS_Lambda_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @la.command(name="ca", pass_context=False)  # Lambda from blazblue
    async def _ca_la(self):   
        """New Counter Assault: Same animation as 5B"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/50/BBCS_Lambda_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @la.command(name="ct", pass_context=False)  # Lambda from blazblue
    async def _ct_la(self):   
        """Crush Trigger:  Barrier Smash"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/08/BBCP_Lambda_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Frame Data Cont:", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @la.command(name="214d", pass_context=False)  # Lambda from blazblue
    async def _s1_la(self):   
        """Use, but don't abuse"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Spike Chaser"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/25/BBCP_Lambda_SpikeChaser.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @la.command(name="236d", pass_context=False)  # Lambda from blazblue
    async def _s2_la(self):   
        """Pizza Cutter"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = info.find('p').get_text()				   

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Sickle Storm"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1a/BBCP_Lambda_SickleStorm.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @la.command(name="j214d", pass_context=False)  # Lambda from blazblue
    async def _s3_la(self):   
        """Less horizontal range than Nu's"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		 			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Crescent Saber"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/83/BBCP_Lambda_CrescentSaber.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props", value=mpA)
			
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @la.command(name="214a", pass_context=False)  # Lambda from blazblue
    async def _s4_la(self):
        """Combo tool. Field is useful for zoning."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()  
            mp2 = info.find('p').get_text()		
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Gravity Seed"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/eb/BBCS_Lambda_GravitySeed.png')
            embed.add_field(name="Gravity Seed Frame Data", value=tab)
            embed.add_field(name="Gravity Seed (Field) Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	

    @la.command(name="214b", pass_context=False)  # Lambda from blazblue
    async def _s4b_la(self):
        """Combo tool. Field is useful for zoning."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()  
            mp2 = info.find('p').get_text()		
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Gravity Seed(B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/eb/BBCS_Lambda_GravitySeed.png')
            embed.add_field(name="Gravity Seed Frame Data", value=tab)
            embed.add_field(name="Gravity Seed (Field) Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	

    @la.command(name="214c", pass_context=False)  # Lambda from blazblue
    async def _s4c_la(self):
        """Combo tool. Field is useful for zoning."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()  
            mp2 = info.find('p').get_text()		
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Gravity Seed(B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/eb/BBCS_Lambda_GravitySeed.png')
            embed.add_field(name="Gravity Seed Frame Data", value=tab)
            embed.add_field(name="Gravity Seed (Field) Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @la.command(name="236a", pass_context=False)  # Lambda from blazblue
    async def _s5_la(self):   
        """Advancing on your position"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()	
       

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Act Parser Zwei"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/58/BBCS_Lambda_ActParserA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @apt.command(name="236b", pass_context=False)  # Lambda from blazblue
    async def _s6_la(self):   
        """Breaking midsections"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Act Parser Tri"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/48/BBCF_Lambda_ActParserTri.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")

    @apt.command(name="6a", pass_context=False)  # Lambda from blazblue
    async def _s61_la(self):   
        """Backflip"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='6A (During Tri)')
            embed.title = "Act Parser Tri: Spada"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1a/BBCS_Lambda_ActParserSpada.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.set_footer(text='Backflip')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @apt.command(name="6b", pass_context=False)  # Lambda from blazblue
    async def _s62_la(self):   
        """Breaking Ankles"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='6B (During Tri)')
            embed.title = "Act Parser Tri: Blade"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a4/BBCS_Lambda_ActParserB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.set_footer(text='Breaking Ankles')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	

    @apt.command(name="6c", pass_context=False)  # Lambda from blazblue
    async def _s63_la(self):   
        """CHARGE"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='6C (During Tri)')
            embed.title = "Act Parser Tri: Cavalier"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/65/BBCS_Lambda_ActParserC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.set_footer(text='CHARGE')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @la.command(name="236c", pass_context=False)  # Lambda from blazblue
    async def _s7_la(self):   
        """CHARGE"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()	
       

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Act Parser Tri: Cavalier"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/65/BBCS_Lambda_ActParserC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @la.command(name="22d", pass_context=False)  # Lambda from blazblue
    async def _s8_la(self):   
        """Not a reversal"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()	
       

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Exiga Nail"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCP_Lambda_Exiga_Nail.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @la.command(name="236236d", pass_context=False)  # Lambda from blazblue
    async def _dd1_la(self):   
        """UNLIMITED BLADE WORKS"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Legacy Edge"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCP_Lambda_LegacyEdge.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @la.command(name="632146d", pass_context=False)  # Lambda from blazblue
    async def _dd2_la(self):   
        """(Air OK)Combo Ender"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"         
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Calamity Sword"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4f/BBCP_Lambda_CalamitySword.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="OD Ground Frame Data", value=tab1)
            embed.add_field(name="Air Frame Data", value=tab2)
            embed.add_field(name="OD Air Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					

    @la.command(name="abcd", pass_context=False)  # Lambda from blazblue
    async def _abcd_la(self): 
        """Exceed Accel: EX Supra"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Duo Cultus"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5c/BBCF_Lambda_DuoCultus.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @la.command(name="214214d", pass_context=False)  # Lambda from blazblue
    async def _astral_la(self):   
        """Hug.exe"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Lambda-11"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Sword of Destruction"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d5/BBCS_Lambda_SOD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
	           
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
##################################################################################################################################################################################################
    @mu.command(name="5a", pass_context=False)  # Mu 12 from blazblue
    async def _5a_mu(self):
        """Classic Jab with an above average disjointed hitbox"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"          
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bc/BBCS_Mu_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mu.command(name="5b", pass_context=False)  # Mu 12 from blazblue
    async def _5b_mu(self):   
        """Too bad it whiffs on recoil."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/81/BBCS_Mu_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mu.command(name="5c", pass_context=False)  # Mu 12 from blazblue
    async def _5c_mu(self): 
        """The Neutral"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Cont:"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/ca/BBCS_Mu_5C.png')
            embed1.add_field(name="Attack Props Cont.", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @mu.command(name="2a", pass_context=False)  # Mu 12 from blazblue
    async def _2a_mu(self):   
        """Probably the move you will be pressing the most."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7f/BBCS_Mu_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mu.command(name="2b", pass_context=False)  # Mu 12 from blazblue
    async def _2b_mu(self): 
        """Keep in mind that this move can easily be disrespected when used incorrectly."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ec/BBCS_Mu_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mu.command(name="2c", pass_context=False)  # Mu 12 from blazblue
    async def _2c_mu(self):   
        """May be Mu's biggest anti-air, but it's not the best in every situation."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/39/BBCS_Mu_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mu.command(name="6a", pass_context=False)  # Mu 12 from blazblue
    async def _6a_mu(self):  
        """Anti-air."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b1/BBCS_Mu_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mu.command(name="6b", pass_context=False)  # Mu 12 from blazblue
    async def _6b_mu(self):  
        """BOOM WHAT AN ENTRANCE"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]  			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
            mpB = "```" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "AP Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCS_Mu_6B.png')
            embed1.add_field(name="Attack Props Cont.", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @mu.command(name="6c", pass_context=False)  # Mu 12 from blazblue
    async def _6c_mu(self):  
        """FATAL!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]  

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "AP Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/12/BBCS_Mu_6C.png')
            embed1.add_field(name="Attack Props Cont.", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mu.command(name="3c", pass_context=False)  # Mu 12 from blazblue
    async def _3c_mu(self):   
        """Not always expected."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]  		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ee/BBCS_Mu_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @mu.command(name="ja", pass_context=False)  # Mu 12 from blazblue
    async def _ja_mu(self): 
        """Whiffs on crouch."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('li').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/54/BBCS_Mu_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @mu.command(name="jb", pass_context=False)  # Mu 12 from blazblue
    async def _jb_mu(self):   
        """Has a crossup hitbox."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/68/BBCS_Mu_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mu.command(name="jc", pass_context=False)  # Mu 12 from blazblue
    async def _jc_mu(self): 
        """Primarily used for air-to-air."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/06/BBCS_Mu_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mu.command(name="j2c", pass_context=False)  # Mu 12 from blazblue
    async def _j2c_mu(self): 
        """So big."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp + "```"
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/48/BBCS_Mu_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @mu.command(name="5d", pass_context=False)  # Mu 12 from blazblue
    async def _5d_mu(self):   
        """Don't get carried away"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            my_table1 = table[31]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCP_Mu_bit.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
			
            embed1 = discord.Embed()
            embed1.title = "Ground D Positions"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b2/BBCP_Mu_groundD.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mu.command(name="2d", pass_context=False)  # Mu 12 from blazblue
    async def _2d_mu(self):  
        """Don't get carried away"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            my_table1 = table[31]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCP_Mu_bit.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
			
            embed1 = discord.Embed()
            embed1.title = "Ground D Positions"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b2/BBCP_Mu_groundD.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mu.command(name="6d", pass_context=False)  # Mu 12 from blazblue
    async def _6d_mu(self):  
        """Don't get carried away"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            my_table1 = table[31]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[4]
            headers1 = table_body1.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCP_Mu_bit.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
			
            embed1 = discord.Embed()
            embed1.title = "Ground D Positions"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b2/BBCP_Mu_groundD.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @mu.command(name="4d", pass_context=False)  # Mu 12 from blazblue
    async def _4d_mu(self):  
        """Don't get carried away"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            my_table1 = table[31]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
			
            embed = discord.Embed()
            embed.title = "4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCP_Mu_bit.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
			
            embed1 = discord.Embed()
            embed1.title = "Ground D Positions"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b2/BBCP_Mu_groundD.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mu.command(name="j5d", pass_context=False)  # Mu 12 from blazblue
    async def _jd_mu(self):  
        """Mostly found in corner combos and setups."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            my_table1 = table[35]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
			
            embed = discord.Embed()
            embed.title = "J.5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCP_Mu_bit.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
			
            embed1 = discord.Embed()
            embed1.title = "Air D Positions"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCS_Mu_airD.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mu.command(name="j2d", pass_context=False)  # Mu 12 from blazblue
    async def _j2d_mu(self):  
        """Mostly found in corner combos and setups."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            my_table1 = table[35]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
			
            embed = discord.Embed()
            embed.title = "J.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCP_Mu_bit.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
			
            embed1 = discord.Embed()
            embed1.title = "Air D Positions"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCS_Mu_airD.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mu.command(name="j4d", pass_context=False)  # Mu 12 from blazblue
    async def _j4d_mu(self):  
        """Mostly found in corner combos and setups."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            my_table1 = table[35]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
			
            embed = discord.Embed()
            embed.title = "J.4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCP_Mu_bit.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
			
            embed1 = discord.Embed()
            embed1.title = "Air D Positions"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCS_Mu_airD.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @mu.command(name="j6d", pass_context=False)  # Mu 12 from blazblue
    async def _j6d_mu(self):  
        """Mostly found in corner combos and setups."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            my_table1 = table[35]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[4]
            headers1 = table_body1.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
			
            embed = discord.Embed()
            embed.title = "J.6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCP_Mu_bit.png')
            embed.add_field(name="Normal Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
			
            embed1 = discord.Embed()
            embed1.title = "Air D Positions"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCS_Mu_airD.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @mu.command(name="ft", pass_context=False)  # Mu 12 from blazblue
    async def _ft_mu(self):   
        """2c-b kara throw."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cf/BBCS_Mu_throw.png')
            embed.add_field(name="Frame Data", value=tab)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mu.command(name="bt", pass_context=False)  # Mu 12 from blazblue
    async def _bt_mu(self):   
        """Same as forward throw in every way."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')]					

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cf/BBCS_Mu_throw.png')
            embed.add_field(name="Frame Data", value=tab)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mu.command(name="at", pass_context=False)  # Mu 12 from blazblue
    async def _at_mu(self):   
        """Best poke in the game."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
			
            Data = [head.get_text() for head in headers.find_all('td')]				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/76/BBCS_Mu_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mu.command(name="ca", pass_context=False)  # Mu 12 from blazblue
    async def _ca_mu(self):   
        """Counter Assault: Range is sad."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/81/BBCS_Mu_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @mu.command(name="ct", pass_context=False)  # Mu 12 from blazblue
    async def _ct_mu(self):   
        """Crush Trigger:  Undine"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]		
            mp1 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b6/BBCP_Mu_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @mu.command(name="236a", pass_context=False)  # Mu 12 from blazblue
    async def _s1_mu(self):   
        """You can never use this enough."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('p').get_text()	
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Ama no Habaya - Arrows of Heaven"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/72/BBCS_Mu_ArrowsOfHeaven.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @mu.command(name="j236a", pass_context=False)  # Mu 12 from blazblue
    async def _s2_mu(self):   
        """You can never use this enough."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('p').get_text()	
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Ama no Habaya - Arrows of Heaven"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/72/BBCS_Mu_ArrowsOfHeaven.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @mu.command(name="623c", pass_context=False)  # Mu 12 from blazblue
    async def _s3_mu(self):   
        """The 10-frame startup and full body guard point properties make this a very good DP to get Mu's opponents off of her."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = info.find('li').get_text()	
            mp2 = [op.get_text() for op in info1.find_all('p')]
            vrs = headers.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] +"```"
			
            embed = discord.Embed()
            embed.title = "Tsunugui - Origins"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d2/BBCS_Mu_Origins.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mu.command(name="j623c", pass_context=False)  # Mu 12 from blazblue
    async def _s4_mu(self):   
        """The 10-frame startup and full body guard point properties make this a very good DP to get Mu's opponents off of her."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = info.find('li').get_text()	
            mp2 = [op.get_text() for op in info.find_all('p')]	
            vrs = headers.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] +"```"
			
            embed = discord.Embed()
            embed.title = "Tsunugui - Origins"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d2/BBCS_Mu_Origins.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @mu.command(name="63214c", pass_context=False)  # Mu 12 from blazblue
    async def _s5_mu(self):   
        """Can't read my poker face."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            mp1 = info.find('p').get_text()		 			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Furu no Tsurugi - Sword of Decimation"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6e/BBCS_Mu_SOD.png')
            embed.add_field(name="Level 1 Frame Data", value=tab)
            embed.add_field(name="Level 2 Frame Data", value=tab1)
            embed.add_field(name="Level 3 Frame Data", value=tab2)
            embed.add_field(name="Attack Props", value=mpA)		
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @mu.command(name="236d", pass_context=False)  # Mu 12 from blazblue
    async def _s6g_mu(self):
        """Ride the laser."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]	
            vrs = headers.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Ame no Totsuka - Totsuka Blade"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/da/BBCS_Mu_TotsukaBlade.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @mu.command(name="j236d", pass_context=False)  # Mu 12 from blazblue
    async def _s6a_mu(self):
        """Ride the laser."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]	
            vrs = headers.find('th').get_text()	

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Ame no Totsuka - Totsuka Blade"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/da/BBCS_Mu_TotsukaBlade.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @mu.command(name="214d", pass_context=False)  # Mu 12 from blazblue
    async def _s7_mu(self):   
        """Kaihou! 2.0"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()     

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Kuninotokotachi - Tokotachi Blade"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b6/BBCF_Mu_Kuninotokotachi.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")

    @mu.command(name="j214d", pass_context=False)  # Mu 12 from blazblue
    async def _s7a_mu(self):   
        """Kaihou! 2.0"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()  

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Kuninotokotachi - Tokotachi Blade"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b6/BBCF_Mu_Kuninotokotachi.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)

			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @mu.command(name="63214b", pass_context=False)  # Mu 12 from blazblue
    async def _s8_mu(self):
        """Lightning Legs!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		
            vrs = headers.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Ikutachi - Sword of Infinity"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1b/BBCP_Mu_Ikutachi.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @mu.command(name="632146c", pass_context=False)  # Mu 12 from blazblue
    async def _dd1_mu(self):   
        """Hello? Did you order the enormous hitbox?"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]	
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Omohikane - Wisdom of the Divines"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cd/BBCS_Mu_WisdomOfTheDivines.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed()
            embed1.title = "Omohikane - Wisdom of the Divines"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCS_Mu_WisdomOfTheDivines2.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @mu.command(name="632146d", pass_context=False)  # Mu 12 from blazblue
    async def _dd2_mu(self):   
        """Make it rain!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]	
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"      
			
            embed = discord.Embed()
            embed.title = "Yata no Kagami - Blessed Mirror"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b7/BBCS_Mu_BlessedMirror.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Reflected Lasers Frame Data", value=tab1)
            embed.add_field(name="Air Frame Data", value=tab2)
            embed.add_field(name="Air - Reflected Lasers Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					

    @mu.command(name="abcd", pass_context=False)  # Mu 12 from blazblue
    async def _abcd_mu(self): 
        """How to kill an angel"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]	
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
	   
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Tsuchiikadzuchi - Pillar of Light"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/51/BBCF_Mu_ExceedAccel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mu.command(name="222d", pass_context=False)  # Mu 12 from blazblue
    async def _astral_mu(self):   
        """Hug.exe"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mu-12"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]	
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Kamigoroshi no Tsurugi - Sword of the Godslayer"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCS_Mu_SwordOfTheGodslayer.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Kamigoroshi no Tsurugi - Sword of the Godslayer Finish"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f0/BBP_Mu_SwordOfTheGodslayer2.png')
	           
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
##################################################################################################################################################################################################
    @nu.command(name="5a", pass_context=False)  # Nu 13 from blazblue
    async def _5a_nu(self):
        #"""Classic Jab with an above average disjointed hitbox"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
            			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1d/BBCP_Nu_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @nu.command(name="5b", pass_context=False)  # Nu 13 from blazblue
    async def _5b_nu(self):   
        #"""Too bad it whiffs on recoil."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/ba/BBCP_Nu_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @nu.command(name="5c", pass_context=False)  # Nu 13 from blazblue
    async def _5c_nu(self): 
        #"""The Neutral"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e2/BBCP_Nu_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @nu.command(name="2a", pass_context=False)  # Nu 13 from blazblue
    async def _2a_nu(self):   
        #"""Probably the move you will be pressing the most."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b1/BBCP_Nu_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @nu.command(name="2b", pass_context=False)  # Nu 13 from blazblue
    async def _2b_nu(self): 
        #"""Keep in mind that this move can easily be disrespected when used incorrectly."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4a/BBCP_Nu_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @nu.command(name="2c", pass_context=False)  # Nu 13 from blazblue
    async def _2c_nu(self):   
        #"""May be Mu's biggest anti-air, but it's not the best in every situation."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/db/BBCP_Nu_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @nu.command(name="6a", pass_context=False)  # Nu 13 from blazblue
    async def _6a_nu(self):  
        #"""Anti-air."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/12/BBCP_Nu_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @nu.command(name="6b", pass_context=False)  # Nu 13 from blazblue
    async def _6b_nu(self):  
        #"""BOOM WHAT AN ENTRANCE"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]  			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b9/BBCP_Nu_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @nu.command(name="6c", pass_context=False)  # Nu 13 from blazblue
    async def _6c_nu(self):  
        #"""FATAL!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]  

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0f/BBCP_Nu_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @nu.command(name="3c", pass_context=False)  # Nu 13 from blazblue
    async def _3c_nu(self):   
        #"""Not always expected."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]  		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/ca/BBCP_Nu_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @nu.command(name="ja", pass_context=False)  # Nu 13 from blazblue
    async def _ja_nu(self): 
        #"""Whiffs on crouch."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]  

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCP_Nu_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @nu.command(name="jb", pass_context=False)  # Nu 13 from blazblue
    async def _jb_nu(self):   
        #"""Has a crossup hitbox."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')] 		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/68/BBCP_Nu_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @nu.command(name="jc", pass_context=False)  # Nu 13 from blazblue
    async def _jc_nu(self): 
        #"""Primarily used for air-to-air."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/de/BBCP_Nu_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @nu.command(name="j2c", pass_context=False)  # Nu 13 from blazblue
    async def _j2c_nu(self): 
        #"""So big."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/49/BBCP_Nu_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @nu.command(name="5d", pass_context=False)  # Nu 13 from blazblue
    async def _5d_nu(self):   
        """Give'em the D"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]  
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()	
            vrs3 = headers3.find('th').get_text()	
            mp1 = info.find('li').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')		
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"			
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCP_Nu_5D.png')
            embed.add_field(name="5D Frame Data", value=tab)
            embed.add_field(name="5DD Frame Data", value=tab1)
            embed.add_field(name="5D OD Follow-up Frame Data", value=tab2)
            embed.add_field(name="5DD OD Follow-up Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @nu.command(name="2d", pass_context=False)  # Nu 13 from blazblue
    async def _2d_nu(self):  
        """Give 'em the low D"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]  
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()	
            vrs3 = headers3.find('th').get_text()	
            mp1 = [op.get_text() for op in info.find_all('li')]				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')		
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"			
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/23/BBCP_Nu_2D.png')
            embed.add_field(name="2D Frame Data", value=tab)
            embed.add_field(name="2DD Frame Data", value=tab1)
            embed.add_field(name="2D OD Follow-up Frame Data", value=tab2)
            embed.add_field(name="2DD OD Follow-up Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @nu.command(name="6d", pass_context=False)  # Nu 13 from blazblue
    async def _6d_nu(self):  
        """Air HADOUKEN D"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]  
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()	
            vrs3 = headers3.find('th').get_text()	
            mp1 = [op.get_text() for op in info.find_all('li')]				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')		
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"			
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9d/BBCP_Nu_6D.png')
            embed.add_field(name="6D Frame Data", value=tab)
            embed.add_field(name="6DD Frame Data", value=tab1)
            embed.add_field(name="6D OD Follow-up Frame Data", value=tab2)
            embed.add_field(name="6DD OD Follow-up Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @nu.command(name="4d", pass_context=False)  # Nu 13 from blazblue
    async def _4d_nu(self):  
        """Sneaky D"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]  
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()	
            vrs3 = headers3.find('th').get_text()	
            mp1 = [op.get_text() for op in info.find_all('li')]				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')		
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"			
			
            embed = discord.Embed()
            embed.title = "4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/19/BBCP_Nu_4D.png')
            embed.add_field(name="4D Frame Data", value=tab)
            embed.add_field(name="4DD Frame Data", value=tab1)
            embed.add_field(name="4D OD Follow-up Frame Data", value=tab2)
            embed.add_field(name="4DD OD Follow-up Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @nu.command(name="jd", pass_context=False)  # Nu 13 from blazblue
    async def _jd_nu(self):  
        """Get down HERE!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]  
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()	
            vrs3 = headers3.find('th').get_text()	
            mp1 = [op.get_text() for op in info.find_all('li')]				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')		
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"			
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fd/BBCP_Nu_jD.png')
            embed.add_field(name="J.D Frame Data", value=tab)
            embed.add_field(name="J.DD Frame Data", value=tab1)
            embed.add_field(name="J.D OD Follow-up Frame Data", value=tab2)
            embed.add_field(name="J.DD OD Follow-up Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @nu.command(name="j2d", pass_context=False)  # Nu 13 from blazblue
    async def _j2d_nu(self):  
        """Stay down!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]  
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()	
            vrs3 = headers3.find('th').get_text()	
            mp1 = [op.get_text() for op in info.find_all('li')]				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')		
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"			
			
            embed = discord.Embed()
            embed.title = "J.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/92/BBCP_Nu_j2D.png')
            embed.add_field(name="J.2D Frame Data", value=tab)
            embed.add_field(name="J.2DD Frame Data", value=tab1)
            embed.add_field(name="J.2D OD Follow-up Frame Data", value=tab2)
            embed.add_field(name="J.2DD OD Follow-up Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @nu.command(name="j6d", pass_context=False)  # Nu 13 from blazblue
    async def _j6d_nu(self):  
        """The sudden suprise"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]  
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]  
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]  			
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()	
            vrs3 = headers3.find('th').get_text()	
            mp1 = [op.get_text() for op in info.find_all('li')]				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')		
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"			
			
            embed = discord.Embed()
            embed.title = "J.6D"
            #embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCP_nu_bit.png')
            embed.add_field(name="J.6D Frame Data", value=tab)
            embed.add_field(name="J.6DD Frame Data", value=tab1)
            embed.add_field(name="J.6D OD Follow-up Frame Data", value=tab2)
            embed.add_field(name="J.6DD OD Follow-up Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @nu.command(name="ft", pass_context=False)  # Nu 13 from blazblue
    async def _ft_nu(self):   
        """Forward Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"	
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/97/BBCP_Nu_Throw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @nu.command(name="bt", pass_context=False)  # Nu 13 from blazblue
    async def _bt_nu(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"	
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/97/BBCP_Nu_Throw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @nu.command(name="at", pass_context=False)  # Nu 13 from blazblue
    async def _at_nu(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "```"	
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/80/BBCP_Nu_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @nu.command(name="ca", pass_context=False)  # Nu 13 from blazblue
    async def _ca_nu(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b9/BBCP_Nu_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @nu.command(name="ct", pass_context=False)  # Nu 13 from blazblue
    async def _ct_nu(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]		
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/51/BBCP_Nu_CT.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @nu.command(name="214d", pass_context=False)  # Nu 13 from blazblue
    async def _s1_nu(self):   
        """Steins Gunner counterfeit"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 =  table_body.find_all('tr')[4]
            headers2 = table_body.find_all('tr')[5]
            info2 =  table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('li').get_text()	
            vrs = headers.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            mp2 = info1.find('li').get_text()	
            vrs1 = headers1.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            mp3 = info2.find('li').get_text()	
            vrs2 = headers2.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpB = "```" + "*" + mp2 + "```"
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpC = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Luminous Slave"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ad/BBCF_Nu_LuminousSlave.png')
            embed.add_field(name="214D Frame Data", value=tab)
            embed.add_field(name="214D Attack Props:", value=mpA, inline='true')
            embed.add_field(name="214D-C Frame Data", value=tab1)
            embed.add_field(name="214D-C Attack Props:", value=mpB, inline='true')
            embed.add_field(name="214[D] Frame Data", value=tab2)
            embed.add_field(name="214[D] Attack Props:", value=mpC, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @nu.command(name="236d", pass_context=False)  # Nu 13 from blazblue
    async def _s2_nu(self):   
        """Charged version is a Fatal Counter"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]	
            vrs = headers.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]		
            vrs1 = headers1.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]		
            vrs2 = headers2.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] +  "\n" + "*" + mp1[7] + "\n" + "*" + mp1[8] + "```"
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Sickle Storm"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/16/BBCP_Nu_SickleStormDia.png')
            embed.add_field(name="236D Frame Data", value=tab)
            embed.add_field(name="236D-C Frame Data", value=tab1)
            embed.add_field(name="236[D] Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "236D-C Sickle Storm"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/36/BBCP_Nu_SickleStormLuna.png')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @nu.command(name="j214d", pass_context=False)  # Nu 13 from blazblue
    async def _s3_nu(self):   
        """SUPRISE SHANK"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]	
            vrs = headers.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]		
            vrs1 = headers1.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]		
            vrs2 = headers2.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "```"
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Crescent Saber"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/49/BBCP_Nu_CrescentSaber.png')
            embed.add_field(name="J.214D Frame Data", value=tab)
            embed.add_field(name="J.214D-C Frame Data", value=tab1)
            embed.add_field(name="J.214[D] Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @nu.command(name="ap", pass_context=False)  # Nu 13 from blazblue
    async def _s4_nu(self):   
        """66/44 after certain moves (Air OK)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]	
            vrs = headers.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]		
            vrs1 = headers1.find('th').get_text()
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]				
            vrs2 = headers2.find('th').get_text()
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]				
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Act Parser"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ea/BBCP_Nu_ActParser.png')
            embed.add_field(name="66 Frame Data", value=tab)
            embed.add_field(name="44 Frame Data", value=tab1)
            embed.add_field(name="j.66 Frame Data", value=tab2)
            embed.add_field(name="j.44 Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @nu.command(name="gs", pass_context=False)  # Nu 13 from blazblue
    async def _s5_nu(self):   
        """(214A/B/C) Gravity Seed:  Anti-Tager Zone """
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]		 			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
			
            embed = discord.Embed(description='214A/B/C')
            embed.title = "Gravity Seed"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/25/BBCP_Nu_GravitySeed.png')
            embed.add_field(name="Gravity Seed Frame Data", value=tab)
            embed.add_field(name="Gravity Seed Field Frame Data", value=tab1)
            embed.add_field(name="Attack Props", value=mp)
			
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @nu.command(name="623c", pass_context=False)  # Nu 13 from blazblue
    async def _s6_nu(self):
        """(Air OK)JAZZ HANDS"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]	
            vrs = headers.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
			
            embed = discord.Embed()
            embed.title = "Supra Rage"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a2/BBCP_Nu_SupraRage.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")

    @nu.command(name="j623c", pass_context=False)  # Nu 13 from blazblue
    async def _s7_nu(self):
        """(Air OK)JAZZ HANDS"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]	
            vrs = headers.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
			
            embed = discord.Embed()
            embed.title = "Supra Rage"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a2/BBCP_Nu_SupraRage.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @nu.command(name="236236d", pass_context=False)  # Nu 13 from blazblue
    async def _dd1_nu(self):   
        """Machine Gun"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "```"
			
            embed = discord.Embed()
            embed.title = "Legacy Edge"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c9/BBCP_Nu_LegacyEdge.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @nu.command(name="632146d", pass_context=False)  # Nu 13 from blazblue
    async def _dd2_nu(self):   
        """(Air OK)Epic Sword Drop"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"      
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Calamity Sword"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7f/BBCP_Nu_CalamitySword.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Ground OD Frame Data", value=tab1)
            embed.add_field(name="Air Frame Data", value=tab2)
            embed.add_field(name="Air OD Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					

    @nu.command(name="abcd", pass_context=False)  # Nu 13 from blazblue
    async def _abcd_nu(self): 
        """4D X 400"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]	
            mp2 = [op.get_text() for op in info.find_all('p')]
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "True Impreza"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/66/BBCF_Nu_TrueImpreza.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @nu.command(name="214214d", pass_context=False)  # Nu 13 from blazblue
    async def _astral_nu(self):   
        """Execute Hug.Exe"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nu-13"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Sword of Destruction"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d8/BBCP_Nu_SwordofDestruction.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Sword of Destruction Finisher"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/e5/BBCP_Nu_SwordofDestruction2.png')
	           
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
###################################################################################################################################################################################################
    @te.command(name="5a", pass_context=False)  # Terumi from blazblue
    async def _5a_te(self):
        """Classic backhander"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3e/BBCP_Terumi_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @te.command(name="5b", pass_context=False)  # Terumi from blazblue
    async def _5b_te(self):   
        """Dance and sting like an evil hornet"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCP_Terumi_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @te.command(name="5c", pass_context=False)  # Terumi from blazblue
    async def _5c_te(self): 
        """Two are better than one"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/13/BBCP_Terumi_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @te.command(name="2a", pass_context=False)  # Terumi from blazblue
    async def _2a_te(self):   
        """Clenched fists don't have any class"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5e/BBCP_Terumi_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @te.command(name="2b", pass_context=False)  # Terumi from blazblue
    async def _2b_te(self): 
        """Not safe on block but fast enough for Terumi's victims"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/dd/BBCP_Terumi_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @te.command(name="2c", pass_context=False)  # Terumi from blazblue
    async def _2c_te(self):   
        """Far reach, jump-cancelable, what you want more?"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = info.find('li').get_text()
            mp2 = [op.get_text() for op in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/45/BBCP_Terumi_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @te.command(name="6a", pass_context=False)  # Terumi from blazblue
    async def _6a_te(self):  
        """From above?"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]        

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ee/BBCP_Terumi_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @te.command(name="6b", pass_context=False)  # Terumi from blazblue
    async def _6b_te(self):  
        """Soooo satisfying to ram your knee into someone else"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('li').get_text()
            mp2 = [op.get_text() for op in info.find_all('p')]  	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0b/BBCP_Terumi_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Feint Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @te.command(name="6c", pass_context=False)  # Terumi from blazblue
    async def _6c_te(self):  
        """Slice aaand dice!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/96/BBCP_Terumi_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @te.command(name="3c", pass_context=False)  # Terumi from blazblue
    async def _3c_te(self):   
        """Always good to sweep someone off their feet"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('p')]			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/19/BBCP_Terumi_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @te.command(name="ja", pass_context=False)  # Terumi from blazblue
    async def _ja_te(self): 
        """Jab, jab, jab..."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6a/BBCP_Terumi_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @te.command(name="jb", pass_context=False)  # Terumi from blazblue
    async def _jb_te(self):   
        """Roundhouse kick, ha!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f7/BBCP_Terumi_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @te.command(name="jc", pass_context=False)  # Terumi from blazblue
    async def _jc_te(self): 
        """Slash 'em!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4f/BBCP_Terumi_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @te.command(name="5d", pass_context=False)  # Terumi from blazblue
    async def _5d_te(self):   
        """Jabak- I mean 5D"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = [po.get_text() for po in info.find_all('p')]	
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]			
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  		
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7d/BBCP_Terumi_5D.png')
            embed.add_field(name="5D Frame Data", value=tab)
            embed.add_field(name="5D Attack Props:", value=mpA, inline='true')
            embed.add_field(name="5D OD Frame Data", value=tab1)
            embed.add_field(name="5D OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @te.command(name="2d", pass_context=False)  # Terumi from blazblue
    async def _2d_te(self):  
        """Great for okizeme and pulling them back into misery"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp3 = [op2.get_text() for op2 in info1.find_all('li')]
            mp4 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/16/BBCP_Terumi_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @te.command(name="6d", pass_context=False)  # Terumi from blazblue
    async def _6d_te(self):  
        """Have a nice flight, haha!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]	
            mp4 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/06/BBCP_Terumi_6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @te.command(name="4d", pass_context=False)  # Terumi from blazblue
    async def _4d_te(self):  
        """Kicking the dog!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp3 = [po.get_text() for po in info1.find_all('li')]
            mp4 = info1.find('p').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  			
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/36/BBCF_Terumi_4D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @te.command(name="jd", pass_context=False)  # Terumi from blazblue
    async def _jd_te(self):  
        """Yay! No extended hurtbox!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 			
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]		
            mp1 = info.find('li').get_text()
            mp2 = [op.get_text() for op in info.find_all('p')]	
            mp4 = info1.find('p').get_text()	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "j.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/13/BBCP_Terumi_jD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @te.command(name="j2d", pass_context=False)  # Terumi from blazblue
    async def _j2d_te(self):  
        """Ressen- I mean J.2D"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 			
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]		
            mp1 = info.find('li').get_text()
            mp2 = [op.get_text() for op in info.find_all('p')]	
            mp4 = [po.get_text() for po in info1.find_all('p')]	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "```"
			
            embed = discord.Embed()
            embed.title = "j.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5b/BBCP_Terumi_j2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @te.command(name="ft", pass_context=False)  # Terumi from blazblue
    async def _ft_te(self):   
        """The heel must hurt..."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a6/BBCP_Terumi_ForwardThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @te.command(name="bt", pass_context=False)  # Terumi from blazblue
    async def _bt_te(self):   
        """Sucks to be you!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ac/BBCP_Terumi_BackThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @te.command(name="at", pass_context=False)  # Terumi from blazblue
    async def _at_te(self):   
        """Sucks to be you!, now in air"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [op.get_text() for op in info.find_all('p')]		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/98/BBCP_Terumi_AirThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @te.command(name="ca", pass_context=False)  # Terumi from blazblue
    async def _ca_te(self):   
        """Sh**, missed again! Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ee/BBCP_Terumi_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @te.command(name="ct", pass_context=False)  # Terumi from blazblue
    async def _ct_te(self):   
        """Zanei- I mean Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9a/BBCP_Terumi_CT.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @te.command(name="236d", pass_context=False)  # Terumi from blazblue
    async def _s1_te(self):   
        """You're gonna see this A LOT"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [op1.get_text() for op1 in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Snakebite - Jagaku"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/33/BBCP_Terumi_236D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @te.command(name="214d", pass_context=False)  # Terumi from blazblue
    async def _s2_te(self):   
        """Enjoy the pain!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Retaliating Fang - Gasenshou"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/72/BBCP_Terumi_214D_%281%29.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Retaliating Fang - Gasenshou Finisher"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f1/BBCP_Terumi_214D_%282%29.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @te.command(name="22c", pass_context=False)  # Terumi from blazblue
    async def _s3_te(self):   
        """That stomping special"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    
            mp2 = [op1.get_text() for op1 in info.find_all('p')]			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Cleaving Fang - Garengeki"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8b/BBCP_Terumi_22C.png')
            embed.add_field(name="Light Frame Data", value=tab)
            embed.add_field(name="Heavy Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @te.command(name="214c", pass_context=False)  # Terumi from blazblue
    async def _s4_te(self):   
        """Quite a literal overhead"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
       

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Agonizing Fang - Tsuishoga"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cf/BBCF_Terumi_Tsuishoga.png')
            embed.add_field(name="No Charge Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @te.command(name="41236c", pass_context=False)  # Terumi from blazblue
    async def _dd1_te(self):
        """(AIR OK)Who says that snakes can't be fast?"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body.find_all('tr')[4]
            headers3 = table_body.find_all('tr')[5]
            info1 =  table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    
            mp2 = [op1.get_text() for op1 in info.find_all('p')]
            mp3 = info1.find('li').get_text()    
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Gleaming Fang - Jakyou Messenga"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fb/BBCP_Terumi_41236C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "OD Gleaming Fang - Jakyou Messenga"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/e9/BBCP_Terumi_41236C_Air.png')
            embed1.add_field(name="OD Frame Data", value=tab2)
            embed1.add_field(name="OD Air Frame Data", value=tab3)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @te.command(name="623b", pass_context=False)  # Terumi from blazblue
    async def _dd2_te(self):   
        """(AIR OK)10 frames of invul! Hold that Haz!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = info1.find('li').get_text()
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Divine Twin Blades - Gouga Soutenjin"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3d/BBCP_Terumi_623B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @te.command(name="63214b", pass_context=False)  # Terumi from blazblue
    async def _dd3_te(self):   
        """Up High."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[7]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = info1.find('li').get_text()
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()		
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Serpent's Laceration - Orochi Burensen(B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a4/BBCP_Terumi_63214B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @te.command(name="63214a", pass_context=False)  # Terumi from blazblue
    async def _dd4_te(self):   
        """Down Low."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[6]
            info = table_body.find_all('tr')[4]
            info1 = table_body.find_all('tr')[7]

			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [op.get_text() for op in info.find_all('p')]
            mp3 = info1.find('li').get_text()
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()		
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Serpent's Laceration - Orochi Burensen(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b7/BBCP_Terumi_63214A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @te.command(name="236236a", pass_context=False)  # Terumi from blazblue
    async def _dd5_te(self):   
        """When it works, then with a big, venomous grin..."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[4]
            headers3 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()	
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()			
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Venomous Bite - Ouja Zanrouga"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCP_Terumi_236236A.png')
            embed.add_field(name="Catch Frame Data", value=tab)
            embed.add_field(name="Attack Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA)
            embed.add_field(name="OD Catch Frame Data", value=tab2)
            embed.add_field(name="OD Attack Frame Data", value=tab3)
            embed.add_field(name="OD Attack Props:", value=mpB)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @te.command(name="632146d", pass_context=False)  # Terumi from blazblue
    async def _dd6_te(self):   
        """Drain everything until nothing is left"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[5]
            headers4 = table_body.find_all('tr')[6]
            headers5 = table_body.find_all('tr')[7]
            info = table_body.find_all('tr')[4]
            info1 = table_body.find_all('tr')[8]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = [op.get_text() for op in info.find_all('p')]
            mp3 = info1.find('li').get_text()
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()	
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()	
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()			
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpA1 = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Serpent's Cursed Sting - Jabaku Fuuenjin"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9e/BBCP_Terumi_632146D_%281%29.png')
            embed.add_field(name="Attack Frame Data", value=tab)
            embed.add_field(name="Additional Attack Frame Data", value=tab1)
            embed.add_field(name="Finisher Frame Data", value=tab2)
            embed.add_field(name="OD Attack Frame Data", value=tab3)
            embed.add_field(name="OD Additional Attacks Frame Data", value=tab4)
            embed.add_field(name="OD Finisher Frame Data", value=tab5)
            embed.add_field(name="Attack Props", value=mpA)
			
            embed1 = discord.Embed()
            embed1.title = "Attack Props cont."
            embed1.add_field(name="Attack Props: Cont.", value=mpA1)
			
            embed2 = discord.Embed()
            embed2.title = "Attack Props cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/6/6f/BBCP_Terumi_632146D_%282%29.png')
            embed2.add_field(name="OD Attack Props:", value=mpB)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @te.command(name="236236d", pass_context=False)  # Terumi from blazblue
    async def _dd7_te(self):   
        """Get over here and let me hear you cry!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = [op.get_text() for op in info.find_all('p')]
            mp3 = info1.find('li').get_text()
            mp4 = [op1.get_text() for op1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()		
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpA1 = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Screeches of the Condemned - Jarin Renshouga"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed()
            embed1.title = "Attack Props cont."
            embed1.add_field(name="Attack Props:", value=mpA1)
			
            embed2 = discord.Embed()
            embed2.title = "Attack Props cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/3/33/BBCP_Terumi_236236D.png')
            embed2.add_field(name="OD Attack Props:", value=mpB)			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @te.command(name="214214d", pass_context=False)  # Terumi from blazblue
    async def _dd8_te(self):   
        """Get over here and let me hear you cry! Air Edition"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[4]

			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = [op.get_text() for op in info.find_all('p')]
            mp3 = info1.find('li').get_text()
            mp4 = [op1.get_text() for op1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()		
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpA1 = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Screeches of the Condemned - Jarin Renshouga"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed()
            embed1.title = "Attack Props cont."
            embed1.add_field(name="Attack Props:", value=mpA1)
			
            embed2 = discord.Embed()
            embed2.title = "Attack Props cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/0/0b/BBCP_Terumi_214214D.png')
            embed2.add_field(name="OD Attack Props:", value=mpB)
			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					

    @te.command(name="abcd", pass_context=False)  # Terumi from blazblue
    async def _abcd_te(self): 
        """Exceed Accel:  Come on, devour them!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Dungeon of Serpents - Jaraku Enkokusen"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cd/BBCF_Terumi_JarakuEnkokusen.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @te.command(name="222d", pass_context=False)  # Terumi from blazblue
    async def _222d_te(self):   
        """Feel the wrath of the true Susano'o!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Yuuki_Terumi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Unholy Wrath of the Basilisk - Orochizanto Reppuga"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/78/BBCP_Terumi_222D_2.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
###################################################################################################################################################################################################
    @vk.command(name="5a", pass_context=False)  # Valkenhayn from blazblue
    async def _5a_vk(self):
        #"""Classic backhander"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
            
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bc/BBCS_Valkenhayn_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')

			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="5b", pass_context=False)  # Valkenhayn from blazblue
    async def _5b_vk(self):   
        #"""Dance and sting like an evil hornet"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5c/BBCS_Valkenhayn_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="5c", pass_context=False)  # Valkenhayn from blazblue
    async def _5c_vk(self): 
        #"""Two are better than one"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2a/BBCS_Valkenhayn_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @vk.command(name="2a", pass_context=False)  # Valkenhayn from blazblue
    async def _2a_vk(self):   
        #"""Clenched fists don't have any class"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b2/BBCS_Valkenhayn_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="2b", pass_context=False)  # Valkenhayn from blazblue
    async def _2b_vk(self): 
        #"""Not safe on block but fast enough for Terumi's victims"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f0/BBCS_Valkenhayn_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="2c", pass_context=False)  # Valkenhayn from blazblue
    async def _2c_vk(self):   
        #"""Far reach, jump-cancelable, what you want more?"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
			
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f9/BBCS_Valkenhayn_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="6a", pass_context=False)  # Valkenhayn from blazblue
    async def _6a_vk(self):  
        #"""From above?"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d1/BBCS_Valkenhayn_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="6b", pass_context=False)  # Valkenhayn from blazblue
    async def _6b_vk(self):  
        """Gentlemen's Elbow"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]  			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/51/BBCF_Valkenhayn_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @vk.command(name="6c", pass_context=False)  # Valkenhayn from blazblue
    async def _6c_vk(self):  
        """Usher, Usher..."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')] 	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2a/BBCS_Valkenhayn_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="3c", pass_context=False)  # Valkenhayn from blazblue
    async def _3c_vk(self):   
        #"""Always good to sweep someone off their feet"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')] 			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/12/BBCS_Valkenhayn_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @vk.command(name="ja", pass_context=False)  # Valkenhayn from blazblue
    async def _ja_vk(self): 
        #"""Jab, jab, jab..."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6d/BBCS_Valkenhayn_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @vk.command(name="jb", pass_context=False)  # Valkenhayn from blazblue
    async def _jb_vk(self):   
        #"""Roundhouse kick, ha!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]	
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/38/BBCS_Valkenhayn_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="jc", pass_context=False)  # Valkenhayn from blazblue
    async def _jc_vk(self): 
        #"""Slash 'em!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')] 			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCS_Valkenhayn_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="w5a", pass_context=False)  # Valkenhayn from blazblue
    async def _w5a_vk(self): 
        #"""Slash 'em!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Wolf 5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6b/BBCS_Valkenhayn_5Aw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="w5b", pass_context=False)  # Valkenhayn from blazblue
    async def _w5b_vk(self): 
        #"""Slash 'em!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Wolf 5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/98/BBCS_Valkenhayn_5Bw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="w5c", pass_context=False)  # Valkenhayn from blazblue
    async def _w5c_vk(self): 
        #"""Slash 'em!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Wolf 5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/67/BBCP_Valkenhayn_5Cw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="wja", pass_context=False)  # Valkenhayn from blazblue
    async def _wja_vk(self): 
        #"""Slash 'em!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Wolf J.A"
            embed.add_field(name="J.A Frame Data", value=tab)
            embed.add_field(name="J.AA Frame Data", value=tab1)
            embed.add_field(name="J.AAA Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Wolf J.A Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/d2/BBCS_Valkenhayn_jAw.png')
            embed1.add_field(name="Attack Props cont.", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="wjb", pass_context=False)  # Valkenhayn from blazblue
    async def _wjb_vk(self): 
        #"""Slash 'em!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Wolf J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7c/BBCS_Valkenhayn_jBw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="wjc", pass_context=False)  # Valkenhayn from blazblue
    async def _wjc_vk(self): 
        #"""Slash 'em!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Wolf J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/39/BBCP_Valkenhayn_JCw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @vk.command(name="5d", pass_context=False)  # Valkenhayn from blazblue
    async def _5d_vk(self):   
        """WOLFE"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info1.find('li').get_text()		
            mp3 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  		
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp3 + "```"
            mpA = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2c/BBCS_Valkenhayn_5D.png')
            embed.add_field(name="5D Frame Data", value=tab)
            embed.add_field(name="5D Attack Props:", value=mp, inline='true')
            embed.add_field(name="Wolf Frame Data", value=tab1)
            embed.add_field(name="Wolf Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="gesh", pass_context=False)  # Valkenhayn from blazblue
    async def _Gesh_vk(self):  
        """Geschwind Wolf:  Cancel Human Attack with direction +D"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')			
            mpA = "```" + "*6D: Can cancel into attacks on 14F. During OD, on 7F" + "\n" + "*4D: Can cancel into attacks on 21F. During OD, on 3F" + "\n" + "*1/2/3D: Can cancel into attacks on 12F. During OD, on 10F" + "\n" + "*8D: Can cancel into attacks on 20F. During OD, on 14F" + "\n" + "*7D: Can cancel into attacks on 15F. During OD, on 3F" + "\n" + "*9D: Can cancel into attacks on 15F. During OD, on 9F" + "```"
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='Cancel Human Attack with direction +D')
            embed.title = "Geschwind Wolf"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f1/BBCS_Valkenhayn_jD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Geschwind Wolf Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/11/BBCS_Valkenhayn_ND.png')
            embed1.add_field(name="Additional Information", value=mpA)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
			
    @vk.command(name="rasen", pass_context=False)  # Valkenhayn from blazblue
    async def _Rasen_vk(self):  
        """Rasen Wolf: ND during Werewolf"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')			
            mpA = "```" + "*6D: Can cancel into attacks on 5F." + "\n" + "*4D: Can cancel into attacks on 11F." + "\n" + "*1/2/3D: Can cancel into attacks on 3F." + "\n" + "*8D: Can cancel into attacks on 9F." + "\n" + "*7D: Can cancel into attacks on 11F." + "\n" + "*9D: Can cancel into attacks on 5F." + "```"
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='ND during Werewolf')
            embed.title = "Rasen Wolf"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/30/BBCS_Valkenhayn_jCw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Rasen Wolf Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/11/BBCS_Valkenhayn_ND.png')
            embed1.add_field(name="Additional Information", value=mpA)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @vk.command(name="ft", pass_context=False)  # Valkenhayn from blazblue
    async def _ft_vk(self):   
        """Rude..."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/df/BBCS_Valkenhayn_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="bt", pass_context=False)  # Valkenhayn from blazblue
    async def _bt_vk(self):   
        """Still rude..."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "* Can be followed up with 236C midscreen, but causes a wallbounce in the corner allowing for different followups. Valkenhayn's throw has a deceptively big hitbox for what it is. Even without a followup, Valk throws the opponent to the other side of the screen, allowing good corner carry. You may find yourself not using his throw because the wolf provides you with a ton of more effective options, but it is an option if you are low on/out of wolf meter and want to get some breathing space." + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/ff/BBCS_Valkenhayn_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="at", pass_context=False)  # Valkenhayn from blazblue
    async def _at_vk(self):   
        """The rudest!!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7d/BBCS_Valkenhayn_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="ca", pass_context=False)  # Valkenhayn from blazblue
    async def _ca_vk(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2a/BBCS_Valkenhayn_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @vk.command(name="ct", pass_context=False)  # Valkenhayn from blazblue
    async def _ct_vk(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/33/BBCP_Valkenhayn_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @vk.command(name="236a", pass_context=False)  # Valkenhayn from blazblue
    async def _s1_vk(self):   
        #"""You're gonna see this A LOT"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Nacht Jager (Night Hunter)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5e/BBCS_Valkenhayn_NachtJager.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @vk.command(name="236b", pass_context=False)  # Valkenhayn from blazblue
    async def _s2_vk(self):   
        #"""Enjoy the pain!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            my_table1 = table[59]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp4 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Schwarz Jagd (Dark Hunting)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/59/BBCS_Valkenhayn_SchwarzJagd.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='236B after Schwarz Jagd')
            embed1.title = "Weiss Jagd (White Hunting)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCS_Valkenhayn_WeisJagd.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @vk.command(name="236c", pass_context=False)  # Valkenhayn from blazblue
    async def _s3_vk(self):   
        #"""That stomping special"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Nacht Rosen (Night Rose)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f9/BBCS_Valkenhayn_NachtRosen.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @vk.command(name="j214b", pass_context=False)  # Valkenhayn from blazblue
    async def _s4_vk(self):   
        """Quite a literal overhead"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')] 
       

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Mondlicht (Moonlight)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4a/BBCS_Valkenhayn_Mondlicht.png')
            embed.add_field(name="No Charge Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="konig", pass_context=False)  # Valkenhayn from blazblue
    async def _s5_vk(self):
        """236A/B/C during Werewolf"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[5]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    
            mp2 = [op1.get_text() for op1 in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
			
            embed = discord.Embed()
            embed.title = "Konig Wolf"
            embed.add_field(name="A Frame Data", value=tab)
            embed.add_field(name="A(Air) Frame Data", value=tab1)
            embed.add_field(name="B Frame Data", value=tab2)
            embed.add_field(name="B(Air) Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Konig Wolf Cont."
            embed1.add_field(name="Attack Props Cont.", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "Konig Wolf Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/5/53/BBCS_Valkenhayn_KonigWolf.png')
            embed2.add_field(name="Attack Props Cont.", value=mpC)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @vk.command(name="eisen", pass_context=False)  # Valkenhayn from blazblue
    async def _s6_vk(self):   
        """j.214A/B/C during Werewolf"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')] 
       

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Eisen Wolf"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCS_Valkenhayn_EisenWolf.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="wthrow", pass_context=False)  # Valkenhayn from blazblue
    async def _s7_vk(self):   
        """B+C during Werewolf, air OK"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')] 
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Himmel Wolf"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/72/BBCS_Valkenhayn_HimmelWolf.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="632146d", pass_context=False)  # Valkenhayn from blazblue
    async def _dd1_vk(self):
        """WOLF-yuken"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text() 
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Sturm Wolf"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Sturm Wolf Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/c4/BBCS_Valkenhayn_SturmWolf.png')
            embed1.add_field(name="Attack Props Cont.", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @vk.command(name="j236236c", pass_context=False)  # Valkenhayn from blazblue
    async def _dd2_vk(self):   
        """SUPRISE WOLF LEG!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Konig Flug"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed()
            embed1.title = "Konig Flug Cont."
            embed1.add_field(name="Attack Props Cont.", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "Konig Flug Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/9/9a/BBCS_Valkenhayn_KonigFlug.png')
            embed2.add_field(name="Attack Props Cont.", value=mpC)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					

    @vk.command(name="abcd", pass_context=False)  # Valkenhayn from blazblue
    async def _abcd_vk(self): 
        """Exceed Accel"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Sieg Nagel"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c8/BBCF_Valkenhayn_ExceedAccel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vk.command(name="214214c", pass_context=False)  # Valkenhayn from blazblue
    async def _astral_vk(self):   
        """Werewolf mode engage"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Valkenhayn_R._Hellsing"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Blut Vollmond"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f4/BBCS_Valkenhayn_BlutVollmond.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
###################################################################################################################################################################################################
    @ts.command(name="5a", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _5a_ts(self):
        #"""Classic backhander"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"           
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b0/BBCS_Tsubaki_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
		
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="5b", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _5b_ts(self):   
        #"""Dance and sting like an evil hornet"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            my_table1 = table[5]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/de/BBCS_Tsubaki_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5bb"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/da/BBCS_Tsubaki_5BB.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="5c", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _5c_ts(self): 
        #"""Two are better than one"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            my_table1 = table[9]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = [po.get_text() for po in info1.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3d/BBCS_Tsubaki_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5cc"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/ae/BBCS_Tsubaki_5CC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @ts.command(name="2a", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _2a_ts(self):   
        #"""Clenched fists don't have any class"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/01/BBCS_Tsubaki_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="2b", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _2b_ts(self): 
        #"""Not safe on block but fast enough for Terumi's victims"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            my_table1 = table[15]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp3 = info1.find('p').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "2b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCS_Tsubaki_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "2bb"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/de/BBCS_Tsubaki_2BB.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="2c", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _2c_ts(self):   
        #"""Far reach, jump-cancelable, what you want more?"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            my_table1 = table[19]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp3 = info1.find('p').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "```"
            mpA1 = "```" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "2c"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/c0/BBCS_Tsubaki_2C.png')
            embed1.add_field(name="Attack Props cont.", value=mpA1)
			
            embed2 = discord.Embed()
            embed2.title = "2cc"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/0/03/BBCS_Tsubaki_2CC.png')
            embed2.add_field(name="Frame Data", value=tab1)
            embed2.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="6a", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _6a_ts(self):  
        #"""From above?"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ec/BBCS_Tsubaki_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="6b", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _6b_ts(self):  
        """Gentlemen's Elbow"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            my_table1 = table[25]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp3 = [po1.get_text() for po1 in info1.find_all('p')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e3/BBCS_Tsubaki_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6bb"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/4f/BBCS_Tsubaki_6BB.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ts.command(name="6c", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _6c_ts(self):  
        """Usher, Usher..."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            my_table1 = table[29]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp3 = [po1.get_text() for po1 in info1.find_all('p')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/de/BBCS_Tsubaki_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6cc"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/bb/BBCS_Tsubaki_6CC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="3c", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _3c_ts(self):   
        #"""Always good to sweep someone off their feet"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            my_table1 = table[33]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp4 = [po1.get_text() for po1 in info1.find_all('p')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "\n" + "*" + mp4[2] + "```"
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bf/BBCS_Tsubaki_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "3cc"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/8e/BBCS_Tsubaki_3CC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ts.command(name="ja", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _ja_ts(self): 
        #"""Jab, jab, jab..."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/64/BBCS_Tsubaki_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ts.command(name="jb", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _jb_ts(self):   
        #"""Roundhouse kick, ha!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            my_table1 = table[39]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6c/BBCS_Tsubaki_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "J.BB"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/15/BBCS_Tsubaki_jBB.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="jc", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _jc_ts(self): 
        #"""Slash 'em!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            my_table1 = table[43]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3b/BBCS_Tsubaki_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "J.CC"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/e9/BBCS_Tsubaki_jCC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="5d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _5d_ts(self):   
        """READ DIS BOOK"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find_all('li')[0].get_text()
            mp2 = [po.get_text() for po in info.find_all('p')] 	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  		
            mp = "```" + "*" + mp1 + "```"
            mpC = "```" + "*" + mp2[0] + "```"
            mpD = "```" + "*" + mp2[1] + "```"
            mpB = "```" + "*Charge rate (normal): 5~6F = 500 points per frame; 7~17F = 250 points per frame; 18F~ = 200 points per frame" + "\n" + "*Charge rate (charge-cancel): 5~6F = 1250 points per frame" + "\n" + "*Charge rate (charge-cancel from 22B):5~6F = 2500 points per frame" + "```"
            mpA = "```" + "*Charge rate (normal): 7~21F = 250 points per frame; 22F~ = 200 points per frame" + "\n" + "*Charge rate (charge-cancel): 7~10F = 625 points per frame" + "\n" + "*Charge rate (charge-cancel from 22B): 7~10F = 1250 points per frame" + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="5D Deatils", value=mp)
			
            embed1 = discord.Embed()
            embed1.title = "Normal"
            embed1.add_field(name="5D Normal Attack Props", value=mpA)
			
            embed2 = discord.Embed()
            embed2.title = "OverDrive"
            embed2.add_field(name="5D OverDrive Attack Props", value=mpB)
			
            embed3 = discord.Embed()
            embed3.title = "5D Cont."
            embed3.add_field(name="Additional Info", value=mpC)
			
            embed4 = discord.Embed()
            embed4.title = "5D Cont."
            embed4.set_image(url='http://www.dustloop.com/wiki/images/6/6f/BBCS_Tsubaki_5D.png')
            embed4.add_field(name="Additional Info", value=mpD)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="2d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _2d_ts(self):  
        """Crouching Charge"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find_all('li')[0].get_text()
            mp2 = [po.get_text() for po in info.find_all('p')] 	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  		
            mp = "```" + "*" + mp1 + "```"
            mpC = "```" + "*" + mp2[0] + "```"
            mpD = "```" + "*" + mp2[1] + "```"
            mpA = "```" + "*Charge rate (normal): 7~21F = 250 points per frame; 22F~ = 200 points per frame" + "\n" + "*Charge rate (charge-cancel): 7~10F = 625 points per frame" + "\n" + "*Charge rate (charge-cancel from 22B): 7~10F = 1250 points per frame" + "```"
            mpB = "```" + "*Charge rate (normal): 5~6F = 500 points per frame; 7~17F = 250 points per frame; 18F~ = 200 points per frame" + "\n" + "*Charge rate (charge-cancel): 5~6F = 1250 points per frame" + "\n" + "*Charge rate (charge-cancel from 22B):5~6F = 2500 points per frame" + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="2D Deatils", value=mp)
			
            embed1 = discord.Embed()
            embed1.title = "Normal"
            embed1.add_field(name="2D Normal Attack Props", value=mpA)
			
            embed2 = discord.Embed()
            embed2.title = "OverDrive"
            embed2.add_field(name="2D OverDrive Attack Props", value=mpB)
            
            embed3 = discord.Embed()
            embed3.title = "2D Cont."
            embed3.add_field(name="Additional Info", value=mpC)
			
            embed4 = discord.Embed()
            embed4.title = "2D Cont."
            embed4.set_image(url='http://www.dustloop.com/wiki/images/1/18/BBCS_Tsubaki_2D.png')
            embed4.add_field(name="Additional Info", value=mpD)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ts.command(name="jd", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _jd_ts(self):  
        """Really Feeling it!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = info.find_all('li')[0].get_text()
            mp2 = [po.get_text() for po in info.find_all('p')] 	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  		
            mp = "```" + "*" + mp1 + "```"
            mpC = "```" + "*" + mp2[0] + "```"
            mpD = "```" + "*" + mp2[1] + "```"
            mpA = "```" + "*Charge rate (normal): 4~7F = 250 points per frame; 8-21F~ = 200 points per frame; 22F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~7F = 625 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 4~7F = 1250 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
            mpB = "```" + "*Charge rate (normal): 4~5F = 500 points per frame; 6~20F = 250 points per frame; 21F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~5F = 1250 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 5~6F = 2500 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="JD Deatils", value=mp)
			
            embed1 = discord.Embed()
            embed1.title = "Normal"
            embed1.add_field(name="JD Normal Attack Props", value=mpA)
			
            embed2 = discord.Embed()
            embed2.title = "OverDrive"
            embed2.add_field(name="JD OverDrive Attack Props", value=mpB)
            
            embed3 = discord.Embed()
            embed3.title = "J.D Cont."
            embed3.add_field(name="Additional Info", value=mpC)
			
            embed4 = discord.Embed()
            embed4.title = "J.D Cont."
            embed4.set_image(url='http://www.dustloop.com/wiki/images/7/7e/BBCS_Tsubaki_jD.png')
            embed4.add_field(name="Additional Info", value=mpD)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ts.command(name="ft", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _ft_ts(self):   
        """Forward Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/aa/BBCS_Tsubaki_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="bt", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _bt_ts(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/89/BBCS_Tsubaki_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="at", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _at_ts(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3d/BBCS_Tsubaki_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="ca", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _ca_ts(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b6/BBCS_Tsubaki_Decus.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ts.command(name="ct", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _ct_ts(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b6/BBCF_Tsubaki_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ts.command(name="236a", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s1_ts(self):   
        """CHARGING STAR!(A)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[5] + "\n" + "```"
			
            embed = discord.Embed()
            embed.title = "Sanctus Aequum(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8e/BBCS_Tsubaki_Aequum.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ts.command(name="236b", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s2_ts(self):   
        """CHARGING STAR!(B)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[5] + "\n" + "```"
			
            embed = discord.Embed()
            embed.title = "Sanctus Aequum(B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8e/BBCS_Tsubaki_Aequum.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ts.command(name="236c", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s3_ts(self):   
        """CHARGING STAR!(C)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[3] + "\n" + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[5] + "\n" + "```"
			
            embed = discord.Embed()
            embed.title = "Sanctus Aequum(C)"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Sanctus Aequum(C) Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/8e/BBCS_Tsubaki_Aequum.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ts.command(name="236d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s4_ts(self):   
        """CHARGING STAR!(D)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "```"
            mpB = "```" + "*" + mp2[4] + "```"
            mpC = "```" + "*" + mp2[0] + "\n" + "*" + mp2[5] + "\n" + "```"
			
            embed = discord.Embed()
            embed.title = "Sanctus Aequum(D)"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Sanctus Aequum(D) Cont."
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Sanctus Aequum(D) Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/8/8e/BBCS_Tsubaki_Aequum.png')
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					

    @ts.command(name="214b", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s5_ts(self):   
        """Crotch Dagger(B)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "```"
            mpB = "```" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Sanctus Veritas(B)"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Sanctus Veritas(B) Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/2/21/BBCS_Tsubaki_Veritas.png')
            embed1.add_field(name="Additional Info:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="214d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s6_ts(self):   
        """Crotch Dagger(D)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "```"
            mpB = "```" + "*" + mp2[3] + "```"
            mpC = "```" + "*" + mp2[4] + "```"
			
            embed = discord.Embed()
            embed.title = "Sanctus Veritas(D)"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Sanctus Veritas(D) Cont."
            embed1.add_field(name="Additional Info:", value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Sanctus Veritas(D) Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/2/21/BBCS_Tsubaki_Veritas.png')
            embed2.add_field(name="Additional Info:", value=mpC, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ts.command(name="22b", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s7_ts(self):   
        """The hammer of justice."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()		
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "```"
            mpB = "```" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            mpC = "```" + "*" + mp2[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Agnus Dei(B)"
            embed.add_field(name="Frame Data", value=tab)	
            embed.add_field(name="Attack Props:", value=mpA)	

            embed1 = discord.Embed()
            embed1.title = "Agnus Dei(B) Cont."
            embed1.add_field(name="Attack Props:", value=mpB)	

            embed2 = discord.Embed()
            embed2.title = "Agnus Dei(B) Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/6/61/BBCP_Tsubaki_Hammer.png')
            embed2.add_field(name="Attack Props:", value=mpC)			
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ts.command(name="22d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s8_ts(self):   
        """The hammer of justice."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()	
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "```"
            mpB = "```" + "*" + mp2[1] + "```"
            mpC = "```" + "*" + mp2[4] + "```"
            mpD = "```" + "*" + mp2[5] + "```"
			
            embed = discord.Embed()
            embed.title = "Agnus Dei(D)"
            embed.add_field(name="Frame Data", value=tab)	
            embed.add_field(name="Attack Props:", value=mpA)	

            embed1 = discord.Embed()
            embed1.title = "Agnus Dei(D) Cont."
            embed1.add_field(name="Attack Props:", value=mpB)	

            embed2 = discord.Embed()
            embed2.title = "Agnus Dei(D) Cont."
            embed2.add_field(name="Attack Props:", value=mpC)	

            embed3 = discord.Embed()
            embed3.title = "Agnus Dei(D) Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/6/61/BBCP_Tsubaki_Hammer.png')
            embed3.add_field(name="Attack Props:", value=mpD)				
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)	
            await self.bot.say(embed=embed3)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					

    @ts.command(name="623c", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s9_ts(self):   
        """Reversal(C)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')] 
            mp1 = [op.get_text() for op in info.find_all('li')]       

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
            mpB = "```" + "*" + mp2[1] + "```"
            mpC = "```" + "*" + mp2[0] + "```"
            mpE = "```" + "*The reason why this is such a powerful combo route is the fact that it allows you to start up a juggle without requiring a crouching confirm or an anti-air hit. This allows Tsubaki to get in a larger number of her more damaging normals and carry to the corner more effectively. Some of her chargeless and meterless combos off of normals like 5B can break 3000 damage midscreen thanks to this route, so this special is of the utmost importance." "```"
            mpD = "```" + "*In this iteration of the game in particular, the combo route stemming from this special is emphasized since it can be consistently followed up thanks to it launching both Tsubaki and the opponent fairly low off the ground. By getting rid of the landing recovery of the DP through either immediately cancelling into a whiffed j.214A/B or late cancelling into a whiffed j.236A as Tsubaki is about to touch the ground 5A, 5B, or 5C can be used as a followup to catch the falling opponent. The most popular route is the delayed j.236A route as it is the least execution heavy, the most consistent, and allows the strongest followup, 5C to be used properly." + "```"
			
            embed = discord.Embed()
            embed.title = "Benedictus Rex(C)"
            embed.add_field(name="No Charge Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Benedictus Rex(C) Cont."
            embed1.add_field(name="Additional Info", value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Benedictus Rex(C) Cont."
            embed2.add_field(name="Additional Info Pt. 2", value=mpC, inline='true')
			
            embed3 = discord.Embed()
            embed3.title = "Benedictus Rex(C) Cont."
            embed3.add_field(name="Additional Info Pt. 3", value=mpD, inline='true')
			
            embed4 = discord.Embed()
            embed4.title = "Benedictus Rex(C) Cont."
            embed4.set_image(url='http://www.dustloop.com/wiki/images/9/99/BBCS_Tsubaki_BenedictusRex.png')
            embed4.add_field(name="Additional Info Pt. 4", value=mpE, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="623d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s10_ts(self):   
        """Reversal(D)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')] 
            mp1 = [op.get_text() for op in info.find_all('li')]       

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2[2] + "```"
            mpC = "```" + "*" + mp2[0] + "```"
            mpE = "```" + "*The reason why this is such a powerful combo route is the fact that it allows you to start up a juggle without requiring a crouching confirm or an anti-air hit. This allows Tsubaki to get in a larger number of her more damaging normals and carry to the corner more effectively. Some of her chargeless and meterless combos off of normals like 5B can break 3000 damage midscreen thanks to this route, so this special is of the utmost importance." "```"
            mpD = "```" + "*In this iteration of the game in particular, the combo route stemming from this special is emphasized since it can be consistently followed up thanks to it launching both Tsubaki and the opponent fairly low off the ground. By getting rid of the landing recovery of the DP through either immediately cancelling into a whiffed j.214A/B or late cancelling into a whiffed j.236A as Tsubaki is about to touch the ground 5A, 5B, or 5C can be used as a followup to catch the falling opponent. The most popular route is the delayed j.236A route as it is the least execution heavy, the most consistent, and allows the strongest followup, 5C to be used properly." + "```"
			
            embed = discord.Embed()
            embed.title = "Benedictus Rex(D)"
            embed.add_field(name="No Charge Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Benedictus Rex(D) Cont."
            embed1.add_field(name="Additional Info", value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Benedictus Rex(D) Cont."
            embed2.add_field(name="Additional Info Pt. 2", value=mpC, inline='true')
			
            embed3 = discord.Embed()
            embed3.title = "Benedictus Rex(D) Cont."
            embed3.add_field(name="Additional Info Pt. 3", value=mpD, inline='true')
			
            embed4 = discord.Embed()
            embed4.title = "Benedictus Rex(D) Cont."
            embed4.set_image(url='http://www.dustloop.com/wiki/images/9/99/BBCS_Tsubaki_BenedictusRex.png')
            embed4.add_field(name="Additional Info Pt. 4", value=mpE, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="j236a", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s11_ts(self):
        """Angel Paratrooper"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    
            mp2 = [op1.get_text() for op1 in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()					

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp2[1] + "```"	
            mpD = "```" + "*" + mp2[2] + "```"				
			
            embed = discord.Embed()
            embed.title = "Aequum Elesion(A)"
            embed.add_field(name="A Frame Data", value=tab)
            embed.add_field(name="Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Aequum Elesion(A) Cont."
            embed1.add_field(name="Additional Info", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "Aequum Elesion(A) Cont."
            embed2.add_field(name="Additional Info", value=mpC)
            
            embed3 = discord.Embed()
            embed3.title = "Aequum Elesion(A) Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/a/a0/BBCF_Tsubaki_AequumElesion.png')
            embed3.add_field(name="Additional Info", value=mpD)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="j236d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s12_ts(self):
        """Angel Paratrooper"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            my_table1 = table[73]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[4]
            headers2 = table_body1.find_all('tr')[1]
            info =  table_body.find_all('tr')[5]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    
            mp2 = [op1.get_text() for op1 in info.find_all('p')]
            mp3 = [op2.get_text() for op2 in info1.find_all('li')] 
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp2[3] + "\n" + "*" + mp2[4] + "```"
            mpD = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"			
			
            embed = discord.Embed()
            embed.title = "Aequum Elesion(D)"
            embed.add_field(name="D Frame Data", value=tab)
            embed.add_field(name="Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Aequum Elesion(D) Cont."
            embed1.add_field(name="Additional Info", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "Aequum Elesion(D) Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/6/69/BBCS_Tsubaki_AequumElesionD.png')
            embed2.add_field(name="Additional Info", value=mpC)
			
            embed3 = discord.Embed(description='j.236D > j.214D')
            embed3.title = "Aequum Elesion (Aura)"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/7/7e/BBCP_Tsubaki_AequumElesionD2.png')
            embed3.add_field(name="Frame Data", value=tab2)
            embed3.add_field(name="Attack Props:", value=mpD)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="j214a", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s13_ts(self):
        """HOLY DIVER(A)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[9]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    
            mp2 = [op1.get_text() for op1 in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp2[1] + "```"
            mpD = "```" + "*" + mp2[2] + "```"			
			
            embed = discord.Embed()
            embed.title = "Lux Aeterna(A)"
            embed.add_field(name="A Frame Data", value=tab)
            embed.add_field(name="Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Lux Aeterna(A) Cont."
            embed1.add_field(name="Additional Info", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "Lux Aeterna(A) Cont."
            embed2.add_field(name="Additional Info", value=mpC)
			
            embed3 = discord.Embed()
            embed3.title = "Lux Aeterna(A) Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/e/e7/BBCS_Tsubaki_LuxAeterna.png')
            embed3.add_field(name="Additional Info", value=mpD)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="j214b", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s14_ts(self):
        """HOLY DIVER(B)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[9]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    
            mp2 = [op1.get_text() for op1 in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp2[1] + "```"
            mpD = "```" + "*" + mp2[2] + "```"
						
            embed = discord.Embed()
            embed.title = "Lux Aeterna(B)"
            embed.add_field(name="B Frame Data", value=tab)
            embed.add_field(name="Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Lux Aeterna(B) Cont."
            embed1.add_field(name="Additional Info", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "Lux Aeterna(B) Cont."
            embed2.add_field(name="Additional Info", value=mpC)
			
            embed3 = discord.Embed()
            embed3.title = "Lux Aeterna(B) Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/e/e7/BBCS_Tsubaki_LuxAeterna.png')
            embed3.add_field(name="Additional Info", value=mpD)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="j214c", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s15_ts(self):
        """HOLY DIVER(C)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[5]
            headers1 = table_body.find_all('tr')[6]
            info =  table_body.find_all('tr')[9]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    
            mp2 = [op1.get_text() for op1 in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp2[1] + "```"
            mpD = "```" + "*" + mp2[2] + "```"			
			
            embed = discord.Embed()
            embed.title = "Lux Aeterna(C)"
            embed.add_field(name="C Frame Data", value=tab)
            embed.add_field(name="Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Lux Aeterna(C) Cont."
            embed1.add_field(name="Additional Info", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "Lux Aeterna(C) Cont."
            embed2.add_field(name="Additional Info", value=mpC)
			
            embed3 = discord.Embed()
            embed3.title = "Lux Aeterna(C) Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/e/e7/BBCS_Tsubaki_LuxAeterna.png')
            embed3.add_field(name="Additional Info", value=mpD)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="j214d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s16_ts(self):
        """HOLY DIVER(D)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[7]
            headers1 = table_body.find_all('tr')[8]
            info =  table_body.find_all('tr')[9]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]    
            mp2 = [op1.get_text() for op1 in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp2[3] + "```"
            mpD = "```" + "*" + mp2[4] + "```"			
			
            embed = discord.Embed()
            embed.title = "Lux Aeterna(D)"
            embed.add_field(name="D Frame Data", value=tab)
            embed.add_field(name="Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Lux Aeterna(D) Cont."
            embed1.add_field(name="Additional Info", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "Lux Aeterna(D) Cont."
            embed2.add_field(name="Additional Info", value=mpC)
			
            embed3 = discord.Embed()
            embed3.title = "Lux Aeterna(D) Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/e/e7/BBCS_Tsubaki_LuxAeterna.png')
            embed3.add_field(name="Additional Info", value=mpD)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="421a", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s17_ts(self):
        """There should be a ball of sparkles between the two moves"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = [op1.get_text() for op1 in info.find_all('p')]
            vrs = headers.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
            mpB = "```" + "*" + mp1[1] + "```"			
			
            embed = discord.Embed()
            embed.title = "Lux Macto(A)"
            embed.add_field(name="A Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Lux Macto(A) Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/67/BBCP_Tsubaki_Shingi.png')
            embed1.add_field(name="Additional Info", value=mpB)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="421d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s18_ts(self):
        """There should be a ball of sparkles between the two moves and she goes through the ball"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            my_table1 = table[77]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            mp1 = [op1.get_text() for op1 in info.find_all('p')]
            mp2 = [op2.get_text() for op2 in info1.find_all('li')]
            mp3 = info1.find('p').get_text()
            mp4 = info.find('li').get_text()
            vrs = headers.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp4 + "\n" + "*" + mp1[0] + "```"
            mpB = "```" + "*The D version sends out a larger white orb that starts out accelerating very slowly before rocketing off the screen similar to Carl's Volante. The projectile's size compared to the A version's along with its variable acceleration attribute make it even better at doing nearly everything the A version's can do. The projectile being slow at the beginning protects the space directly in front of you when it is called out and can be used as a shield. The fact that the projectile stays in the same place for a while after startup makes it better than the A version's for oki as well." + "```"	
            mpC = "```" + "*Avoiding the projectile in neutral is much more difficult and risky due to its size and late lightning-speed acceleration for characters that don't have very good movement options. All of this utility actually makes the D version a very acceptable use of charge outside of combos and pressure. The only thing that this projectile doesn't have over the A version's is its ability to be used alone in pressure is lacking and a waste of charge. If 236D is used directly after this special, it will active the aura and change the properties of the move just like the air aura and allow for a stronger followup than off of 236D by itself." + "```"
            mpD = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "\n" + "*" + mp2[4] + "```"	
            mpE = "```" + "*" + mp3 + "```"			
			
            embed = discord.Embed()
            embed.title = "Lux Macto(D)"
            embed.add_field(name="A Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Lux Macto(D) Cont."
            embed1.add_field(name="Additional Info", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "Lux Macto(D) Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/6/67/BBCP_Tsubaki_Shingi.png')
            embed2.add_field(name="Additional Info", value=mpC)
			
            embed3 = discord.Embed(description='421D > 236D (Aura)')
            embed3.title = "Lux Macto (Aura)"
            embed3.add_field(name="Frame Data", value=tab1)
            embed3.add_field(name="Attack Props:", value=mpD, inline='true')
			
            embed4 = discord.Embed()
            embed4.title = "Lux Macto Cont."
            embed4.set_image(url='http://www.dustloop.com/wiki/images/7/7f/BBCP_Tsubaki_ShingiAura.png')
            embed4.add_field(name="Additional Info", value=mpE)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="63214c", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _s19_ts(self):
        """Command Grab"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')] 
            mp1 = [op1.get_text() for op1 in info.find_all('p')]		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
            mpB = "```" + "*" + mp1[1] + "```"			
			
            embed = discord.Embed()
            embed.title = "Sanctus Aerolata"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Sanctus Aerolata Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f6/BBCF_Tsubaki_Shinsa.png')
            embed1.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="236236c", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _dd1_ts(self):
        #""""""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op1.get_text() for op1 in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Confutatis Maledictis"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d0/BBCS_Tsubaki_ConfutatisMaledictis.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="236236d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _dd2_ts(self):
        #"""WOLF-yuken"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[4]
            headers1 = table_body.find_all('tr')[6]
            headers2 = table_body.find_all('tr')[8]
            headers3 = table_body.find_all('tr')[10]
            headers4 = table_body.find_all('tr')[12]
            headers5 = table_body.find_all('tr')[14]
            info =  table_body.find_all('tr')[15]
            headers6 = table_body.find_all('tr')[17]
            headers7 = table_body.find_all('tr')[19]
            headers8 = table_body.find_all('tr')[21]
            headers9 = table_body.find_all('tr')[23]
            headers10 = table_body.find_all('tr')[25]
            headers11 = table_body.find_all('tr')[27]
            info1 =  table_body.find_all('tr')[28] #You are working on the OD Charges this time :D
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]
            Data7 = [head7.get_text() for head7 in headers7.find_all('td')]
            Data8 = [head8.get_text() for head8 in headers8.find_all('td')]
            Data9 = [head9.get_text() for head9 in headers9.find_all('td')]
            Data10 = [head10.get_text() for head10 in headers10.find_all('td')]
            Data11 = [head11.get_text() for head11 in headers11.find_all('td')]			
            mp1 = [op1.get_text() for op1 in info.find_all('li')]
            mp2 = [op2.get_text() for op2 in info1.find_all('li')]
            mp3 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()
            vrs6 = headers6.find('th').get_text()
            vrs7 = headers7.find('th').get_text()
            vrs8 = headers8.find('th').get_text()
            vrs9 = headers9.find('th').get_text()
            vrs10 = headers10.find('th').get_text()
            vrs11 = headers11.find('th').get_text()


            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')
            tab6 = tabulate([["Version", vrs6], ["Damage", Data6[0]], ["Guard", Data6[1]], ["Startup", Data6[2]], ["Active", Data6[3]], ["Recovery", Data6[4]], ["Frame Adv.", Data6[5]], ["Attribute", Data6[6]]], tablefmt='simple', stralign='left')
            tab7 = tabulate([["Version", vrs7], ["Damage", Data7[0]], ["Guard", Data7[1]], ["Startup", Data7[2]], ["Active", Data7[3]], ["Recovery", Data7[4]], ["Frame Adv.", Data7[5]], ["Attribute", Data7[6]]], tablefmt='simple', stralign='left')
            tab8 = tabulate([["Version", vrs8], ["Damage", Data8[0]], ["Guard", Data8[1]], ["Startup", Data8[2]], ["Active", Data8[3]], ["Recovery", Data8[4]], ["Frame Adv.", Data8[5]], ["Attribute", Data8[6]]], tablefmt='simple', stralign='left')
            tab9 = tabulate([["Version", vrs9], ["Damage", Data9[0]], ["Guard", Data9[1]], ["Startup", Data9[2]], ["Active", Data9[3]], ["Recovery", Data9[4]], ["Frame Adv.", Data9[5]], ["Attribute", Data9[6]]], tablefmt='simple', stralign='left')
            tab10 = tabulate([["Version", vrs10], ["Damage", Data10[0]], ["Guard", Data10[1]], ["Startup", Data10[2]], ["Active", Data10[3]], ["Recovery", Data10[4]], ["Frame Adv.", Data10[5]], ["Attribute", Data10[6]]], tablefmt='simple', stralign='left')
            tab11 = tabulate([["Version", vrs11], ["Damage", Data11[0]], ["Guard", Data11[1]], ["Startup", Data11[2]], ["Active", Data11[3]], ["Recovery", Data11[4]], ["Frame Adv.", Data11[5]], ["Attribute", Data11[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "\n" + "*" + mp2[4] + "```"
            mpC = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Confutatis Maledictis"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="1 Charge Frame Data", value=tab1)
            embed.add_field(name="2 Charge Frame Data", value=tab2)
            embed.add_field(name="3 Charge Frame Data", value=tab3)
            embed.add_field(name="4 Charge Frame Data", value=tab4)
            embed.add_field(name="5 Charge Frame Data", value=tab5)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Confutatis Maledictis(OD)"
            embed1.add_field(name="Frame Data", value=tab6)
            embed1.add_field(name="1 Charge Frame Data", value=tab7)
            embed1.add_field(name="2 Charge Frame Data", value=tab8)
            embed1.add_field(name="3 Charge Frame Data", value=tab9)
            embed1.add_field(name="4 Charge Frame Data", value=tab10)
            embed1.add_field(name="5 Charge Frame Data", value=tab11)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Confutatis Maledictis/Confutatis Maledictis(OD) Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/d0/BBCS_Tsubaki_ConfutatisMaledictis.png')
            embed2.add_field(name="Additional Information", value=mpC)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
		

    @ts.command(name="214214d", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _dd3_ts(self):   
        """(Air OK)Hallelujah"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[4]
            headers1 = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "```"
			
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Macto Maledictis"
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed()
            embed1.title = "Macto Maledictis Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/47/BBCS_Tsubaki_MactoMaledictis.png')
            embed1.add_field(name="Attack Props Cont.", value=mpB)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ts.command(name="632146b", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _dd4_ts(self):   
        """BANANA KITAA"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[85]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            mp3 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Requiem Maledictus"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCP_Tsubaki_Shinpatsu.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @ts.command(name="abcd", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _abcd_ts(self): 
        """Exceed Accel: Ryuu ga waga teki wo kurau!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[87]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Macto Lux Kyrie"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2e/BBCF_Tsubaki_ExceedAccel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ts.command(name="632146c", pass_context=False)  # Tsubaki Yayoi from blazblue
    async def _astral_ts(self):   
        """Nibelung Valesti! Oh wait wrong game..."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Tsubaki_Yayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[89]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = [op.get_text() for op in info.find_all('p')]
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Requiem Aeternam"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c1/BBCS_Tsubaki_RequiemAeternam.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
###################################################################################################################################################################################################
#This is the Template for Taokaka as the wiki page has not been updated for sometime.
    @tk.command(name="5a", pass_context=False)  # Taokaka from blazblue
    async def _5a_tk(self):
        """Kitty paw."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1 + "```"           
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f1/BBCS_Taokaka_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
		
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @tk.command(name="5b", pass_context=False)  # Taokaka from blazblue
    async def _5b_tk(self):   
        """Protect your family jewels."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = info.find('p').get_text()
            #mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            #mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/eb/BBCS_Taokaka_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)		
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @tk.command(name="5c", pass_context=False)  # Taokaka from blazblue
    async def _5c_tk(self): 
        """Not a poke!."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = info.find('p').get_text()
            #mp3 = [po.get_text() for po in info1.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            #mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/32/BBCS_Taokaka_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @tk.command(name="2a", pass_context=False)  # Taokaka from blazblue
    async def _2a_tk(self):   
        """OMG Why is Tao's 2A so broken."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            #info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [po.get_text() for po in info1.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d1/BBCS_Taokaka_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @tk.command(name="2b", pass_context=False)  # Taokaka from blazblue
    async def _2b_tk(self): 
        """Important space controlling tool that is heavily underestimated."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp3 = info1.find('p').get_text()
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            #mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "2b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/35/BBCS_Taokaka_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @tk.command(name="2c", pass_context=False)  # Taokaka from blazblue
    async def _2c_tk(self):   
        """Outside of combos this makes for a decent go to normal for a frame trap"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp3 = info1.find('p').get_text()
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            #mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e0/BBCS_Taokaka_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @tk.command(name="6a", pass_context=False)  # Taokaka from blazblue
    async def _6a_tk(self):  
        """Anti air. Second hit is jump cancable, making this a good ground to air combo starter."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/db/BBCS_Taokaka_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @tk.command(name="6b", pass_context=False)  # Taokaka from blazblue
    async def _6b_tk(self):  
        """Slow overhead, safe on block"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp3 = [po1.get_text() for po1 in info1.find_all('p')]
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            #mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1b/BBCS_Taokaka_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @tk.command(name="6c", pass_context=False)  # Taokaka from blazblue
    async def _6c_tk(self):  
        """Tao's best standing poke now due to the increase in speed."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            #mp1 = info.find('li').get_text()
            #mp3 = [po1.get_text() for po1 in info1.find_all('p')]
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            #mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/76/BBCS_Taokaka_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @tk.command(name="3c", pass_context=False)  # Taokaka from blazblue
    async def _3c_tk(self):   
        """Pointless outside combos."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            #mp4 = [po1.get_text() for po1 in info1.find_all('p')]
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            #mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "```"
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3e/BBCS_Taokaka_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @tk.command(name="ja", pass_context=False)  # Taokaka from blazblue
    async def _ja_tk(self): 
        """Standard j.a nothing special."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/84/BBCS_Taokaka_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @tk.command(name="jb", pass_context=False)  # Taokaka from blazblue
    async def _jb_tk(self):   
        """Standing hit confirm into stuff."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = [po.get_text() for po in info.find_all('p')]
            #mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            #mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/58/BBCF_Taokaka_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @tk.command(name="j2b", pass_context=False)  # Taokaka from blazblue
    async def _j2b_tk(self):   
        """Has good active frames so makes for a good answer to character's that rely on anti air 2A."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = [po.get_text() for po in info.find_all('p')]
            #mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            #mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1d/BBCS_Taokaka_j2B.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @tk.command(name="jc", pass_context=False)  # Taokaka from blazblue
    async def _jc_tk(self): 
        """Her most rewarding air poke if hit confirmed properly."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = info.find('p').get_text()
            #mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            #mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/79/BBCF_Taokaka_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @tk.command(name="3", pass_context=False)  # Taokaka from blazblue
    async def _3_tk(self): 
        """Crawl: Low profile's everything (almost)."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = info.find('p').get_text()
            #mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            #mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Crawl"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/24/BBCS_Taokaka_Crawl.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @tk.command(name="taunt", pass_context=False)  # Taokaka from blazblue
    async def _taunt_tk(self): 
        """Taunt RC mix up is OP."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = info.find('p').get_text()
            #mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            #mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Taunt"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCS_Taokaka_Taunt.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @tk.command(name="5d", pass_context=False)  # Taokaka from blazblue
    async def _5d_tk(self):   
        """Torpedo."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            my_table1 = table[47]
            my_table2 = table[49]
            my_table3 = table[51]
            my_table4 = table[53]
            my_table5 = table[55]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            table_body3 = my_table3.find("table")
            table_body4 = my_table4.find("table")
            table_body5 = my_table5.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
            headers2 = table_body2.find_all('tr')[1]
            info2 = table_body2.find_all('tr')[2]
            headers3 = table_body3.find_all('tr')[1]
            info3 = table_body3.find_all('tr')[2]
            headers4 = table_body4.find_all('tr')[1]
            info4 = table_body4.find_all('tr')[2]
            headers5 = table_body5.find_all('tr')[1]
            info5 = table_body5.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            #mp1 = info.find_all('li')[0].get_text() #Note will need to line these up if any information goes into any of these tables.
            #mp2 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left') 
            tab3 = tabulate([["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')  
            tab4 = tabulate([["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')  
            tab5 = tabulate([["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')  				
   	        #mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
   	        #mpA = "```" + "*Charge rate (normal): 4~7F = 250 points per frame; 8-21F~ = 200 points per frame; 22F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~7F = 625 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 4~7F = 1250 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
   	        #mpB = "```" + "*Charge rate (normal): 4~5F = 500 points per frame; 6~20F = 250 points per frame; 21F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~5F = 1250 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 5~6F = 2500 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2c/BBCS_Taokaka_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Deatils", value=mp)
			
            embed1 = discord.Embed(description='Combo stuff.')
            embed1.title = "Forward Cancel"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCS_Taokaka_6Cancel.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Deatils", value=mp)
            
            embed2 = discord.Embed(description='Combo stuff Backwards')
            embed2.title = "Backward Cancel"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/dc/BBCS_Taokaka_4Cancel.png')
            embed2.add_field(name="Frame Data", value=tab2)
            #embed2.add_field(name="Deatils", value=mp)
			
            embed3 = discord.Embed(description='Frame traps on hit and safe on block.')
            embed3.title = "A Cancel"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCS_Taokaka_ACancel.png')
            embed3.add_field(name="Frame Data", value=tab3)
            #embed3.add_field(name="Deatils", value=mp)
			
            embed4 = discord.Embed(description='J.D BFF.')
            embed4.title = "B Cancel"
            embed4.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCS_Taokaka_BCancel.png')
            embed4.add_field(name="Frame Data", value=tab4)
            #embed4.add_field(name="Deatils", value=mp)
			
            embed5 = discord.Embed(description='+3 leaves you air borne.')
            embed5.title = "C Cancel"
            embed5.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Taokaka_CCancel.png')
            embed5.add_field(name="Frame Data", value=tab5)
            #embed5.add_field(name="Deatils", value=mp)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
            await self.bot.say(embed=embed5)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @tk.command(name="2d", pass_context=False)  # Taokaka from blazblue
    async def _2d_tk(self):  
        """Works as an anti air sometimes."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            my_table1 = table[47]
            my_table2 = table[49]
            my_table3 = table[51]
            my_table4 = table[53]
            my_table5 = table[55]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            table_body3 = my_table3.find("table")
            table_body4 = my_table4.find("table")
            table_body5 = my_table5.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
            headers2 = table_body2.find_all('tr')[1]
            info2 = table_body2.find_all('tr')[2]
            headers3 = table_body3.find_all('tr')[1]
            info3 = table_body3.find_all('tr')[2]
            headers4 = table_body4.find_all('tr')[1]
            info4 = table_body4.find_all('tr')[2]
            headers5 = table_body5.find_all('tr')[1]
            info5 = table_body5.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            #mp1 = info.find_all('li')[0].get_text() #Note will need to line these up if any information goes into any of these tables.
            #mp2 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left') 
            tab3 = tabulate([["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')  
            tab4 = tabulate([["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')  
            tab5 = tabulate([["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')  				
   	        #mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
   	        #mpA = "```" + "*Charge rate (normal): 4~7F = 250 points per frame; 8-21F~ = 200 points per frame; 22F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~7F = 625 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 4~7F = 1250 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
   	        #mpB = "```" + "*Charge rate (normal): 4~5F = 500 points per frame; 6~20F = 250 points per frame; 21F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~5F = 1250 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 5~6F = 2500 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6a/BBCS_Taokaka_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Deatils", value=mp)
			
            embed1 = discord.Embed(description='Combo stuff.')
            embed1.title = "Forward Cancel"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCS_Taokaka_6Cancel.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Deatils", value=mp)
            
            embed2 = discord.Embed(description='Combo stuff Backwards')
            embed2.title = "Backward Cancel"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/dc/BBCS_Taokaka_4Cancel.png')
            embed2.add_field(name="Frame Data", value=tab2)
            #embed2.add_field(name="Deatils", value=mp)
			
            embed3 = discord.Embed(description='Frame traps on hit and safe on block.')
            embed3.title = "A Cancel"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCS_Taokaka_ACancel.png')
            embed3.add_field(name="Frame Data", value=tab3)
            #embed3.add_field(name="Deatils", value=mp)
			
            embed4 = discord.Embed(description='J.D BFF.')
            embed4.title = "B Cancel"
            embed4.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCS_Taokaka_BCancel.png')
            embed4.add_field(name="Frame Data", value=tab4)
            #embed4.add_field(name="Deatils", value=mp)
			
            embed5 = discord.Embed(description='+3 leaves you air borne.')
            embed5.title = "C Cancel"
            embed5.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Taokaka_CCancel.png')
            embed5.add_field(name="Frame Data", value=tab5)
            #embed5.add_field(name="Deatils", value=mp)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
            await self.bot.say(embed=embed5)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @tk.command(name="4d", pass_context=False)  # Taokaka from blazblue
    async def _4d_tk(self):  
        """In combos now."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            my_table1 = table[47]
            my_table2 = table[49]
            my_table3 = table[51]
            my_table4 = table[53]
            my_table5 = table[55]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            table_body3 = my_table3.find("table")
            table_body4 = my_table4.find("table")
            table_body5 = my_table5.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
            headers2 = table_body2.find_all('tr')[1]
            info2 = table_body2.find_all('tr')[2]
            headers3 = table_body3.find_all('tr')[1]
            info3 = table_body3.find_all('tr')[2]
            headers4 = table_body4.find_all('tr')[1]
            info4 = table_body4.find_all('tr')[2]
            headers5 = table_body5.find_all('tr')[1]
            info5 = table_body5.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            #mp1 = info.find_all('li')[0].get_text() #Note will need to line these up if any information goes into any of these tables.
            #mp2 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left') 
            tab3 = tabulate([["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')  
            tab4 = tabulate([["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')  
            tab5 = tabulate([["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')  				
   	        #mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
   	        #mpA = "```" + "*Charge rate (normal): 4~7F = 250 points per frame; 8-21F~ = 200 points per frame; 22F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~7F = 625 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 4~7F = 1250 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
   	        #mpB = "```" + "*Charge rate (normal): 4~5F = 500 points per frame; 6~20F = 250 points per frame; 21F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~5F = 1250 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 5~6F = 2500 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
			
            embed = discord.Embed()
            embed.title = "4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e3/BBCF_Taokaka_4D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Deatils", value=mp)
			
            embed1 = discord.Embed(description='Combo stuff.')
            embed1.title = "Forward Cancel"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCS_Taokaka_6Cancel.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Deatils", value=mp)
            
            embed2 = discord.Embed(description='Combo stuff Backwards')
            embed2.title = "Backward Cancel"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/dc/BBCS_Taokaka_4Cancel.png')
            embed2.add_field(name="Frame Data", value=tab2)
            #embed2.add_field(name="Deatils", value=mp)
			
            embed3 = discord.Embed(description='Frame traps on hit and safe on block.')
            embed3.title = "A Cancel"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCS_Taokaka_ACancel.png')
            embed3.add_field(name="Frame Data", value=tab3)
            #embed3.add_field(name="Deatils", value=mp)
			
            embed4 = discord.Embed(description='J.D BFF.')
            embed4.title = "B Cancel"
            embed4.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCS_Taokaka_BCancel.png')
            embed4.add_field(name="Frame Data", value=tab4)
            #embed4.add_field(name="Deatils", value=mp)
			
            embed5 = discord.Embed(description='+3 leaves you air borne.')
            embed5.title = "C Cancel"
            embed5.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Taokaka_CCancel.png')
            embed5.add_field(name="Frame Data", value=tab5)
            #embed5.add_field(name="Deatils", value=mp)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
            await self.bot.say(embed=embed5)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @tk.command(name="jd", pass_context=False)  # Taokaka from blazblue
    async def _jd_tk(self):  
        """Amazing air poke only 2nd to j.C ."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            my_table1 = table[47]
            my_table2 = table[49]
            my_table3 = table[51]
            my_table4 = table[53]
            my_table5 = table[55]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            table_body3 = my_table3.find("table")
            table_body4 = my_table4.find("table")
            table_body5 = my_table5.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
            headers2 = table_body2.find_all('tr')[1]
            info2 = table_body2.find_all('tr')[2]
            headers3 = table_body3.find_all('tr')[1]
            info3 = table_body3.find_all('tr')[2]
            headers4 = table_body4.find_all('tr')[1]
            info4 = table_body4.find_all('tr')[2]
            headers5 = table_body5.find_all('tr')[1]
            info5 = table_body5.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            #mp1 = info.find_all('li')[0].get_text() #Note will need to line these up if any information goes into any of these tables.
            #mp2 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left') 
            tab3 = tabulate([["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')  
            tab4 = tabulate([["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')  
            tab5 = tabulate([["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')  				
   	        #mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
   	        #mpA = "```" + "*Charge rate (normal): 4~7F = 250 points per frame; 8-21F~ = 200 points per frame; 22F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~7F = 625 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 4~7F = 1250 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
   	        #mpB = "```" + "*Charge rate (normal): 4~5F = 500 points per frame; 6~20F = 250 points per frame; 21F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~5F = 1250 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 5~6F = 2500 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/aa/BBCS_Taokaka_jD.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Deatils", value=mp)
			
            embed1 = discord.Embed(description='Combo stuff.')
            embed1.title = "Forward Cancel"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCS_Taokaka_6Cancel.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Deatils", value=mp)
            
            embed2 = discord.Embed(description='Combo stuff Backwards')
            embed2.title = "Backward Cancel"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/dc/BBCS_Taokaka_4Cancel.png')
            embed2.add_field(name="Frame Data", value=tab2)
            #embed2.add_field(name="Deatils", value=mp)
			
            embed3 = discord.Embed(description='Frame traps on hit and safe on block.')
            embed3.title = "A Cancel"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCS_Taokaka_ACancel.png')
            embed3.add_field(name="Frame Data", value=tab3)
            #embed3.add_field(name="Deatils", value=mp)
			
            embed4 = discord.Embed(description='J.D BFF.')
            embed4.title = "B Cancel"
            embed4.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCS_Taokaka_BCancel.png')
            embed4.add_field(name="Frame Data", value=tab4)
            #embed4.add_field(name="Deatils", value=mp)
			
            embed5 = discord.Embed(description='+3 leaves you air borne.')
            embed5.title = "C Cancel"
            embed5.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Taokaka_CCancel.png')
            embed5.add_field(name="Frame Data", value=tab5)
            #embed5.add_field(name="Deatils", value=mp)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
            await self.bot.say(embed=embed5)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @tk.command(name="j2d", pass_context=False)  # Taokaka from blazblue
    async def _j2d_tk(self):  
        """gimmicks."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            my_table1 = table[47]
            my_table2 = table[49]
            my_table3 = table[51]
            my_table4 = table[53]
            my_table5 = table[55]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            table_body3 = my_table3.find("table")
            table_body4 = my_table4.find("table")
            table_body5 = my_table5.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
            headers2 = table_body2.find_all('tr')[1]
            info2 = table_body2.find_all('tr')[2]
            headers3 = table_body3.find_all('tr')[1]
            info3 = table_body3.find_all('tr')[2]
            headers4 = table_body4.find_all('tr')[1]
            info4 = table_body4.find_all('tr')[2]
            headers5 = table_body5.find_all('tr')[1]
            info5 = table_body5.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            #mp1 = info.find_all('li')[0].get_text() #Note will need to line these up if any information goes into any of these tables.
            #mp2 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left') 
            tab3 = tabulate([["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')  
            tab4 = tabulate([["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')  
            tab5 = tabulate([["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')  				
   	        #mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
   	        #mpA = "```" + "*Charge rate (normal): 4~7F = 250 points per frame; 8-21F~ = 200 points per frame; 22F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~7F = 625 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 4~7F = 1250 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
   	        #mpB = "```" + "*Charge rate (normal): 4~5F = 500 points per frame; 6~20F = 250 points per frame; 21F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~5F = 1250 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 5~6F = 2500 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
			
            embed = discord.Embed()
            embed.title = "J.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/78/BBCS_Taokaka_j2D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Deatils", value=mp)
			
            embed1 = discord.Embed(description='Combo stuff.')
            embed1.title = "Forward Cancel"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCS_Taokaka_6Cancel.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Deatils", value=mp)
            
            embed2 = discord.Embed(description='Combo stuff Backwards')
            embed2.title = "Backward Cancel"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/dc/BBCS_Taokaka_4Cancel.png')
            embed2.add_field(name="Frame Data", value=tab2)
            #embed2.add_field(name="Deatils", value=mp)
			
            embed3 = discord.Embed(description='Frame traps on hit and safe on block.')
            embed3.title = "A Cancel"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCS_Taokaka_ACancel.png')
            embed3.add_field(name="Frame Data", value=tab3)
            #embed3.add_field(name="Deatils", value=mp)
			
            embed4 = discord.Embed(description='J.D BFF.')
            embed4.title = "B Cancel"
            embed4.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCS_Taokaka_BCancel.png')
            embed4.add_field(name="Frame Data", value=tab4)
            #embed4.add_field(name="Deatils", value=mp)
			
            embed5 = discord.Embed(description='+3 leaves you air borne.')
            embed5.title = "C Cancel"
            embed5.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Taokaka_CCancel.png')
            embed5.add_field(name="Frame Data", value=tab5)
            #embed5.add_field(name="Deatils", value=mp)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
            await self.bot.say(embed=embed5)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @tk.command(name="j4d", pass_context=False)  # Taokaka from blazblue
    async def _j4d_tk(self):  
        """Alters landing."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            my_table1 = table[47]
            my_table2 = table[49]
            my_table3 = table[51]
            my_table4 = table[53]
            my_table5 = table[55]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            table_body3 = my_table3.find("table")
            table_body4 = my_table4.find("table")
            table_body5 = my_table5.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
            headers2 = table_body2.find_all('tr')[1]
            info2 = table_body2.find_all('tr')[2]
            headers3 = table_body3.find_all('tr')[1]
            info3 = table_body3.find_all('tr')[2]
            headers4 = table_body4.find_all('tr')[1]
            info4 = table_body4.find_all('tr')[2]
            headers5 = table_body5.find_all('tr')[1]
            info5 = table_body5.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            #mp1 = info.find_all('li')[0].get_text() #Note will need to line these up if any information goes into any of these tables.
            #mp2 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left') 
            tab3 = tabulate([["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')  
            tab4 = tabulate([["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')  
            tab5 = tabulate([["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')  				
   	        #mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
   	        #mpA = "```" + "*Charge rate (normal): 4~7F = 250 points per frame; 8-21F~ = 200 points per frame; 22F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~7F = 625 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 4~7F = 1250 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
   	        #mpB = "```" + "*Charge rate (normal): 4~5F = 500 points per frame; 6~20F = 250 points per frame; 21F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~5F = 1250 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 5~6F = 2500 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
			
            embed = discord.Embed()
            embed.title = "J.4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e6/BBCS_Taokaka_j4D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Deatils", value=mp)
			
            embed1 = discord.Embed(description='Combo stuff.')
            embed1.title = "Forward Cancel"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCS_Taokaka_6Cancel.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Deatils", value=mp)
            
            embed2 = discord.Embed(description='Combo stuff Backwards')
            embed2.title = "Backward Cancel"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/dc/BBCS_Taokaka_4Cancel.png')
            embed2.add_field(name="Frame Data", value=tab2)
            #embed2.add_field(name="Deatils", value=mp)
			
            embed3 = discord.Embed(description='Frame traps on hit and safe on block.')
            embed3.title = "A Cancel"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCS_Taokaka_ACancel.png')
            embed3.add_field(name="Frame Data", value=tab3)
            #embed3.add_field(name="Deatils", value=mp)
			
            embed4 = discord.Embed(description='J.D BFF.')
            embed4.title = "B Cancel"
            embed4.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCS_Taokaka_BCancel.png')
            embed4.add_field(name="Frame Data", value=tab4)
            #embed4.add_field(name="Deatils", value=mp)
			
            embed5 = discord.Embed(description='+3 leaves you air borne.')
            embed5.title = "C Cancel"
            embed5.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Taokaka_CCancel.png')
            embed5.add_field(name="Frame Data", value=tab5)
            #embed5.add_field(name="Deatils", value=mp)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
            await self.bot.say(embed=embed5)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")						

    @tk.command(name="j8d", pass_context=False)  # Taokaka from blazblue
    async def _j8d_tk(self):  
        """No more loops!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            my_table1 = table[47]
            my_table2 = table[49]
            my_table3 = table[51]
            my_table4 = table[53]
            my_table5 = table[55]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            table_body3 = my_table3.find("table")
            table_body4 = my_table4.find("table")
            table_body5 = my_table5.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
            headers2 = table_body2.find_all('tr')[1]
            info2 = table_body2.find_all('tr')[2]
            headers3 = table_body3.find_all('tr')[1]
            info3 = table_body3.find_all('tr')[2]
            headers4 = table_body4.find_all('tr')[1]
            info4 = table_body4.find_all('tr')[2]
            headers5 = table_body5.find_all('tr')[1]
            info5 = table_body5.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')] 
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            #mp1 = info.find_all('li')[0].get_text() #Note will need to line these up if any information goes into any of these tables.
            #mp2 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')  
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left') 
            tab3 = tabulate([["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')  
            tab4 = tabulate([["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')  
            tab5 = tabulate([["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')  				
   	        #mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
   	        #mpA = "```" + "*Charge rate (normal): 4~7F = 250 points per frame; 8-21F~ = 200 points per frame; 22F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~7F = 625 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 4~7F = 1250 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
   	        #mpB = "```" + "*Charge rate (normal): 4~5F = 500 points per frame; 6~20F = 250 points per frame; 21F~ = depends on Tsubaki's height" + "\n" + "*Charge rate (charge-cancel): 4~5F = 1250 points per frame" + "\n" + "*Charge rate (charge-cancel from j.236A): 5~6F = 2500 points per frame" + "\n" + "*You can only charge once per jump" + "\n" + "*Shorter heights causes less charging." + "\n" + "*Charging only possible at certain heights." + "\n" + "*Height dependent points varies from 50 to 350." + "\n" + "*Landing recovery is 15F if you land while charging." + "\n" + "*Landing recovery is 15F if you land while charging." + "```"
			
            embed = discord.Embed()
            embed.title = "J.8D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6a/BBCS_Taokaka_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Deatils", value=mp)
			
            embed1 = discord.Embed(description='Combo stuff.')
            embed1.title = "Forward Cancel"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCS_Taokaka_6Cancel.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Deatils", value=mp)
            
            embed2 = discord.Embed(description='Combo stuff Backwards')
            embed2.title = "Backward Cancel"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/dc/BBCS_Taokaka_4Cancel.png')
            embed2.add_field(name="Frame Data", value=tab2)
            #embed2.add_field(name="Deatils", value=mp)
			
            embed3 = discord.Embed(description='Frame traps on hit and safe on block.')
            embed3.title = "A Cancel"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCS_Taokaka_ACancel.png')
            embed3.add_field(name="Frame Data", value=tab3)
            #embed3.add_field(name="Deatils", value=mp)
			
            embed4 = discord.Embed(description='J.D BFF.')
            embed4.title = "B Cancel"
            embed4.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCS_Taokaka_BCancel.png')
            embed4.add_field(name="Frame Data", value=tab4)
            #embed4.add_field(name="Deatils", value=mp)
			
            embed5 = discord.Embed(description='+3 leaves you air borne.')
            embed5.title = "C Cancel"
            embed5.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Taokaka_CCancel.png')
            embed5.add_field(name="Frame Data", value=tab5)
            #embed5.add_field(name="Deatils", value=mp)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
            await self.bot.say(embed=embed5)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @tk.command(name="ft", pass_context=False)  # Taokaka from blazblue
    async def _ft_tk(self):   
        """Forward Throw:  Normal."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = [po.get_text() for po in info.find_all('p')]		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCS_Taokaka_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @tk.command(name="bt", pass_context=False)  # Taokaka from blazblue
    async def _bt_tk(self):   
        """Back Throw:  Troll pose."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/52/BBCS_Taokaka_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @tk.command(name="at", pass_context=False)  # Taokaka from blazblue
    async def _at_tk(self):   
        """Air Throw:  Solid damage."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Taokaka_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @tk.command(name="ca", pass_context=False)  # Taokaka from blazblue
    async def _ca_tk(self):   
        """Counter Assault:  Got a buff back up in CP."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e0/BBCS_Taokaka_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @tk.command(name="ct", pass_context=False)  # Taokaka from blazblue
    async def _ct_tk(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/be/BBCP_Taokaka_CrushTrigger.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @tk.command(name="236a", pass_context=False)  # Taokaka from blazblue
    async def _s1_tk(self):   
        """Safe."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[5] + "\n" + "```"
			
            embed = discord.Embed()
            embed.title = "Cat Spirit One!"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/17/BBCS_Taokaka_Spirit1.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @tk.command(name="j236b", pass_context=False)  # Taokaka from blazblue
    async def _s2_tk(self):   
        """Combo ender."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1[0] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[5] + "\n" + "```"
			
            embed = discord.Embed()
            embed.title = "Cat Spirit Two!"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/af/BBCS_Taokaka_Spirit2.png')
            embed.add_field(name="Hits 1-4 Frame Data", value=tab)
            embed.add_field(name="5th Hit Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @tk.command(name="236c", pass_context=False)  # Taokaka from blazblue
    async def _s3_tk(self):   
        """No longer an overhead."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            my_table1 = table[73]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body1.find_all('tr')[1]
            info =  table_body.find_all('tr')[4]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[5] + "\n" + "```"
			
            embed = discord.Embed()
            embed.title = "Cat Spirit Three!"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/86/BBCS_Taokaka_Spirit3.png')
            embed.add_field(name="Downswing Frame Data", value=tab)
            embed.add_field(name="Downswing(MAX CHARGE) Frame Data", value=tab1)
            embed.add_field(name="Upswing Frame Data", value=tab2)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed(Description='Easy resets, but real men go for corner 5D~A.')
            embed1.title = "Cat Spirit Encore!:  236c-b"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/e6/BBCP_Taokaka_SpiritEncore.png')
            embed1.add_field(name="Frame Data", value=tab3)
            #embed1.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @tk.command(name="63214a", pass_context=False)  # Taokaka from blazblue
    async def _s4_tk(self):   
        """Tao throws out some random shit. A and B are not options."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[5]
            headers2 = table_body.find_all('tr')[6]
            headers3 = table_body.find_all('tr')[7]
            headers4 = table_body.find_all('tr')[8]
            headers5 = table_body.find_all('tr')[10]
            headers6 = table_body.find_all('tr')[11]
            headers7 = table_body.find_all('tr')[13]
            info =  table_body.find_all('tr')[9]
            info1 =  table_body.find_all('tr')[12]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]
            Data7 = [head7.get_text() for head7 in headers7.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()
            vrs6 = headers6.find('th').get_text()
            vrs7 = headers7.find('th').get_text()
            mp1 = info.find('li').get_text()
            mp2 = info1.find('li').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')
            tab6 = tabulate([["Version", vrs6], ["Damage", Data6[0]], ["Guard", Data6[1]], ["Startup", Data6[2]], ["Active", Data6[3]], ["Recovery", Data6[4]], ["Frame Adv.", Data6[5]], ["Attribute", Data6[6]]], tablefmt='simple', stralign='left')
            tab7 = tabulate([["Version", vrs7], ["Damage", Data7[0]], ["Guard", Data7[1]], ["Startup", Data7[2]], ["Active", Data7[3]], ["Recovery", Data7[4]], ["Frame Adv.", Data7[5]], ["Attribute", Data7[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Kitty Litter Special(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/08/BBCS_Taokaka_Litter.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Items"
            embed1.add_field(name="Apple Frame Data", value=tab1)
            embed1.add_field(name="Bomb Frame Data", value=tab2)
            embed1.add_field(name="Chibikaka Frame Data", value=tab3)
            #embed1.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Items Cont."
            embed2.add_field(name="Pillow Frame Data", value=tab4)
            embed2.add_field(name="Pillow Attack Props", value=mpA)
            embed2.add_field(name="Hammer Frame Data", value=tab5)
			
            embed3 = discord.Embed()
            embed3.title = "Items Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Taokaka_Items.png')
            embed3.add_field(name="Baseball Frame Data", value=tab6)
            embed3.add_field(name="Baseball Attack Props", value=mpB)
            embed3.add_field(name="Fish Frame Data", value=tab7)				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @tk.command(name="63214b", pass_context=False)  # Taokaka from blazblue
    async def _s5_tk(self):   
        """Tao throws out some random shit. A and B are not options."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[5]
            headers2 = table_body.find_all('tr')[6]
            headers3 = table_body.find_all('tr')[7]
            headers4 = table_body.find_all('tr')[8]
            headers5 = table_body.find_all('tr')[10]
            headers6 = table_body.find_all('tr')[11]
            headers7 = table_body.find_all('tr')[13]
            info =  table_body.find_all('tr')[9]
            info1 =  table_body.find_all('tr')[12]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]
            Data7 = [head7.get_text() for head7 in headers7.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()
            vrs6 = headers6.find('th').get_text()
            vrs7 = headers7.find('th').get_text()
            mp1 = info.find('li').get_text()
            mp2 = info1.find('li').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')
            tab6 = tabulate([["Version", vrs6], ["Damage", Data6[0]], ["Guard", Data6[1]], ["Startup", Data6[2]], ["Active", Data6[3]], ["Recovery", Data6[4]], ["Frame Adv.", Data6[5]], ["Attribute", Data6[6]]], tablefmt='simple', stralign='left')
            tab7 = tabulate([["Version", vrs7], ["Damage", Data7[0]], ["Guard", Data7[1]], ["Startup", Data7[2]], ["Active", Data7[3]], ["Recovery", Data7[4]], ["Frame Adv.", Data7[5]], ["Attribute", Data7[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Kitty Litter Special(B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/08/BBCS_Taokaka_Litter.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Items"
            embed1.add_field(name="Apple Frame Data", value=tab1)
            embed1.add_field(name="Bomb Frame Data", value=tab2)
            embed1.add_field(name="Chibikaka Frame Data", value=tab3)
            #embed1.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Items Cont."
            embed2.add_field(name="Pillow Frame Data", value=tab4)
            embed2.add_field(name="Pillow Attack Props", value=mpA)
            embed2.add_field(name="Hammer Frame Data", value=tab5)
			
            embed3 = discord.Embed()
            embed3.title = "Items Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Taokaka_Items.png')
            embed3.add_field(name="Baseball Frame Data", value=tab6)
            embed3.add_field(name="Baseball Attack Props", value=mpB)
            embed3.add_field(name="Fish Frame Data", value=tab7)		
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @tk.command(name="63214c", pass_context=False)  # Taokaka from blazblue
    async def _s6_tk(self):   
        """Bowling ball xN."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[14]
            info =  table_body.find_all('tr')[15]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "```"
            #mpB = "```" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Kitty Litter Special(C)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/08/BBCS_Taokaka_Litter.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Bowling Ball"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Taokaka_Items.png')
            embed1.add_field(name="Frame Data", value=tab1)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @tk.command(name="214d", pass_context=False)  # Taokaka from blazblue
    async def _s7_tk(self):   
        """broken"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "```"
            #mpB = "```" + "*" + mp2[3] + "\n" + "*" + mp2[4] + "```"
			
            embed = discord.Embed()
            embed.title = "Cat Jump"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCS_Taokaka_CatJump.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @tk.command(name="j214d", pass_context=False)  # Taokaka from blazblue
    async def _s8_tk(self):   
        """ (at edge of screen)Ambigious."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "```"
            #mpB = "```" + "*" + mp2[3] + "\n" + "*" + mp2[4] + "```"
			
            embed = discord.Embed()
            embed.title = "Sticky Kitty"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/82/BBCS_Taokaka_Sticky.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @tk.command(name="28d", pass_context=False)  # Taokaka from blazblue
    async def _s9_tk(self):   
        """Testu Special."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs1 = headers1.find('th').get_text()	
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs2 = headers2.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
			
            embed = discord.Embed()
            embed.title = "Trick Edge"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4d/BBCS_Taokaka_Trick.png')
            embed.add_field(name="Normal Frame Data", value=tab)	
            embed.add_field(name="Down Frame Data", value=tab1)
            embed.add_field(name="Back Frame Data", value=tab2)			
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @tk.command(name="22c", pass_context=False)  # Taokaka from blazblue
    async def _s10_tk(self):   
        """Great P2."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp2 = [po.get_text() for po in info.find_all('p')] 
            #mp1 = [op.get_text() for op in info.find_all('li')]       

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
            #mpB = "```" + "*" + mp2[1] + "```"
            #mpC = "```" + "*" + mp2[0] + "```"
            #mpD = "```" + "*" + mp2[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Slashy Slashy"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/55/BBCS_Taokaka_Slashy.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @tk.command(name="236236d", pass_context=False)  # Taokaka from blazblue
    async def _dd1_tk(self):
        """No more wall bounce =[."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[85]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op1.get_text() for op1 in info.find_all('li')]
            #mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Hexa Edge"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cf/BBCS_Taokaka_Hexa.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @tk.command(name="214214c", pass_context=False)  # Taokaka from blazblue
    async def _dd2_tk(self):
        """Hold Dat L."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[87]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            #mp1 = [op1.get_text() for op1 in info.find_all('li')]
            #mp2 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Imma Beat The Crap Outta You"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d4/BBCS_Taokaka_Tuna.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
		

    @tk.command(name="j236236d", pass_context=False)  # Taokaka from blazblue
    async def _dd3_tk(self):   
        """Damage and knockdown."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[89]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            #mp1 = [op1.get_text() for op1 in info.find_all('li')]
            #mp2 = info.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Unison Nyaibu!"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/31/BBCP_Taokaka_Unison_Nyaibu.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @tk.command(name="abcd", pass_context=False)  # Taokaka from blazblue
    async def _abcd_tk(self): 
        """Exceed Accel: PARTY TIME!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[91]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [fo.get_text() for fo in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Kaka Clan Hospitality!"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c9/BBCF_Taokaka_ExceedAccel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @tk.command(name="od", pass_context=False)  # Taokaka from blazblue
    async def _od_tk(self): 
        """SHADOW CLONE JUTSU!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[93]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [fo.get_text() for fo in info.find_all('li')]
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Almost Becoming Two(OverDrive)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c9/BBCS_Taokaka_AB2.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @tk.command(name="4128d", pass_context=False)  # Taokaka from blazblue
    async def _astral_tk(self):   
        """GG."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Taokaka"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[95]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [po.get_text() for po in info.find_all('li')]
            #mp2 = [op.get_text() for op in info.find_all('p')]
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Attack Meow Pow!"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fa/BBCS_Taokaka_NyamberOne.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
###################################################################################################################################################################################################
    @re.command(name="5a", pass_context=False)  # Relius Clover from blazblue
    async def _5a_re(self):
        """Relius' fastest normal!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"           
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/df/BBCS_Relius_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
		
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @re.command(name="5b", pass_context=False)  # Relius Clover from blazblue
    async def _5b_re(self):   
        """Demi-God level poke. Rule the world with an iron fist!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCS_Relius_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)		
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @re.command(name="5c", pass_context=False)  # Relius Clover from blazblue
    async def _5c_re(self): 
        """Smaller horizontal range than 5B, take care not to whiff!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/37/BBCS_Relius_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @re.command(name="2a", pass_context=False)  # Relius Clover from blazblue
    async def _2a_re(self):   
        """This move is static on block. Take advantage of that."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCS_Relius_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @re.command(name="2b", pass_context=False)  # Relius Clover from blazblue
    async def _2b_re(self): 
        """A slow but far reaching low."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCS_Relius_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @re.command(name="2c", pass_context=False)  # Relius Clover from blazblue
    async def _2c_re(self):   
        """Make them hate this move."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/ce/BBCS_Relius_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @re.command(name="6a", pass_context=False)  # Relius Clover from blazblue
    async def _6a_re(self):  
        """The overhead of infamy."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/29/BBCS_Relius_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @re.command(name="6b", pass_context=False)  # Relius Clover from blazblue
    async def _6b_re(self):  
        """Better than nothing I guess."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/67/BBCS_Relius_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @re.command(name="6c", pass_context=False)  # Relius Clover from blazblue
    async def _6c_re(self):  
        """Delay longer to float lower."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/81/BBCS_Relius_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @re.command(name="3c", pass_context=False)  # Relius Clover from blazblue
    async def _3c_re(self):   
        """Still good after all these years"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bc/BBCS_Relius_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @re.command(name="ja", pass_context=False)  # Relius Clover from blazblue
    async def _ja_re(self): 
        """Who ordered the actives?"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/79/BBCS_Relius_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @re.command(name="jb", pass_context=False)  # Relius Clover from blazblue
    async def _jb_re(self):   
        """Still catches rolls when you safejump!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ab/BBCS_Relius_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @re.command(name="jc", pass_context=False)  # Relius Clover from blazblue
    async def _jc_re(self): 
        """Not a divekick."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c6/BBCS_Relius_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @re.command(name="5d", pass_context=False)  # Relius Clover from blazblue
    async def _5d_re(self):   
        """Less IG used to summon, more for later."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left') 				
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/be/BBCS_Relius_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @re.command(name="2d", pass_context=False)  # Relius Clover from blazblue
    async def _2d_re(self):  
        """Don't go trying to use this to desummon."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left') 				
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/64/BBCS_Relius_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @re.command(name="jd", pass_context=False)  # Relius Clover from blazblue
    async def _jd_re(self):  
        """Can also glide backwords for a safe retreat as you summon/desummon!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left') 				
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7e/BBCS_Relius_jD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @re.command(name="ig6d", pass_context=False)  # Relius Clover from blazblue
    async def _ig6d_re(self):  
        """Does everything."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left') 				
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Ignis: 6D(/OD)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCS_Relius_Ignis_6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @re.command(name="ig2d", pass_context=False)  # Relius Clover from blazblue
    async def _ig2d_re(self):  
        """Don't touch my waifu"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left') 				
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Ignis: 2D(/OD)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/11/BBCS_Relius_Ignis_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @re.command(name="ig4d", pass_context=False)  # Relius Clover from blazblue
    async def _ig4d_re(self):  
        """Is still an air unblockable even if Ignis is high up in the air herself."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left') 				
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Ignis: 4D(/OD)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2e/BBCS_Relius_Ignis_4D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					

    @re.command(name="igj6d", pass_context=False)  # Relius Clover from blazblue
    async def _igj6d_re(self):  
        #"""Insert Tag Here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left') 				
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Ignis: j.6D(/OD)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a9/BBCS_Relius_Ignis_j6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @re.command(name="igj2d", pass_context=False)  # Relius Clover from blazblue
    async def _igj2d_re(self):  
        #"""Insert Tag Here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left') 				
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Ignis: j.2D(/OD)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/da/BBCS_Relius_Ignis_j2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @re.command(name="igj8d", pass_context=False)  # Relius Clover from blazblue
    async def _igj8d_re(self):  
        #"""Insert Tag Here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]  	
            mp1 = [po.get_text() for po in info.find_all('p')] 				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left') 				
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Ignis: j.8D(/OD)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fb/BBCS_Relius_Ignis_j8D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @re.command(name="ft", pass_context=False)  # Relius Clover from blazblue
    async def _ft_re(self):   
        """Forward Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/26/BBCS_Relius_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @re.command(name="bt", pass_context=False)  # Relius Clover from blazblue
    async def _bt_re(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e7/BBCS_Relius_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @re.command(name="at", pass_context=False)  # Relius Clover from blazblue
    async def _at_re(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/01/BBCS_Relius_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @re.command(name="ca", pass_context=False)  # Relius Clover from blazblue
    async def _ca_re(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/37/BBCS_Relius_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @re.command(name="ct", pass_context=False)  # Relius Clover from blazblue
    async def _ct_re(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fc/BBCP_Relius_CrushTrigger.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @idl.command(name="236c", pass_context=False)  # Relius Clover from blazblue
    async def _s1_re(self):   
        """Suprise Fist!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]

            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed(description='236C')
            embed.title = "Id Lauger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6f/BBCS_Relius_IdLauger.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            
            embed1 = discord.Embed()
            embed1.title = "Id Lauger Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCS_Relius_AirIdLauger.png')			
            embed1.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	

    @idl.command(name="214a", pass_context=False)  # Relius Clover from blazblue
    async def _s1a_re(self):   
        """214a after Id Lauger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table1 = table[57]
            table_body1 = my_table1.find("table")
            headers2 = table_body1.find_all('tr')[1]
            headers3 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
			
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp2 = [po.get_text() for po in info1.find_all('p')]
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpC = "```" + "* Used to knock the opponent away after lauger. Does slightly less damage than ~214B/~j.214B but does not put Ignis in sandwich mode. In CF Ignis now appears at the height Relius is currently at, and she does not cause the opponent to ground slide instead letting them emergency tech. when the opponent is air-hit by the move one now has to manually time the move to hit, preferably at the last active it can. Forgetting this can make 236C~214A whiff completely if the opponent was high up when 236C connected. The P2 has also been decreased so 4D is the more optimal move to continue from 236C with if 4D's bonus proration hasn't been used in the combo prior to 236C." + "```"
            mpD = "```" + "* The loss of vertical tracking can let you set up an inescapable Val Tus oki from 2C>6C>236C~214A midscreen if timed correctly. In the corner ~214A can be followed up with 5B, 3C, or 2C. In the corner, ~j.214A can follow up into 5B 3C or airdash j.B>j.C>j.236C>4D usually. In OD this move has a lot of untech and puts the opponent in a sliding state. You can use the OD version to desummon Ignis in the corner and follow up" + "```"            
			
            embed2 = discord.Embed(description='214A after Id Lauger')
            embed2.title = "Id Haas"
            embed2.add_field(name="Ground Frame Data", value=tab2)
            embed2.add_field(name="Air Frame Data", value=tab3)
            embed2.add_field(name="Attack Props:", value=mpB, inline='true')
			
            embed3 = discord.Embed()
            embed3.title = "Id Haas Cont."
            embed3.add_field(name="Attack Props: Cont.", value=mpC)
			
            embed4 = discord.Embed()
            embed4.title = "Id Haas Cont."
            embed4.set_image(url='http://www.dustloop.com/wiki/images/0/00/BBCS_Relius_IdHaas.png')
            embed4.add_field(name="Attack Props: Cont.", value=mpD)
			
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	

    @idl.command(name="214b", pass_context=False)  # Relius Clover from blazblue
    async def _s1b_re(self):   
        """214b after Id Lauger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table2 = table[59]
            table_body2 = my_table2.find("table")
            headers4 = table_body2.find_all('tr')[1]
            headers5 = table_body2.find_all('tr')[2]
            info2 =  table_body2.find_all('tr')[3]
			
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            mp3 = [ah.get_text() for ah in info2.find_all('p')]
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()

            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')       
            mpE = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "```"
			
            embed5 = discord.Embed(description='214B after Id Lauger')
            embed5.title = "Id Naiads"
            embed5.set_image(url='http://www.dustloop.com/wiki/images/3/35/BBCS_Relius_IdNaiads.png')
            embed5.add_field(name="Ground Frame Data", value=tab4)
            embed5.add_field(name="Air Frame Data", value=tab5)
            embed5.add_field(name="Attack Props:", value=mpE, inline='true')
		
            await self.bot.say(embed=embed5)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	

    @idl.command(name="214c", pass_context=False)  # Relius Clover from blazblue
    async def _s1c_re(self):   
        """214c after Id Lauger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table3 = table[61]
            table_body3 = my_table3.find("table")
            headers6 = table_body3.find_all('tr')[1]
            headers7 = table_body3.find_all('tr')[2]
            info3 =  table_body3.find_all('tr')[3]
			
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]
            Data7 = [head7.get_text() for head7 in headers7.find_all('td')]
            mp4 = [ba.get_text() for ba in info3.find_all('p')]
            vrs6 = headers6.find('th').get_text()
            vrs7 = headers7.find('th').get_text()

            tab6 = tabulate([["Version", vrs6], ["Damage", Data6[0]], ["Guard", Data6[1]], ["Startup", Data6[2]], ["Active", Data6[3]], ["Recovery", Data6[4]], ["Frame Adv.", Data6[5]], ["Attribute", Data6[6]]], tablefmt='simple', stralign='left')
            tab7 = tabulate([["Version", vrs7], ["Damage", Data7[0]], ["Guard", Data7[1]], ["Startup", Data7[2]], ["Active", Data7[3]], ["Recovery", Data7[4]], ["Frame Adv.", Data7[5]], ["Attribute", Data7[6]]], tablefmt='simple', stralign='left')
            mpF = "```" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "\n" + "*" + mp4[2] + "```"
			
            embed6 = discord.Embed(description='214C after Id Lauger')
            embed6.title = "Id Zain"
            embed6.set_image(url='http://www.dustloop.com/wiki/images/4/47/BBCS_Relius_ValTus.png')
            embed6.add_field(name="Ground Frame Data", value=tab6)
            embed6.add_field(name="Air Frame Data", value=tab7)
            embed6.add_field(name="Attack Props:", value=mpF, inline='true')
			
            await self.bot.say(embed=embed6)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @re.command(name="236a", pass_context=False)  # Relius Clover from blazblue
    async def _s2_re(self):   
        """DANCE OFF"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Led Ley"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/97/BBCS_Relius_LedLey.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @re.command(name="214a", pass_context=False)  # Relius Clover from blazblue
    async def _s3_re(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Val Lanto (/OD)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/00/BBCS_Relius_IdHaas.png')
            embed.add_field(name="Ignis Active Frame Data", value=tab)
            embed.add_field(name="Ignis Withdrawn Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @re.command(name="214b", pass_context=False)  # Relius Clover from blazblue
    async def _s4_re(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]


            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Val Lyra (/OD)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5d/BBCS_Relius_ValLyra.png')
            embed.add_field(name="Ignis Active Frame Data", value=tab)
            embed.add_field(name="Ignis Withdrawn Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')	
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @re.command(name="214c", pass_context=False)  # Relius Clover from blazblue
    async def _s5_re(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Val Tus (/OD)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/47/BBCS_Relius_ValTus.png')
            embed.add_field(name="Ignis Active Frame Data", value=tab)
            embed.add_field(name="Ignis Withdrawn Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')		
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @re.command(name="236d", pass_context=False)  # Relius Clover from blazblue
    async def _s6_re(self):   
        """GON GIT YA"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "```"
			
            embed = discord.Embed()
            embed.title = "Geara Kaas"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/74/BBCS_Relius_Geara_Kaas.png')
            embed.add_field(name="Ignis Active Frame Data", value=tab)
            embed.add_field(name="Ignis Withdrawn Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @re.command(name="214d", pass_context=False)  # Relius Clover from blazblue
    async def _s7_re(self):   
        """Bop your nose"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "```"
			
            embed = discord.Embed()
            embed.title = "Geara Nose (/OD)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/65/BBCS_Relius_GearaNose.png')
            embed.add_field(name="Ignis Active Frame Data", value=tab)
            embed.add_field(name="Ignis Withdrawn Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @re.command(name="j214b", pass_context=False)  # Relius Clover from blazblue
    async def _s8_re(self):   
        """ (at edge of screen)Ambigious."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Bel Lafino"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/35/BBCS_Relius_IdNaiads.png')
            embed.add_field(name="Ignis Active Frame Data", value=tab)
            embed.add_field(name="Ignis Withdrawn Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @re.command(name="22a", pass_context=False)  # Relius Clover from blazblue
    async def _s9_re(self):   
        """You've Activated my trap card(A)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()	
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [op.get_text() for op in info.find_all('li')]			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
			
            embed = discord.Embed()
            embed.title = "Geara Lugia"
            embed.add_field(name="(A) Frame Data", value=tab)	
            embed.add_field(name="Attack Props:", value=mpA)	

            embed1 = discord.Embed()
            embed1.title = "Geara Lugia(A) Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/96/BBCP_Relius_GearaLugia.png')
            embed1.add_field(name="Attack Props cont.", value=mpB)			
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @re.command(name="22b", pass_context=False)  # Relius Clover from blazblue
    async def _s10_re(self):   
        """You've Activated my trap card(B)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()	
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [op.get_text() for op in info.find_all('li')]			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Geara Lugia"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/96/BBCP_Relius_GearaLugia.png')
            embed.add_field(name="(B) Frame Data", value=tab)	
            embed.add_field(name="Attack Props:", value=mpA)			
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @re.command(name="22c", pass_context=False)  # Relius Clover from blazblue
    async def _s11_re(self):   
        """You've Activated my trap card(C)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()	
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [op.get_text() for op in info.find_all('li')]			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Geara Lugia"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/96/BBCP_Relius_GearaLugia.png')
            embed.add_field(name="(C) Frame Data", value=tab)	
            embed.add_field(name="Attack Props:", value=mpA)			
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")						

    @re.command(name="41236b", pass_context=False)  # Relius Clover from blazblue
    async def _s12_re(self):   
        """Swiss Army Special"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]       

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Gad Leis"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0c/BBCP_Relius_GadLeis.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @re.command(name="2363214c", pass_context=False)  # Relius Clover from blazblue
    async def _dd1_re(self):
        #"""Insert Tag Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op1.get_text() for op1 in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Req Vinum"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f8/BBCS_Relius_ReqVinum.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @re.command(name="632146d", pass_context=False)  # Relius Clover from blazblue
    async def _dd2_re(self):
        """Hold Dat L."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [op1.get_text() for op1 in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Vol Tedo"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Vol Tedo Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/5/56/BBCS_Relius_VolTedo.png')
            embed1.add_field(name="Attack Props cont.", value=mpB)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @re.command(name="236236d", pass_context=False)  # Relius Clover from blazblue
    async def _dd3_re(self):   
        """SHANK YO ASS"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[85]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [op1.get_text() for op1 in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "* Fully armored and takes no damage from hits unlike Carl's similar distortion with Nirvana. It has quite a few uses, from creating a wall to trap a dying opponent behind at neutral, to locking an opponent down for mix-up to just hard countering a counter assault or standing burst. This move has changed from CP to Extend. CH 5C and CH 2C can combo into it on ground hit for some good, damaging, burst safe confirms. The first eight hits occur faster and no longer have gaps in them with which you can cross up an opponent. (This however doesn't let an opponent who's blocked the first hit disrespect the remaining 7. The final three hits still have gaps so cross-ups are possible.) If you find that you need to stretch that last bit of Ignis to finish an opponent, or if you just see that your for has run out of air options or put themselves in a situation where you can trade with this move and win, you may as well throw it out there." + "```"
            mpC = "```" + "* While the move is happening you can do high/low mix-ups for the first eight hits and cross-ups using jumps or led ley or frame traps/throws during the last three hits. It's worth noting that Ignis will not stop for anything short of Relius being hit by an EA or a couple cinematic distortions. Because of this it is possible to combo a green burst into the last hit of Bios into 3C>632146D to close a match out. Also keep in mind that as long as Relius is not in hitstun when the move ends Ignis will stay summoned even after this move is finished. Beware though because many characters can merely backdash, take a hit and then airtech to escape when they see the move. Characters with DPs can DP clash the move until it's over for safety as well. New to CF is the fact that the last three hits will combo without counter hit even if they're airborne!" + "```"
			
            embed = discord.Embed()
            embed.title = "Duo Bios"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Duo Bios cont."
            embed1.add_field(name="Attack Props cont.", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "Duo Bios cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/7/7e/BBCS_Relius_DuoBios.png')
            embed2.add_field(name="Attack Props cont.", value=mpC)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @re.command(name="abcd", pass_context=False)  # Relius Clover from blazblue
    async def _abcd_re(self): 
        """Exceed Accel: Dandy Punch"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[87]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Zera Varius"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1b/BBCF_Relius_ExceedAccel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @re.command(name="214214d", pass_context=False)  # Relius Clover from blazblue
    async def _astral_re(self):   
        """1 Free ride to the Rape Dungeon"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Relius_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[89]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Puppeteer's Altar"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3f/BBCS_Relius_PuppeteersAltar.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Puppeteer's Altar Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/17/BBCS_Relius_PuppeteersAltar2.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
###################################################################################################################################################################################################
    @rac.command(name="5a", pass_context=False)  # Rachel Alucard from blazblue
    async def _5a_rac(self):
        """Auto 2-hit normal. Decent for pressure."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"           
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7e/BBCS_Rachel_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
		
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @rac.command(name="5b", pass_context=False)  # Rachel Alucard from blazblue
    async def _5b_rac(self):   
        """Risky poke with high reward. Key move in Rachel's mix up and combos."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4e/BBCS_Rachel_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)		
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @rac.command(name="5c", pass_context=False)  # Rachel Alucard from blazblue
    async def _5c_rac(self): 
        """5C is one of her Fatal Counter moves. Very limited use outside of combos."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            my_table1 = table[7]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = [po.get_text() for po in info1.find_all('li')]
            mp4 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1d/BBCS_Rachel_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Great corner combo ender. Offers strong okizeme options in the corner.')
            embed1.title = "5cc"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/8a/BBCS_Rachel_5CC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @rac.command(name="2a", pass_context=False)  # Rachel Alucard from blazblue
    async def _2a_rac(self):   
        """Good poke. Leaves you at neutral frame advantage."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5a/BBCS_Rachel_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @rac.command(name="2b", pass_context=False)  # Rachel Alucard from blazblue
    async def _2b_rac(self): 
        """Really good low. Gatlings from 5B"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/16/BBCS_Rachel_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @rac.command(name="2c", pass_context=False)  # Rachel Alucard from blazblue
    async def _2c_rac(self):   
        """Full body guard point for one hit. Really unsafe if whiffed or blocked."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCS_Rachel_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @rac.command(name="6a", pass_context=False)  # Rachel Alucard from blazblue
    async def _6a_rac(self):  
        """Main anti-air with Rachel."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = [po.get_text() for po in info.find_all('p')]			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b6/BBCS_Rachel_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @rac.command(name="6b", pass_context=False)  # Rachel Alucard from blazblue
    async def _6b_rac(self):  
        """Good poke in some matchups"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = [op.get_text() for op in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2e/BBCS_Rachel_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @rac.command(name="4b", pass_context=False)  # Rachel Alucard from blazblue
    async def _4b_rac(self):  
        """Overhead. Slow, but can fatal counter."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "4b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/95/BBCS_Rachel_4B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @rac.command(name="6c", pass_context=False)  # Rachel Alucard from blazblue
    async def _6c_rac(self):  
        """Main corner carry normal when used with forward directional wind (D/6D)."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5f/BBCS_Rachel_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @rac.command(name="3c", pass_context=False)  # Rachel Alucard from blazblue
    async def _3c_rac(self):   
        """Low hit. Knockdown to safely summon frog."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            my_table1 = table[25]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/89/BBCS_Rachel_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Mix up tool. Can also be used to extend combos.')
            embed1.title = "3[c]"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/89/BBCS_Rachel_3C.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @rac.command(name="ja", pass_context=False)  # Rachel Alucard from blazblue
    async def _ja_rac(self): 
        """Instant overhead if used with 2D/3D wind."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b4/BBCS_Rachel_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @rac.command(name="jb", pass_context=False)  # Rachel Alucard from blazblue
    async def _jb_rac(self):   
        """Used like j.A but it's a bit slower. Pretty good air-to-air uses."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/56/BBCS_Rachel_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @rac.command(name="jc", pass_context=False)  # Rachel Alucard from blazblue
    async def _jc_rac(self): 
        """Catch opponents in the air directly above you."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            my_table1 = table[33]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = [op.get_text() for op in info1.find_all('li')]
            mp4 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 +"```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8d/BBCS_Rachel_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Can be used for mix up. Can also be used to stall for time.')
            embed1.title = "J.[C]"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/5/51/BBCS_Rachel_jC_2.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @rac.command(name="j2c", pass_context=False)  # Rachel Alucard from blazblue
    async def _j2c_rac(self):   
        """Has 3 levels. Level 2 and Level 3 are used to extend combos."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]  
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]  			
            mp1 = [po.get_text() for po in info.find_all('p')] 	
            mp2 = [op.get_text() for op in info.find_all('li')] 
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left') 	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left') 			
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "J.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/56/BBCS_Rachel_j2C.png')
            embed.add_field(name="Lv. 1 Frame Data", value=tab)
            embed.add_field(name="Lv. 2 Frame Data", value=tab1)
            embed.add_field(name="Lv. 3 Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")						
			
    @rac.command(name="ft", pass_context=False)  # Rachel Alucard from blazblue
    async def _ft_rac(self):   
        """Forward Throw: Use with wind to follow-up with a combo."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/94/BBCS_Rachel_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @rac.command(name="bt", pass_context=False)  # Rachel Alucard from blazblue
    async def _bt_rac(self):   
        """Back Throw: Use with wind to follow-up with a combo."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/31/BBCS_Rachel_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @rac.command(name="at", pass_context=False)  # Rachel Alucard from blazblue
    async def _at_rac(self):   
        """Air Throw: Follow-up with a downward directional wind if too high to combo normally."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Rachel_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @rac.command(name="ca", pass_context=False)  # Rachel Alucard from blazblue
    async def _ca_rac(self):   
        """Same animation as 6B, decent counter assault."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2e/BBCS_Rachel_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @rac.command(name="ct", pass_context=False)  # Rachel Alucard from blazblue
    async def _ct_rac(self):   
        """Crush Trigger: Good combo material."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            vrs= headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cb/BBCP_Rachel_CT.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @rac.command(name="236a", pass_context=False)  # Rachel Alucard from blazblue
    async def _s1_rac(self):   
        """Her standard zoning tool."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[7]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            mp2 = [po.get_text() for po in info.find_all('li')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp1[0] + "\n" + "*" + mp1[2] + "```"
            mpC = "```" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Tiny Lobelia(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cb/BBCS_Rachel_TinyLobeliaA.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            embed1 = discord.Embed()
            embed1.title = "Tiny Lobelia(A) Cont."		
            embed1.add_field(name="AP Cont.", value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Tiny Lobelia(A) Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Rachel_TinyLobeliaB.png')			
            embed2.add_field(name="AP Cont.", value=mpC, inline='true')
			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @rac.command(name="236b", pass_context=False)  # Rachel Alucard from blazblue
    async def _s2_rac(self):   
        """Her standard zoning tool."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[5]
            info =  table_body.find_all('tr')[7]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            mp2 = [po.get_text() for po in info.find_all('li')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp1[0] + "\n" + "*" + mp1[2] + "```"
            mpC = "```" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Tiny Lobelia(B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cb/BBCS_Rachel_TinyLobeliaA.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            embed1 = discord.Embed()
            embed1.title = "Tiny Lobelia(B) Cont."		
            embed1.add_field(name="AP Cont.", value=mpB, inline='true')

            embed2 = discord.Embed()
            embed2.title = "Tiny Lobelia(B) Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Rachel_TinyLobeliaB.png')			
            embed2.add_field(name="AP Cont.", value=mpC, inline='true')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @rac.command(name="236c", pass_context=False)  # Rachel Alucard from blazblue
    async def _s3_rac(self):   
        """Her standard zoning tool."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[6]
            info =  table_body.find_all('tr')[7]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            mp2 = [po.get_text() for po in info.find_all('li')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp2[1] + "\n" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpC = "```" + "*" + mp1[4] + "```"
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Tiny Lobelia(C)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cb/BBCS_Rachel_TinyLobeliaA.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            embed1 = discord.Embed()
            embed1.title = "Tiny Lobelia(C) Cont."		
            embed1.add_field(name="AP Cont.", value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Tiny Lobelia(C) Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Rachel_TinyLobeliaB.png')			
            embed2.add_field(name="AP Cont.", value=mpC, inline='true')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @rac.command(name="214a", pass_context=False)  # Rachel Alucard from blazblue
    async def _s4_rac(self):   
        """(AIR OK)George the Broken!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed(description='Air OK')
            embed.title = "George the 13th"
            embed.add_field(name="Summon Active Frame Data", value=tab)
            embed.add_field(name="Active Withdrawn Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "George the 13th Cont."
            embed1.add_field(name="AP Cont.", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "George the 13th Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/1/1b/BBCS_Rachel_GeorgeXIII.png')
            embed2.add_field(name="AP Cont.", value=mpC)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @rac.command(name="214b", pass_context=False)  # Rachel Alucard from blazblue
    async def _s5_rac(self):   
        """DA Coffin(Air OK)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] +"```"
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Ivy Blossom"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8d/BBCF_Rachel_IvyBlossom.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')	
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @rac.command(name="214c", pass_context=False)  # Rachel Alucard from blazblue
    async def _s6_rac(self):   
        """Used to extend combos or to catch opponents on their approach(AIR OK)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Sword Iris"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5c/BBCS_Rachel_SwordIris.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')		
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @rac.command(name="22a", pass_context=False)  # Rachel Alucard from blazblue
    async def _s7_rac(self):   
        """Friendly Stalker"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpC = "```" + "*" + mp2[2] + "```"
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Lotus Barrel"
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Lotus Barrel Cont."
            embed1.add_field(name="AP Cont.", value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Lotus Barrel Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/9/9c/BBCP_Rachel_BeelzeLotus.png')
            embed2.add_field(name="AP Cont.", value=mpC, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @rac.command(name="632146c", pass_context=False)  # Rachel Alucard from blazblue
    async def _dd1_rac(self):
        """Primarily combo material.(Air OK)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
            headers4 = table_body.find_all('tr')[7]
            headers5 = table_body.find_all('tr')[8]
            info1 =  table_body.find_all('tr')[9]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            mp1 = [op1.get_text() for op1 in info.find_all('li')]
            mp2 = info1.find('li').get_text()
            mp3 = [op2.get_text() for op2 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2 + "\n" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Baden Baden Lily"
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="OD Ground Frame Data", value=tab2)
            embed.add_field(name="OD Air Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Baden Baden Lily Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/40/BBCS_Rachel_BadenBadenLily.png')
            embed1.add_field(name="Rod Frame Data", value=tab4)
            embed1.add_field(name="OD Rod Frame Data", value=tab5)
            embed1.add_field(name="AP Cont.", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @rac.command(name="632146b", pass_context=False)  # Rachel Alucard from blazblue
    async def _dd2_rac(self):
        """Used for mix-up and wind regeneration.(Air OK)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            headers4 = table_body.find_all('tr')[5]
            headers5 = table_body.find_all('tr')[6]
            headers6 = table_body.find_all('tr')[7]
            headers7 = table_body.find_all('tr')[8]
            headers8 = table_body.find_all('tr')[9]
            headers9 = table_body.find_all('tr')[10]
            info =  table_body.find_all('tr')[11]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]
            Data7 = [head7.get_text() for head7 in headers7.find_all('td')]
            Data8 = [head8.get_text() for head8 in headers8.find_all('td')]
            Data9 = [head9.get_text() for head9 in headers9.find_all('td')]
            mp1 = [op1.get_text() for op1 in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()
            vrs6 = headers6.find('th').get_text()
            vrs7 = headers7.find('th').get_text()
            vrs8 = headers8.find('th').get_text()
            vrs9 = headers9.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')
            tab6 = tabulate([["Version", vrs6], ["Damage", Data6[0]], ["Guard", Data6[1]], ["Startup", Data6[2]], ["Active", Data6[3]], ["Recovery", Data6[4]], ["Frame Adv.", Data6[5]], ["Attribute", Data6[6]]], tablefmt='simple', stralign='left')
            tab7 = tabulate([["Version", vrs7], ["Damage", Data7[0]], ["Guard", Data7[1]], ["Startup", Data7[2]], ["Active", Data7[3]], ["Recovery", Data7[4]], ["Frame Adv.", Data7[5]], ["Attribute", Data7[6]]], tablefmt='simple', stralign='left')
            tab8 = tabulate([["Version", vrs8], ["Damage", Data8[0]], ["Guard", Data8[1]], ["Startup", Data8[2]], ["Active", Data8[3]], ["Recovery", Data8[4]], ["Frame Adv.", Data8[5]], ["Attribute", Data8[6]]], tablefmt='simple', stralign='left')
            tab9 = tabulate([["Version", vrs9], ["Damage", Data9[0]], ["Guard", Data9[1]], ["Startup", Data9[2]], ["Active", Data9[3]], ["Recovery", Data9[4]], ["Frame Adv.", Data9[5]], ["Attribute", Data9[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
            mpB = "```" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='(Air OK)')
            embed.title = "Tempest Dahlia"
            embed.add_field(name="Lv.0 Frame Data", value=tab)
            embed.add_field(name="Lv.1 Frame Data", value=tab1)
            embed.add_field(name="Lv.2 Frame Data", value=tab2)
            embed.add_field(name="Lv.3 Frame Data", value=tab3)
            embed.add_field(name="Lv.4 Frame Data", value=tab4)
			
            embed1 = discord.Embed()
            embed1.title = "OD Tempest Dahlia"
            embed1.add_field(name="Lv.0(OD) Frame Data", value=tab)
            embed1.add_field(name="Lv.1(OD) Frame Data", value=tab1)
            embed1.add_field(name="Lv.2(OD) Frame Data", value=tab2)
            embed1.add_field(name="Lv.3(OD) Frame Data", value=tab3)
            embed1.add_field(name="Lv.4(OD) Frame Data", value=tab4)
			
            embed2 = discord.Embed()
            embed2.title = "Tempest Dahlia Cont."
            embed2.add_field(name="Attack Props:.", value=mpA, inline='true')
			
            embed3 = discord.Embed()
            embed3.title = "Tempest Dahlia Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/c/ca/BBCS_Rachel_TempestDahlia.png')
            embed3.add_field(name="AP Cont.", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					

    @rac.command(name="abcd", pass_context=False)  # Rachel Alucard from blazblue
    async def _abcd_rac(self): 
        """Exceed Accel: Wizard of OZ!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op1.get_text() for op1 in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Gerbera Lute"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/53/BBCF_Rachel_ExceedAccel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @rac.command(name="2363214c", pass_context=False)  # Rachel Alucard from blazblue
    async def _astral_rac(self):   
        """Can be combo'd into for guaranteed win."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Rachel_Alucard"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Clownish Calendula"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/69/BBCS_Rachel_ClownishCalendula.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
###################################################################################################################################################################################################
    @pl.command(name="5a", pass_context=False)  # Platinum the Trinity from blazblue
    async def _5a_pl(self):
        """Randomly attacks with one of three Rock-Paper-Scissors animations, the other two being Rock and Scissors."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"           
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3a/BBCS_Platinum_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
		
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @pl.command(name="5b", pass_context=False)  # Platinum the Trinity from blazblue
    async def _5b_pl(self):   
        """Longest reach ground normal. Moves Plat forward a bit."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/86/BBCS_Platinum_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)		
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @pl.command(name="5c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _5c_pl(self): 
        """Go-to punish normal. Good damage on hit in corner."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/70/BBCS_Platinum_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @pl.command(name="2a", pass_context=False)  # Platinum the Trinity from blazblue
    async def _2a_pl(self):   
        """Short range, low hitting poke."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Platinum_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @pl.command(name="2b", pass_context=False)  # Platinum the Trinity from blazblue
    async def _2b_pl(self): 
        """Very low hurtbox, easy to low profile certain attacks."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8d/BBCS_Platinum_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @pl.command(name="2c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _2c_pl(self):   
        """We /really/ lost loops."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/19/BBCS_Platinum_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @pl.command(name="6a", pass_context=False)  # Platinum the Trinity from blazblue
    async def _6a_pl(self):  
        """Anti-air."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b0/BBCS_Platinum_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @pl.command(name="6b", pass_context=False)  # Platinum the Trinity from blazblue
    async def _6b_pl(self):  
        """Hip Whip attack, Very unsafe on whiff!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/50/BBCS_Platinum_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="6c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _6c_pl(self):  
        """Fatal, combo staple. Floats on hit again!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/24/BBCS_Platinum_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @pl.command(name="3c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _3c_pl(self):   
        """Longest range next to 5B, downs on hit."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a7/BBCS_Platinum_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @pl.command(name="ja", pass_context=False)  # Platinum the Trinity from blazblue
    async def _ja_pl(self): 
        """Fast, self-cancelable infinitely."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/78/BBCS_Platinum_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @pl.command(name="jb", pass_context=False)  # Platinum the Trinity from blazblue
    async def _jb_pl(self):   
        """Very good for fuzzy guarding, and rising overheads."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bd/BBCS_Platinum_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @pl.command(name="jc", pass_context=False)  # Platinum the Trinity from blazblue
    async def _jc_pl(self): 
        """Longest reaching air normal, best normal for spacing."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"

			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6a/BBCS_Platinum_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @pl.command(name="j2c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _j2c_pl(self):   
        """Jump cancelable, but very low hitstun."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('p').get_text()
 			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/63/BBCS_Platinum_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @pl.command(name="5d", pass_context=False)  # Platinum the Trinity from blazblue
    async def _5d_pl(self):   
        """Item GET! 5D and j.D have the same GET sprite. No Item"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('p').get_text()
 			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5D: No Item"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3b/BBCS_Platinum_noItem5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @pl.command(name="jd", pass_context=False)  # Platinum the Trinity from blazblue
    async def _jd_pl(self):   
        """Item GET! 5D and j.D have the same GET sprite.: No Item"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('p').get_text()
 			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.D: No Item"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3b/BBCS_Platinum_noItem5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="ph", pass_context=False)  # Platinum the Trinity from blazblue
    async def _ph_pl(self):   
        """Piko Hammer: Ground"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            my_table1 = table[35]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]		
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers1.find('th').get_text()
            vrs1 = headers2.find('th').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs1], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Guard Crushes on normal block.')
            embed.title = "Piko Hammer"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f0/BBCS_Platinum_hammer5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Loli SMASH.')
            embed1.title = "Piko Hammer Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/1f/BBCS_Platinum_superHammer5D.png')
            embed1.add_field(name="Hit Frame Data", value=tab1)
            embed1.add_field(name="Quake Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="aph", pass_context=False)  # Platinum the Trinity from blazblue
    async def _aph_pl(self):   
        """Piko Hammer: Air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            my_table1 = table[37]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            headers4 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[6]
            headers5 = table_body1.find_all('tr')[1]
            headers6 = table_body1.find_all('tr')[2]
            headers7 = table_body1.find_all('tr')[3]
            headers8 = table_body1.find_all('tr')[4]
            headers9 = table_body1.find_all('tr')[5]
            info1 = table_body1.find_all('tr')[6]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]	
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]	
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]	
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]	
            Data7 = [head7.get_text() for head7 in headers7.find_all('td')]	
            Data8 = [head8.get_text() for head8 in headers8.find_all('td')]
            Data9 = [head9.get_text() for head9 in headers9.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()	
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()
            vrs6 = headers6.find('th').get_text()
            vrs7 = headers7.find('th').get_text()
            vrs8 = headers8.find('th').get_text()
            vrs9 = headers9.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')	
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')	
            tab6 = tabulate([["Version", vrs6], ["Damage", Data6[0]], ["Guard", Data6[1]], ["Startup", Data6[2]], ["Active", Data6[3]], ["Recovery", Data6[4]], ["Frame Adv.", Data6[5]], ["Attribute", Data6[6]]], tablefmt='simple', stralign='left')
            tab7 = tabulate([["Version", vrs7], ["Damage", Data7[0]], ["Guard", Data7[1]], ["Startup", Data7[2]], ["Active", Data7[3]], ["Recovery", Data7[4]], ["Frame Adv.", Data7[5]], ["Attribute", Data7[6]]], tablefmt='simple', stralign='left')	
            tab8 = tabulate([["Version", vrs8], ["Damage", Data8[0]], ["Guard", Data8[1]], ["Startup", Data8[2]], ["Active", Data8[3]], ["Recovery", Data8[4]], ["Frame Adv.", Data8[5]], ["Attribute", Data8[6]]], tablefmt='simple', stralign='left')	
            tab9 = tabulate([["Version", vrs9], ["Damage", Data9[0]], ["Guard", Data9[1]], ["Startup", Data9[2]], ["Active", Data9[3]], ["Recovery", Data9[4]], ["Frame Adv.", Data9[5]], ["Attribute", Data9[6]]], tablefmt='simple', stralign='left')			
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='We lost... even more loops')
            embed.title = " Air Piko Hammer"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/15/BBCS_Platinum_hammerjD.png')
            embed.add_field(name="Air Hit Frame Data", value=tab)
            embed.add_field(name="Hit lv. 1 Frame Data", value=tab1)
            embed.add_field(name="Hit lv. 2 Frame Data", value=tab2)
            embed.add_field(name="Hit lv. 3 Frame Data", value=tab3)
            embed.add_field(name="Quake Frame Data", value=tab4)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='WE GOT LOOPS (AGAIN)! Comboable on any hit.')
            embed1.title = "Air Hammer Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/74/BBCS_Platinum_superHammerjD.png')
            embed1.add_field(name="Hit Frame Data", value=tab5)
            embed1.add_field(name="Hit lv. 1 Frame Data", value=tab6)
            embed1.add_field(name="Hit lv. 2 Frame Data", value=tab7)
            embed1.add_field(name="Hit lv. 3 Frame Data", value=tab8)
            embed1.add_field(name="Quake Frame Data", value=tab9)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="mb", pass_context=False)  # Platinum the Trinity from blazblue
    async def _mb_pl(self):   
        """Magical Bat: Ground"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            my_table1 = table[41]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find_all('p')[0].get_text()
            mp2 = info1.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Also good in combos!')
            embed.title = "Magical Bat"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/22/BBCS_Platinum_homerun5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Comboable on normal hit for decent damage.')
            embed1.title = "Magical Bat Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCS_Platinum_superHomerun5D.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="amb", pass_context=False)  # Platinum the Trinity from blazblue
    async def _amb_pl(self):   
        """Magical Bat: Air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            my_table1 = table[41]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find_all('p')[0].get_text()
            mp2 = info1.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Essentially the same as ground Magical Bat.')
            embed.title = "Air Magical Bat"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e7/BBCS_Platinum_homerunjD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Straight up Thug Clubbing')
            embed1.title = "Air Magical Bat Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCS_Platinum_superHomerunjD.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="mch", pass_context=False)  # Platinum the Trinity from blazblue
    async def _mch_pl(self):   
        """Magical Cat Hammer: Ground"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            my_table1 = table[45]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Zea')
            embed.title = "Magical Cat Hammer"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f6/BBCS_Platinum_CatStick5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Chill out....')
            embed1.title = "Magical Cat Hammer Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/2/22/BBCS_Platinum_superCatStick5D.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="amch", pass_context=False)  # Platinum the Trinity from blazblue
    async def _amch_pl(self):   
        """Magical Cat Hammer: Air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            my_table1 = table[45]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='The Drill')
            embed.title = "Air Magical Cat Hammer"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/be/BBCS_Platinum_CatStickjD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Longest range jump attack ever!')
            embed1.title = "Air Magical Cat Hammer Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/0/07/BBCS_Platinum_superCatStickjD.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					

    @pl.command(name="mfp", pass_context=False)  # Platinum the Trinity from blazblue
    async def _mfp_pl(self):   
        """Magical Frying Pan: Ground"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            my_table1 = table[51]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Spinning...!')
            embed.title = "Air Magical Frying Pan"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/82/BBCS_Platinum_FryingPan5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Pretty good poking and anti-air tool.')
            embed1.title = "Air Magical Frying Pan Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f2/BBCS_Platinum_Fan5D.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="amfp", pass_context=False)  # Platinum the Trinity from blazblue
    async def _amfp_pl(self):   
        """Magical Frying Pan: Ground"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            my_table1 = table[53]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Instant overheads!')
            embed.title = "Air Magical Frying Pan"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ed/BBCS_Platinum_FryingPanjD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Instant overhead with amazing reach, use it and abuse it.')
            embed1.title = "Air Magical Frying Pan Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/6d/BBCS_Platinum_FanjD.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="mm", pass_context=False)  # Platinum the Trinity from blazblue
    async def _mm_pl(self):   
        """Magical Missile: Ground"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            my_table1 = table[57]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Great tool for getting in as well as oki.')
            embed.title = "Magical Missile"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/35/BBCS_Platinum_Missile.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Decent zoning and combo tool')
            embed1.title = "Magical Missile Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/6f/BBCS_Platinum_superMissile.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="amm", pass_context=False)  # Platinum the Trinity from blazblue
    async def _amm_pl(self):   
        """Magical Missile: Air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            my_table1 = table[57]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Great tool for getting in as well as oki.')
            embed.title = "Air Magical Missile"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/35/BBCS_Platinum_Missile.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Decent zoning and combo tool')
            embed1.title = "Air Magical Missile Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/6f/BBCS_Platinum_superMissile.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="bomb", pass_context=False)  # Platinum the Trinity from blazblue
    async def _bomb_pl(self):   
        """Magical Bomb: Ground"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            my_table1 = table[61]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Decent anti-air and oki tool')
            embed.title = "Magical Bomb"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/90/BBCS_Platinum_Bomb.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='The bigger, the better!')
            embed1.title = "Magical Bomb Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/90/BBCS_Platinum_Bomb.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="abomb", pass_context=False)  # Platinum the Trinity from blazblue
    async def _abomb_pl(self):   
        """Magical Bomb: Air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            my_table1 = table[61]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Decent anti-air and oki tool')
            embed.title = "Air Magical Bomb"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/90/BBCS_Platinum_Bomb.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='The bigger, the better!')
            embed1.title = "Air Magical Bomb Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/90/BBCS_Platinum_Bomb.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="mdb", pass_context=False)  # Platinum the Trinity from blazblue
    async def _mdb_pl(self):   
        """Magical Dreamy Box: Ground"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            my_table1 = table[65]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Its a trap!')
            embed.title = "Magical Dreamy Box"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/af/BBCP_Platinum_box.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Its a tarp!')
            embed1.title = "Magical Dreamy Box Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/9f/BBCP_Platinum_Jack-in-the-Box.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="amdb", pass_context=False)  # Platinum the Trinity from blazblue
    async def _amdb_pl(self):   
        """Magical Dreamy Box: Air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            my_table1 = table[65]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Its a trap!')
            embed.title = "Air Magical Dreamy Box"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/af/BBCP_Platinum_box.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Its a Tarp!')
            embed1.title = "Air Magical Dreamy Box Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/9f/BBCP_Platinum_Jack-in-the-Box.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="mboom", pass_context=False)  # Platinum the Trinity from blazblue
    async def _mboom_pl(self):   
        """Magical Boomerang: Ground"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            my_table1 = table[69]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Decent zoning tool')
            embed.title = "Magical Boomerang"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/82/BBCF_Platinum_Halo.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Boomerang')
            embed1.title = "Magical Boomerang Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/49/BBCF_Platinum_superHalo.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="amboom", pass_context=False)  # Platinum the Trinity from blazblue
    async def _amboom_pl(self):   
        """Magical Boomerang: Air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            my_table1 = table[69]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Decent zoning tool')
            embed.title = "Air Magical Boomerang"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/82/BBCF_Platinum_Halo.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Boomerang')
            embed1.title = "Air Magical Boomerang Special"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/49/BBCF_Platinum_superHalo.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @pl.command(name="ft", pass_context=False)  # Platinum the Trinity from blazblue
    async def _ft_pl(self):   
        """Forward Throw: No longer eats bursts, but it's still a great throw. Wallbound glitch fixed too!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1f/BBCS_Platinum_throw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @pl.command(name="bt", pass_context=False)  # Platinum the Trinity from blazblue
    async def _bt_pl(self):   
        """Back Throw: No longer eats bursts, but it's still a great throw. Wallbound glitch fixed too!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1f/BBCS_Platinum_throw.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @pl.command(name="at", pass_context=False)  # Platinum the Trinity from blazblue
    async def _at_pl(self):   
        """Air Throw: Pretty easy to combo, even midscreen!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCS_Platinum_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @pl.command(name="ca", pass_context=False)  # Platinum the Trinity from blazblue
    async def _ca_pl(self):   
        """Plat's CA. One of her few options for escape."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/86/BBCS_Platinum_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @pl.command(name="ct", pass_context=False)  # Platinum the Trinity from blazblue
    async def _ct_pl(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0c/BBCP_Platinum_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="236a", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s1_pl(self):   
        """Fun with pogos. Usually used to end air combos. Has Fatal Counter and Projectile Invulerable Properties now!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[2]
            info1 =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Persia"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/ba/BBCS_Platinum_AirPersia.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            embed1 = discord.Embed(description='Forward!Using A after 236A')
            embed1.title = "Air Persia Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b5/BBCS_Platinum_AirPersiaA.png')			
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            embed2 = discord.Embed(description='Straight down!Using B after 236A')
            embed2.title = "Air Persia Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/2/25/BBCS_Platinum_AirPersiaB.png')
			
            embed3 = discord.Embed(description='Backward! Using C after 236A')
            embed3.title = "Air Persia Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/0/05/BBCS_Platinum_AirPersiaC.png')
			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="236b", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s2_pl(self):   
        """Mami-san, or better known in America as Heart Car. Go-to combo tool. Fatal Counters!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Mami Circular(B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8e/BBCF_Platinum_MamiCircular2.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')			
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @pl.command(name="236c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s3_pl(self):   
        """Mami-san, or better known in America as Heart Car. Go-to combo tool. Fatal Counters!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Mami Circular(C)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/22/BBCS_Platinum_MamiCircular.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')			
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="214a", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s4_pl(self):   
        """Excellent oki, catches rolls."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/dd/BBCS_Platinum_DreamSally.png')
            embed.title = "Dream Sally(A)"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="214b", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s5_pl(self):   
        """Excellent oki, catches rolls."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/dd/BBCS_Platinum_DreamSally.png')
            embed.title = "Dream Sally(B)"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="214c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s6_pl(self):   
        """Excellent oki, catches rolls."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs = headers.find('th').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/dd/BBCS_Platinum_DreamSally.png')
            embed.title = "Dream Sally(C)"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="j236c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s7_pl(self):   
        """Dawwww."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[85]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Swallow Moon"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5e/BBCS_Platinum_SwallowMoon.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					

    @pl.command(name="22c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s8_pl(self):   
        """Friendly Stalker"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[87]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b5/BBCS_Platinum_AirPersiaA.png')
            embed.title = "Falling Melody"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @pl.command(name="214d", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s9_pl(self):
        """Good for 45 degree angle anti-airing and zoning of all kinds!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[89]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            headers4 = table_body.find_all('tr')[5]
            headers5 = table_body.find_all('tr')[6]
            headers6 = table_body.find_all('tr')[7]
            info =  table_body.find_all('tr')[8]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]
            mp1 = [op1.get_text() for op1 in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()
            vrs6 = headers6.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')
            tab6 = tabulate([["Version", vrs6], ["Damage", Data6[0]], ["Guard", Data6[1]], ["Startup", Data6[2]], ["Active", Data6[3]], ["Recovery", Data6[4]], ["Frame Adv.", Data6[5]], ["Attribute", Data6[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] +"```"
            mpB = "```" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Mystique Momo"
            embed.add_field(name="Melee Item Frame Data", value=tab)
            embed.add_field(name="Magical Missile Frame Data", value=tab1)
            embed.add_field(name="Magical Missile Special Ground Frame Data", value=tab2)
            embed.add_field(name="Magical Bomb Frame Data", value=tab3)
            embed.add_field(name="Magical Bomb Special Frame Data", value=tab4)
            embed.add_field(name="Magical Dreamy Box Frame Data", value=tab5)
            embed.add_field(name="Magical Dreamy Box Special Frame Data", value=tab6)
			
            embed1 = discord.Embed()
            embed1.title = "Mystique Momo Cont."
            embed1.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Mystique Momo Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/b/b1/BBCS_Platinum_MystiqueMomo.png')
            embed2.add_field(name="AP Cont.", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @pl.command(name="41236d", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s10_pl(self):   
        """Dashing command grab! Refills current item count (or equips new one) on successful hit."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[91]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/83/BBCS_Platinum_DramaticSammy.png')
            embed.title = "Dramatic Sammy"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="28c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _s11_pl(self):   
        """Loli bait"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[93]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Happy Magicka"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d6/BBCP_Platinum_HappyMagicka1.png')
            embed.add_field(name="Catch Frame Data", value=tab)
            embed.add_field(name="Attack Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Happy Magicka"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a5/BBCP_Platinum_HappyMagicka2.png')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @pl.command(name="632146c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _dd1_pl(self):
        """(AIR OK)Invuln until the first hit, but not afterwards. Clashes with many attacks due to the amount of hits in rapid succession."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[95]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Cure Dot Typhoon"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/29/BBCS_Platinum_CureDotTyphoon.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Ground OD Frame Data", value=tab2)
            embed.add_field(name="Air OD Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @pl.command(name="236236d", pass_context=False)  # Platinum the Trinity from blazblue
    async def _dd2_pl(self):
        """Invuln during superflash, but has one frame of recovery, so using as a ghetto DP is very discouraged."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[97]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCS_Platinum_MiracleJeanne.png')
            embed.title = "Miracle Jeanne"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @pl.command(name="abcd", pass_context=False)  # Platinum the Trinity from blazblue
    async def _abcd_pl(self): 
        """Vroom, Vroom"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[99]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Angelic Blast"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e5/BBCF_Platinum_BlastAngel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @pl.command(name="236236c", pass_context=False)  # Platinum the Trinity from blazblue
    async def _astral_pl(self):   
        """STARLIGHT BREAKER"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Platinum_the_Trinity"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[101]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Shining Layered Force"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1c/BBCS_Platinum_ShiningLayeredForce.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
###################################################################################################################################################################################################
    @ni.command(name="5a", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _5a_ni(self):
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"        
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5a/BBCF_Nine_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
		
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ni.command(name="5b", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _5b_ni(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"    
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1a/BBCF_Nine_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)		
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ni.command(name="5c", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _5c_ni(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9d/BBCF_Nine_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @ni.command(name="2a", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _2a_ni(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/60/BBCF_Nine_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ni.command(name="2b", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _2b_ni(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/02/BBCF_Nine_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ni.command(name="2c", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _2c_ni(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/31/BBCF_Nine_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ni.command(name="6a", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _6a_ni(self):  
        """Main Anti-air."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()					

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/61/BBCF_Nine_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ni.command(name="6b", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _6b_ni(self):  
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0c/BBCF_Nine_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ni.command(name="6c", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _6c_ni(self):  
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6b/BBCF_Nine_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ni.command(name="4a", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _4a_ni(self):  
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "4a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/de/BBCF_Nine_4A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ni.command(name="4b", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _4b_ni(self):  
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "4b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/73/BBCF_Nine_4B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ni.command(name="4c", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _4c_ni(self):  
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "4c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/97/BBCF_Nine_4C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ni.command(name="3c", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _3c_ni(self):   
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1a/BBCF_Nine_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ni.command(name="ja", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _ja_ni(self): 
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/da/BBCF_Nine_j.A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ni.command(name="jb", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _jb_ni(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/02/BBCF_Nine_j.B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ni.command(name="jc", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _jc_ni(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"

			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/96/BBCF_Nine_j.C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ni.command(name="j2a", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _j2a_ni(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/08/BBCF_Nine_j.2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ni.command(name="j2b", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _j2b_ni(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/36/BBCF_Nine_j.2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ni.command(name="j2c", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _j2c_ni(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('li').get_text()		
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1c/BBCF_Nine_j.2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ni.command(name="es", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _es_ni(self):   
        """Everlasting Schorl"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('p').get_text() 			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')		
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Everlasting Schorl"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a5/BBCF_Nine_Shawl.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @ni.command(name="wxn", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _wxn_ni(self):   
        """Lapis Lazuli of Lamentation"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]		
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()			
            mp1 = info.find('li').get_text()	
            mp2 = [op.get_text() for op in info1.find_all('li')]
            mp3 = info1.find('p').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpC = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Lapis Lazuli of Lamentation"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c3/BBCF_Nine_LapisLazuli.png')
            embed.add_field(name="Wx1 Frame Data", value=tab)
            embed.add_field(name="Wx2 Frame Data", value=tab1)
            embed.add_field(name="Wx2 Attack Props:", value=mpA)
            embed.add_field(name="Wx3 Frame Data", value=tab2)
            embed.add_field(name="Wx3 Attack Props:", value=mpB)
            embed.add_field(name="Additional Attack Props:", value=mpC)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ni.command(name="axn", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _axn_ni(self):   
        """Emerald of Enmity"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]		
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()			
            mp1 = info.find('li').get_text()	
            mp2 = [op.get_text() for op in info1.find_all('li')]
            mp3 = info1.find('p').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            mpC = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Emerald of Enmity"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f8/BBCF_Nine_Emerald.png')
            embed.add_field(name="Ax1 Frame Data", value=tab)
            embed.add_field(name="Ax2 Frame Data", value=tab1)
            embed.add_field(name="Ax2 Attack Props:", value=mpA)
            embed.add_field(name="Ax3 Frame Data", value=tab2)
            embed.add_field(name="Ax3 Attack Props:", value=mpB)
            embed.add_field(name="Additional Attack Props:", value=mpC)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ni.command(name="fxn", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _fxn_ni(self):   
        """Coral of Catastrophe"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]		
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()			
            mp1 = info.find('li').get_text()	
            mp2 = [op.get_text() for op in info1.find_all('li')]
            mp3 = info1.find('p').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpC = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Coral of Catastrophe"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d8/BBCF_Nine_Coral.png')
            embed.add_field(name="Fx1 Frame Data", value=tab)
            embed.add_field(name="Fx2 Frame Data", value=tab1)
            embed.add_field(name="Fx2 Attack Props:", value=mpA)
            embed.add_field(name="Fx3 Frame Data", value=tab2)
            embed.add_field(name="Fx3 Attack Props:", value=mpB)
            embed.add_field(name="Additional Attack Props:", value=mpC)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ni.command(name="wa", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _wa_ni(self):   
        """Heliodor of Humility"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]				
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Heliodor of Humility"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/ce/BBCF_Nine_Heliodor.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ni.command(name="wf", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _wf_ni(self):   
        """Amethyst of Annihilation"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]				
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Amethyst of Annihilation"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/18/BBCF_Nine_Amethyst.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ni.command(name="af", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _af_ni(self):   
        """Citrine of Change"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()			
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')			
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Citrine of Change"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e3/BBCF_Nine_Citrine.png')
            embed.add_field(name="Cast Frame Data", value=tab)
            embed.add_field(name="K.M Frame Data", value=tab1)
            embed.add_field(name="R.P Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ni.command(name="wwa", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _wwa_ni(self):   
        """Celestite of the Covenant"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]				
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Celestite of the Covenant"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c6/BBCF_Nine_Celestite.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @ni.command(name="wwf", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _wwf_ni(self):   
        """Taaffeite of Temptation"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]				
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Taaffeite of Temptation"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/85/BBCF_Nine_Taafeite.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ni.command(name="aaw", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _aaw_ni(self):   
        """Andradite of Accord"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]				
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Andradite of Accord"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0c/BBCF_Nine_Andradite.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ni.command(name="aaf", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _aaf_ni(self):   
        """Uvarovite of Undoing"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]				
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Uvarovite of Undoing"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCF_Nine_Uvarovite_of_Destruction.jpg')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ni.command(name="ffw", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _ffw_ni(self):   
        """Kunzite of Keep Breaker"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]				
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```"
			
            embed = discord.Embed(description='Also goes by Rock of Guard Breaking')
            embed.title = "Kunzite of Keep Breaker"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/12/BBCF_Nine_Kunzite.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ni.command(name="ffa", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _ffa_ni(self):   
        """Morganite of Malice"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]				
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Morganite of Malice"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCF_Nine_Morganite.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ni.command(name="waf", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _waf_ni(self):   
        """Nephirite of Nullification"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]				
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Nephirite of Nullification"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fb/BBCF_Nine_Nephirite.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ni.command(name="ft", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _ft_ni(self):   
        """Forward Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/80/BBCF_Nine_GroundThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ni.command(name="bt", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _bt_ni(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/80/BBCF_Nine_GroundThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ni.command(name="at", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _at_ni(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/be/BBCF_Nine_AirThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ni.command(name="ca", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _ca_ni(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/00/BBCF_Nine_CounterAssalut.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ni.command(name="ct", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _ct_ni(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/36/BBCF_Nine_CrushTrigger.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ni.command(name="214a", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _s1_ni(self):   
        """(AIR OK) KAMAKAZI"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [op.get_text() for op in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Crimson Raider"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/eb/BBCF_Nine_CrimsonRaider.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')			
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ni.command(name="214b", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _s2_ni(self):   
        """Anti-Air special"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Mauvette Roar"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCF_Nine_MauvetteRoar.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ni.command(name="214c", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _s3_ni(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Navy Pressure"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e7/BBCF_Nine_NavyPressure.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ni.command(name="236d", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _s4_ni(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/81/BBCF_Nine_SeaMossGate.png')
            embed.title = "Seamoss Gate"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ni.command(name="214d", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _s5_ni(self):   
        """(AIR Ok)The DP of DPs"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[85]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='Air OK')
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0c/BBCF_Nine_FluxNurture.png')
            embed.title = "Flax Nurture"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ni.command(name="236236a", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _dd1_ni(self):
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[87]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Flame Punisher"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2c/BBCF_Nine_FlamePunisher.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ni.command(name="236236b", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _dd2_ni(self):
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[89]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[2]
            info1 =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [op.get_text() for op in info1.find_all('li')]
            mp3 = info1.find('p').get_text()
            mp1 = info.find('li').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            mpC = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Cardinal Nova"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/30/BBCF_Nine_CardinalNova.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
            embed.add_field(name="Additional Info:", value=mpC, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")						

    @ni.command(name="236236c", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _dd3_ni(self):
        """Reverse Witch Hunt?"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[91]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Azurite Inferno"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/37/BBCF_Nine_AzuriteInferno.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ni.command(name="abcd", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _abcd_ni(self): 
        """Need a hand?"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[93]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Scarlet Vein"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/01/BBCF_Nine_ScarletVein.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ni.command(name="236236d", pass_context=False)  # Nine The Phantom(Magic Gorilla) from blazblue
    async def _astral_ni(self):   
        """OVERKILL.... KILLL...KILLLLLLL"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Nine_the_Phantom"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[95]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Colorless Void"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/34/BBCF_Nine_ColorlessVoid.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
###################################################################################################################################################################################################
    @na.command(name="5a", pass_context=False)  # Naoto from blazblue
    async def _5a_na(self):
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            my_table1 = table[3]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp4 = info1.find('p').get_text()
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp5 = [aba.get('href') for aba in info.find_all('a')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "```" 
            mpAA = "```" + "*" + mp1[3] + "\n" + "*" + mp2[2] + "\n" + "Title Links to Example Video" + "```" 
            mpAAA = "```" + "*" + mp2[4] + "\n" + "Title Links to Example Video" + "```" 
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"  			
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ac/BBCF_Naoto_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Surprisingly an amazing starter')
            embed1.title = "5aa"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCF_Naoto_5AA.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            embed2 = discord.Embed(description='Optimal 5A BnBs')
            embed2.title = "Bread and Butter."
            embed2.url = mp5[0]
            embed2.add_field(name="Attack Props:", value=mpAA)
			
            embed3 = discord.Embed(description='Crounching Confirm BnBs')
            embed3.title = "Bread and Butter Cont."
            embed3.url = mp5[1]
            embed3.add_field(name="Attack Props:", value=mpAAA)
		
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)           
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @na.command(name="5b", pass_context=False)  # Naoto from blazblue
    async def _5b_na(self):   
        """Sweet Chin Music"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [op.get_text() for op in info.find_all('p')]
            mp1 = info.find('li').get_text()
            mp3 = [aba.get('href') for aba in info.find_all('a')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "```" 
            mpB = "```" + "*" + mp2[2] + "\n" + "Title Links to Example Video" + "```" 
            mpC = "```" + "*" + mp2[4] + "\n" + "Title Links to Example Video" + "```"  
            mpD = "```" + "*" + mp2[6] + "\n" + "Title Links to Example Video" + "```"   
            mpE = "```" + "*" + mp2[8] + "\n" + "Title Links to Example Video" + "```"  			
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/56/BBCF_Naoto_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Mid Screen BnBs')
            embed1.title = "Bread and Butter"
            embed1.url = mp3[0]
            embed1.add_field(name="Attack Props:", value=mpB)
			
            embed2 = discord.Embed(description='Mid Screen Enhanced BnBs')
            embed2.title = "Bread and Butter Cont."
            embed2.url = mp3[1]
            embed2.add_field(name="Attack Props:", value=mpC)
			
            embed3 = discord.Embed(description='Mid Screen OD BnBs')
            embed3.title = "Bread and Butter Cont."
            embed3.url = mp3[2]
            embed3.add_field(name="Attack Props:", value=mpD)
			
            embed4 = discord.Embed(description='Corner BnBs')
            embed4.title = "Bread and Butter Cont."
            embed4.url = mp3[3]
            embed4.add_field(name="Attack Props:", value=mpE)
			
            await self.bot.say(embed=embed)	
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)				
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @na.command(name="5c", pass_context=False)  # Naoto from blazblue
    async def _5c_na(self): 
        """Pretty decent neutral tool."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ec/BBCF_Naoto_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @na.command(name="2a", pass_context=False)  # Naoto from blazblue
    async def _2a_na(self):   
        """ITS A LOW!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f5/BBCF_Naoto_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @na.command(name="2b", pass_context=False)  # Naoto from blazblue
    async def _2b_na(self): 
        """Another Good Low"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/86/BBCF_Naoto_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @na.command(name="2c", pass_context=False)  # Naoto from blazblue
    async def _2c_na(self):   
        """Anti-air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/79/BBCF_Naoto_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @na.command(name="6a", pass_context=False)  # Naoto from blazblue
    async def _6a_na(self):  
        """Use this to dunk on people's heads."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/70/BBCF_Naoto_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @na.command(name="6b", pass_context=False)  # Naoto from blazblue
    async def _6b_na(self):  
        """No Low/Throw Zone"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f6/BBCF_Naoto_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @na.command(name="6c", pass_context=False)  # Naoto from blazblue
    async def _6c_na(self):  
        """CRACKSHOO- I mean..It is"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/14/BBCF_Naoto_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @na.command(name="3c", pass_context=False)  # Naoto from blazblue
    async def _3c_na(self):   
        """Sweep. Dont get hit by Dash Sweep"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f0/BBCF_Naoto_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @na.command(name="ja", pass_context=False)  # Naoto from blazblue
    async def _ja_na(self): 
        """Air to Air"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/30/BBCF_Naoto_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @na.command(name="jb", pass_context=False)  # Naoto from blazblue
    async def _jb_na(self):   
        """The New Shoto kick"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/46/BBCF_Naoto_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @na.command(name="jc", pass_context=False)  # Naoto from blazblue
    async def _jc_na(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"

			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/53/BBCF_Naoto_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @na.command(name="5d", pass_context=False)  # Naoto from blazblue
    async def _5d_na(self):   
        """Blood Sword and Blood Sword that Guard Breaks (Charged)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]			
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = [po.get_text() for po in info.find_all('p')]	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')	
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp2[3] + "```"
            mpC = "```" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp1[8] + "\n" + "*" + mp2[6] + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Uncharged Attack Props:", value=mpA)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Charged Attack Props:", value=mpB)
			
            embed1 = discord.Embed()
            embed1.title = "OD 5D"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/9c/BBCF_Naoto_5D.png')
            embed1.add_field(name="Uncharged Frame Data", value=tab2)
            embed1.add_field(name="Charged Frame Data", value=tab3)
            embed1.add_field(name="Charged Attack Props:", value=mpC)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @na.command(name="2d", pass_context=False)  # Naoto from blazblue
    async def _2d_na(self):   
        """Low Blood Sword with a small hurtbox"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]			
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')	
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/78/BBCF_Naoto_2D.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="OD Uncharged Frame Data", value=tab2)
            embed.add_field(name="OD Charged Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @na.command(name="6d", pass_context=False)  # Naoto from blazblue
    async def _6d_na(self):   
        """Dont. Get. Hit"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]			
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')	
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/67/BBCF_Naoto_6D.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="OD Uncharged Frame Data", value=tab2)
            embed.add_field(name="OD Charged Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @na.command(name="jd", pass_context=False)  # Naoto from blazblue
    async def _jd_na(self):   
        """Jumping blood sword and "This is my Area" Sword"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]			
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')	
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9b/BBCF_Naoto_jD.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="OD Uncharged Frame Data", value=tab2)
            embed.add_field(name="OD Charged Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @na.command(name="ft", pass_context=False)  # Naoto from blazblue
    async def _ft_na(self):   
        """Forward Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fa/BBCF_Naoto_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @na.command(name="bt", pass_context=False)  # Naoto from blazblue
    async def _bt_na(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/31/BBCF_Naoto_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @na.command(name="at", pass_context=False)  # Naoto from blazblue
    async def _at_na(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[5]
            info =  table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/11/BBCF_Naoto_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @na.command(name="ca", pass_context=False)  # Naoto from blazblue
    async def _ca_na(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ec/BBCF_Naoto_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @na.command(name="ct", pass_context=False)  # Naoto from blazblue
    async def _ct_na(self):   
        """Crush Trigger: HOL UP! DAB"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/98/BBCF_Naoto_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @bf.command(name="236b", pass_context=False)  # Naoto from blazblue
    async def _bf1_na(self):   
        """Rekka. Has more strict inputs than a college professor."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            mp2 = [po.get_text() for po in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" +  mp1[1] + "\n" + "*" + mp1[2] + "\n" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='Rekka. Has more strict inputs than a college professor.')
            embed.title = "Banishing Fang"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4a/BBCF_Naoto_BanishingFang.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')				
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")

    @bf.command(name="roar", pass_context=False)  # Naoto from blazblue
    async def _bf2_na(self):   
        """236B after Banishing Fang: Deceptive Hitbox"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table1 = table[45]
            table_body1 = my_table1.find("table")
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
			
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp3 = info1.find('li').get_text()
            mp4 = info1.find('p').get_text()
            vrs = headers1.find('th').get_text()
            vrs1 = headers2.find('th').get_text()

            tab1 = tabulate([["Version", vrs], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs1], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"

            embed1 = discord.Embed(description='236B after Banishing Fang')
            embed1.title = "Banishing Fang: Roar"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/5/52/BBCF_Naoto_BanishingFangRoar.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Enhanced Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Deceptive Hitbox')			
			
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")

    @bf.command(name="bash", pass_context=False)  # Naoto from blazblue
    async def _bf3_na(self):   
        """Rekka. Has more strict inputs than a college professor."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table2 = table[47]
            table_body2 = my_table2.find("table")
            headers3 = table_body2.find_all('tr')[1]
            info2 =  table_body2.find_all('tr')[2]
            headers4 = table_body2.find_all('tr')[3]
            info3 =  table_body2.find_all('tr')[4]
			
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            mp5 = info2.find('li').get_text()
            mp6 = info2.find('p').get_text()
            mp7 = [op1.get_text() for op1 in info3.find_all('li')]
            mp8 = info3.find('p').get_text()
            vrs2 = headers3.find('th').get_text()
            vrs3 = headers4.find('th').get_text()

            tab3 = tabulate([["Version", vrs2], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs3], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            mpC = "```" + "*" + mp5 + "\n" + "*" + mp6 + "```"
            mpD = "```" + "*" + mp7[0] + "\n" + "*" + mp7[1] + "\n" + "*" + mp8 + "```"

            embed2 = discord.Embed(description='236B after Banishing Fang: Roar')
            embed2.title = "Banishing Fang: Bash"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/e/e7/BBCF_Naoto_BanishingFangBash.png')
            embed2.add_field(name="Frame Data", value=tab3)
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')
            embed2.add_field(name="Enhanced Frame Data", value=tab4)
            embed2.add_field(name="Enhanced Attack Props:", value=mpD, inline='true')
            embed2.set_footer(text='Normal rekka ender, Dont get Fataled By this')			
			
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	

    @bf.command(name="raid", pass_context=False)  # Naoto from blazblue
    async def _bf4_na(self):   
        """Rekka. Has more strict inputs than a college professor."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table3 = table[49]
            table_body3 = my_table3.find("table")
            headers5 = table_body3.find_all('tr')[1]
            info4 =  table_body3.find_all('tr')[2]
			
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            mp9 = info4.find('p').get_text()

            tab5 = tabulate([["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')
            mpE = "```" + "*" + mp9 + "```"

            embed3 = discord.Embed(description='236C after Banishing Fang: Roar')
            embed3.title = "Banishing Fang: Raid"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/8/8f/BBCF_Naoto_BanishingFangRaid.png')
            embed3.add_field(name="Frame Data", value=tab5)
            embed3.add_field(name="Attack Props:", value=mpE, inline='true')	
            embed3.set_footer(text='Alternate rekka ender')				
			
            await self.bot.say(embed=embed3)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @na.command(name="623c", pass_context=False)  # Naoto from blazblue
    async def _s2_na(self):   
        """Very, very solid DP. Not Inferno Divider, though."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            my_table1 = table[53]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [op.get_text() for op in info.find_all('p')]
            mp3 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Inferno Crusader(C)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/16/BBCF_Naoto_InfernoCrusader_D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Enhanced Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='2C after Inferno Crusader')
            embed1.title = "Overhead Kick"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/97/BBCF_Naoto_OverheadKick.png')
            embed1.add_field(name="Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='I Knocc em Down')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @na.command(name="623d", pass_context=False)  # Naoto from blazblue
    async def _s3_na(self):   
        """Very, very solid DP. Not Inferno Divider, though."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            my_table1 = table[53]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[4]
            headers1 = table_body.find_all('tr')[5]
            info =  table_body.find_all('tr')[6]
            headers2 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp2 = [op.get_text() for op in info.find_all('p')]
            mp1 = info.find('li').get_text()
            mp3 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Inferno Crusader(D)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/16/BBCF_Naoto_InfernoCrusader_D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Enhanced Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='2C after Inferno Crusader')
            embed1.title = "Overhead Kick"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/97/BBCF_Naoto_OverheadKick.png')
            embed1.add_field(name="Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='I Knocc em Down')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @na.command(name="214d", pass_context=False)  # Naoto from blazblue
    async def _s4_na(self):   
        """S P A C I N G"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b9/BBCF_Naoto_SlashKaid.png')
            embed.title = "Slash Kaid"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Enhanced Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @na.command(name="214a", pass_context=False)  # Naoto from blazblue
    async def _s5_na(self):   
        """Is that a Jojo's Reference?"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            my_table1 = table[59]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Shift Sway"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c0/BBCF_Naoto_ShiftSway.png')
            embed.add_field(name="Frame Data", value=tab)
			
            embed1 = discord.Embed()
            embed1.title = "Shift Sway Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/37/BBCF_Naoto_ShiftSwayEnhanced.png')
            embed.add_field(name="Enhanced Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed2 = discord.Embed(description='8A after Shift Sway')
            embed2.title = "Phantom Pain"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/3/3a/BBCF_Naoto_PhantomPain.png')
            embed2.add_field(name="Frame Data", value=tab2)
            embed2.add_field(name="Attack Props:", value=mpB, inline='true')
            embed2.set_footer(text='Please Dont jump or stand')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @na.command(name="632146b", pass_context=False)  # Naoto from blazblue
    async def _dd1_na(self):
        """Rock Howard would be proud"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
            headers3 = table_body.find_all('tr')[5]
            headers4 = table_body.find_all('tr')[6]
            info1 =  table_body.find_all('tr')[7]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp3 = info1.find('li').get_text()
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Divine Smasher"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/95/BBCF_Naoto_DivineSmasher.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Enhanced Frame Data", value=tab1)
            embed.add_field(name="OD Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            embed1 = discord.Embed()
            embed1.title = "Air Divine Smasher"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/0/00/BBCF_Naoto_DivineSmasher2.png')
            embed1.add_field(name="Frame Data", value=tab3)
            embed1.add_field(name="OD Frame Data", value=tab4)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @na.command(name="632146d", pass_context=False)  # Naoto from blazblue
    async def _dd2_na(self):
        """Pictured: First part of the move"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body.find_all('tr')[4]
            headers3 = table_body.find_all('tr')[5]
            info1 =  table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp3 = info1.find('li').get_text()
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Divine Reaper"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Projectile Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            embed1 = discord.Embed()
            embed1.title = "OverDrive Divine Reaper"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/35/BBCF_Naoto_DivineReaper.png')
            embed1.add_field(name="Frame Data", value=tab2)
            embed1.add_field(name="Projectile Frame Data", value=tab3)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")						
			
    @na.command(name="abcd", pass_context=False)  # Naoto from blazblue
    async def _abcd_na(self): 
        """Cool Move, Whack Knockdown"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Grim of Phantom (G.O.P)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/49/BBCF_Naoto_GrimOfPhantom.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @na.command(name="2141236c", pass_context=False)  # Naoto from blazblue
    async def _astral_na(self):   
        """-LITERALLY- Black Onslaught"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Naoto_Kurogane"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Edge of Eternity"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/53/BBCF_Naoto_EdgeoOfEternity.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
###################################################################################################################################################################################################
    @ma.command(name="5a", pass_context=False)  # Makoto from blazblue
    async def _5a_ma(self):
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [op.get_text() for op in info.find_all('li')]
            mp1 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 			
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/30/BBCS_Makoto_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
		
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ma.command(name="5b", pass_context=False)  # Makoto from blazblue
    async def _5b_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp2[0] + "\n" + "\n" + mp1[1] + "\n" + "*" + mp2[1] + "```" 
			
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2b/BBCS_Makoto_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)		
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ma.command(name="5c", pass_context=False)  # Makoto from blazblue
    async def _5c_ma(self): 
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            my_table1 = table[7]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info1.find('p').get_text()
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/54/BBCS_Makoto_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5cc"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/5/57/BBCS_Makoto_5CC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @ma.command(name="2a", pass_context=False)  # Makoto from blazblue
    async def _2a_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/11/BBCS_Makoto_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ma.command(name="2b", pass_context=False)  # Makoto from blazblue
    async def _2b_ma(self): 
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e5/BBCS_Makoto_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ma.command(name="2c", pass_context=False)  # Makoto from blazblue
    async def _2c_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp2[0] + "\n" + mp2[1] + "\n" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fd/BBCS_Makoto_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ma.command(name="6a", pass_context=False)  # Makoto from blazblue
    async def _6a_ma(self):  
        """Anti-Air"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = info.find('li').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/29/BBCS_Makoto_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ma.command(name="6b", pass_context=False)  # Makoto from blazblue
    async def _6b_ma(self):  
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            my_table1 = table[19]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp3 = info1.find('p').get_text()
            mp2 = info.find('li').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + mp1[1] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/06/BBCS_Makoto_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6b > C"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/5/57/BBCS_Makoto_5CC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ma.command(name="6c", pass_context=False)  # Makoto from blazblue
    async def _6c_ma(self):  
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3d/BBCS_Makoto_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ma.command(name="3c", pass_context=False)  # Makoto from blazblue
    async def _3c_ma(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [op.get_text() for op in info.find_all('li')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
            mpB = "```" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Feint Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "3c Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/8a/BBCS_Makoto_3C.png')
            embed1.add_field(name="AP Cont.", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ma.command(name="ja", pass_context=False)  # Makoto from blazblue
    async def _ja_ma(self): 
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCS_Makoto_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ma.command(name="jb", pass_context=False)  # Makoto from blazblue
    async def _jb_ma(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c1/BBCS_Makoto_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ma.command(name="jc", pass_context=False)  # Makoto from blazblue
    async def _jc_ma(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            my_table1 = table[31]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/71/BBCS_Makoto_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "J.CC"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/fb/BBCS_Makoto_jCC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ma.command(name="j2c", pass_context=False)  # Makoto from blazblue
    async def _j2c_ma(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0e/BBCS_Makoto_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")						
			
    @ma.command(name="5d", pass_context=False)  # Makoto from blazblue
    async def _5d_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]			
            mp2 = info.find('li').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')	
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0e/BBCS_Makoto_5D.png')
            embed.add_field(name="Lv.1 Frame Data", value=tab)
            embed.add_field(name="Lv.2 Frame Data", value=tab1)
            embed.add_field(name="Lv.3 Frame Data", value=tab2)
            embed.add_field(name="Lv.G Frame Data", value=tab3)
            embed.add_field(name="Charged Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ma.command(name="2d", pass_context=False)  # Makoto from blazblue
    async def _2d_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]			
            mp2 = info.find('li').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')	
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/43/BBCS_Makoto_2D.png')
            embed.add_field(name="Lv.1 Frame Data", value=tab)
            embed.add_field(name="Lv.2 Frame Data", value=tab1)
            embed.add_field(name="Lv.3 Frame Data", value=tab2)
            embed.add_field(name="Lv.G Frame Data", value=tab3)
            embed.add_field(name="Charged Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ma.command(name="jd", pass_context=False)  # Makoto from blazblue
    async def _jd_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]			
            mp2 = info.find('li').get_text()
            mp1 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')	
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')				
            mpA = "```" + "*" + mp1[0] + "\n" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/78/BBCS_Makoto_jD.png')
            embed.add_field(name="Lv.1 Frame Data", value=tab)
            embed.add_field(name="Lv.2 Frame Data", value=tab1)
            embed.add_field(name="Lv.3 Frame Data", value=tab2)
            embed.add_field(name="Lv.G Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ma.command(name="ft", pass_context=False)  # Makoto from blazblue
    async def _ft_ma(self):   
        """Forward Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/31/BBCS_Makoto_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ma.command(name="bt", pass_context=False)  # Makoto from blazblue
    async def _bt_ma(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/59/BBCS_Makoto_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ma.command(name="at", pass_context=False)  # Makoto from blazblue
    async def _at_ma(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()


            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/04/BBCS_Makoto_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ma.command(name="ca", pass_context=False)  # Makoto from blazblue
    async def _ca_ma(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3d/BBCS_Makoto_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ma.command(name="ct", pass_context=False)  # Makoto from blazblue
    async def _ct_ma(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b7/BBCP_Makoto_CrushTrigger1.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ma.command(name="236a", pass_context=False)  # Makoto from blazblue
    async def _s1_ma(self):   
        """Projectile."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            my_table1 = table[53]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            headers3 = table_body1.find_all('tr')[3]
            headers4 = table_body1.find_all('tr')[4]
            info1 =  table_body1.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            mp2 = [po.get_text() for po in info.find_all('li')]
            mp3 = [op1.get_text() for op1 in info1.find_all('p')]
            vrs = headers1.find('th').get_text()
            vrs1 = headers2.find('th').get_text()
            vrs2 = headers3.find('th').get_text()
            vrs3 = headers4.find('th').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs1], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs2], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs3], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" +  mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Comet Cannon"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ef/BBCS_Makoto_CometCannon.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed(description='D during Comet Cannon')
            embed1.title = "Break Shot"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/e9/BBCS_Makoto_BreakShot.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab1)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab2)
            embed1.add_field(name="Lv. 3 Frame Data", value=tab3)
            embed1.add_field(name="Lv. G Frame Data", value=tab4)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Projectile.')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ma.command(name="623c", pass_context=False)  # Makoto from blazblue
    async def _s2_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            my_table1 = table[57]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            headers3 = table_body1.find_all('tr')[3]
            headers4 = table_body1.find_all('tr')[4]
            info1 =  table_body1.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            mp2 = [op1.get_text() for op1 in info1.find_all('p')]
            vrs = headers1.find('th').get_text()
            vrs1 = headers2.find('th').get_text()
            vrs2 = headers3.find('th').get_text()
            vrs3 = headers4.find('th').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs1], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs2], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs3], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Corona Upper"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1f/BBCS_Makoto_CoronaUpper.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='D during Corona Upper')
            embed1.title = "Meteor Dive"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/60/BBCS_Makoto_MeteorDive.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab1)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab2)
            embed1.add_field(name="Lv. 3 Frame Data", value=tab3)
            embed1.add_field(name="OD Frame Data", value=tab4)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ma.command(name="j623c", pass_context=False)  # Makoto from blazblue
    async def _s3_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            my_table1 = table[61]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            headers3 = table_body1.find_all('tr')[3]
            headers4 = table_body1.find_all('tr')[4]
            info1 =  table_body1.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers1.find('th').get_text()
            vrs1 = headers2.find('th').get_text()
            vrs2 = headers3.find('th').get_text()
            vrs3 = headers4.find('th').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs1], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs2], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs3], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Corona Upper(Air)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1f/BBCS_Makoto_CoronaUpper.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='D during Corona Upper')
            embed1.title = "Meteor Dive"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/60/BBCS_Makoto_MeteorDive.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab1)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab2)
            embed1.add_field(name="Lv. 3 Frame Data", value=tab3)
            embed1.add_field(name="Lv. G Frame Data", value=tab4)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ma.command(name="214d", pass_context=False)  # Makoto from blazblue
    async def _s4_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            headers2 = table_body.find_all('tr')[4]
            headers3 = table_body.find_all('tr')[5]
            headers4 = table_body.find_all('tr')[6]
            headers5 = table_body.find_all('tr')[7]
            info =  table_body.find_all('tr')[2]
            info1 =  table_body.find_all('tr')[8]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [op.get_text() for op in info1.find_all('li')]
            mp3 = [po.get_text() for po in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed()
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/ce/BBCS_Makoto_SpaceCounter.png')
            embed.title = "Space Counter"
            embed.add_field(name="Parry Frame Data", value=tab)
            embed.add_field(name="Parry Props:", value=mpA, inline='true')
            embed.add_field(name="Catch Frame Data", value=tab1)
            embed.add_field(name="Lv. 1 Frame Data", value=tab2)
            embed.add_field(name="Lv. 2 Frame Data", value=tab3)
            embed.add_field(name="Lv. 3 Frame Data", value=tab4)
            embed.add_field(name="OD Frame Data", value=tab5)
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @asteroidA.command(name="a", pass_context=False)  # Makoto from blazblue
    async def _s5_ma(self):   
        """A after Asteroid Vision A: Break"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            my_table1 = table[67]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[4]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp3 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp2[0] + "\n" + mp2[1] + "\n" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Asteroid Vision(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Makoto_AsteroidVision.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='A after Asteroid Vision A')
            embed1.title = "Break"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/4b/BBCS_Makoto_Break.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @asteroidA.command(name="b", pass_context=False)  # Makoto from blazblue
    async def _s6_ma(self):   
        """B after Asteroid Vision A: Eclipse Turn"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            my_table1 = table[69]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[4]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp3 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp2[0] + "\n" + mp2[1] + "\n" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Asteroid Vision(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Makoto_AsteroidVision.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Eclipse Turn"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/e8/BBCS_Makoto_Turn.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		 

    @asteroidA.command(name="c", pass_context=False)  # Makoto from blazblue
    async def _s7_ma(self):   
        """C after Asteroid Vision A: Rush"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            my_table1 = table[71]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[4]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp3 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp2[0] + "\n" + mp2[1] + "\n" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + mp3[2] + "\n" + mp3[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Asteroid Vision(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Makoto_AsteroidVision.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Rush"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Makoto_InfiniteRush.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @asteroidA.command(name="d", pass_context=False)  # Makoto from blazblue
    async def _s8_ma(self):   
        """D after Asteroid Vision A: Cosmic Ray"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            my_table1 = table[73]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[4]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            headers3 = table_body1.find_all('tr')[3]
            headers4 = table_body1.find_all('tr')[4]
            info1 =  table_body1.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp3 = [po1.get_text() for po1 in info1.find_all('p')]
            mp4 = info1.find('li').get_text()
            mp5 = info1.find('pre').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp2[0] + "\n" + mp2[1] + "\n" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + mp3[1] + "\n" + mp4 + "\n" + "*" + mp5 + "```"
			
            embed = discord.Embed()
            embed.title = "Asteroid Vision(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Makoto_AsteroidVision.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Cosmic Ray"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/c6/BBCP_Makoto_CosmicRay1.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab1)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab2)
            embed1.add_field(name="Lv. 3 Frame Data", value=tab3)
            embed1.add_field(name="Lv. G Frame Data", value=tab4)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @rush.command(name="a", pass_context=False)  # Makoto from blazblue
    async def _s9_ma(self):   
        """A after Rush:  Mars Chopper"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            my_table1 = table[75]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + mp2[1] + "\n" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "```"
			
            embed = discord.Embed(description='C after Asteroid Vision A')
            embed.title = "Rush"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Makoto_InfiniteRush.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Mars Chopper"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/78/BBCS_Makoto_MarsChopper.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @rush.command(name="b", pass_context=False)  # Makoto from blazblue
    async def _s10_ma(self):   
        """B after Rush: Stargazer"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            my_table1 = table[77]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + mp2[1] + "\n" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed(description='C after Asteroid Vision A')
            embed.title = "Rush"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Makoto_InfiniteRush.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Stargazer"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/2/27/BBCS_Makoto_StarGazer.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @rush.command(name="c", pass_context=False)  # Makoto from blazblue
    async def _s11_ma(self):   
        """CCCCC after Rush: Infinite Rush"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            my_table1 = table[79]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='C after Asteroid Vision A')
            embed.title = "Rush"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Makoto_InfiniteRush.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Infinite Rush"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Makoto_InfiniteRush.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @rush.command(name="d", pass_context=False)  # Makoto from blazblue
    async def _s12_ma(self):   
        """D after Rush: Lander Blow"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            my_table1 = table[81]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            headers3 = table_body1.find_all('tr')[3]
            headers4 = table_body1.find_all('tr')[4]
            info1 =  table_body1.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('li')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp4 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers1.find('th').get_text()
            vrs1 = headers2.find('th').get_text()
            vrs2 = headers3.find('th').get_text()
            vrs3 = headers4.find('th').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs1], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs2], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs3], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "\n" + mp4[2] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + mp3[3] + "```"
			
            embed = discord.Embed(description='C after Asteroid Vision A')
            embed.title = "Rush"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCS_Makoto_InfiniteRush.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Lander Blow"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCP_Makoto_LanderBlow1.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab1)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab2)
            embed1.add_field(name="Lv. 3 Frame Data", value=tab3)
            embed1.add_field(name="Lv. G Frame Data", value=tab4)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ma.command(name="214b", pass_context=False)  # Makoto from blazblue
    async def _s13_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            my_table1 = table[83]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[4]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            headers3 = table_body1.find_all('tr')[3]
            headers4 = table_body1.find_all('tr')[4]
            info1 =  table_body1.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [op.get_text() for op in info.find_all('li')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Asteroid Vision(B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Makoto_AsteroidVision.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='D after Asteroid Vision B')
            embed1.title = "Lightning Arrow"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/60/BBCS_Makoto_MeteorDive.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab1)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab2)
            embed1.add_field(name="Lv. 3 Frame Data", value=tab3)
            embed1.add_field(name="Lv. G Frame Data", value=tab4)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
				
    @ma.command(name="214c", pass_context=False)  # Makoto from blazblue
    async def _s14_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            my_table1 = table[83]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            headers3 = table_body1.find_all('tr')[3]
            headers4 = table_body1.find_all('tr')[4]
            info1 =  table_body1.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [op.get_text() for op in info.find_all('li')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Asteroid Vision(C)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Makoto_AsteroidVision.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='D after Asteroid Vision C')
            embed1.title = "Lightning Arrow"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/60/BBCS_Makoto_MeteorDive.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab1)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab2)
            embed1.add_field(name="Lv. 3 Frame Data", value=tab3)
            embed1.add_field(name="Lv. G Frame Data", value=tab4)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ma.command(name="236b", pass_context=False)  # Makoto from blazblue
    async def _s15_ma(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[85]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp2[0] + "\n" + mp2[1] + "\n" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Shooting Star"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b6/BBCS_Makoto_ShootingStar.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ma.command(name="41236c", pass_context=False)  # Makoto from blazblue
    async def _s16_ma(self):   
        """AHH YOU OKAY!?"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[87]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Sirius Jolt"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/28/BBCF_Makoto_SiriusJolt.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ma.command(name="632146d", pass_context=False)  # Makoto from blazblue
    async def _dd1_ma(self):
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[89]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Big Bang Smash"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8a/BBCS_Makoto_BigBangSmash.png')
            embed.add_field(name="Lv. 1 Frame Data", value=tab)
            embed.add_field(name="Lv. 2 Frame Data", value=tab1)
            embed.add_field(name="Lv. 3 Frame Data", value=tab2)
            embed.add_field(name="Lv. G Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ma.command(name="236236d", pass_context=False)  # Makoto from blazblue
    async def _dd2_ma(self):
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[91]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            headers4 = table_body.find_all('tr')[5]
            headers5 = table_body.find_all('tr')[6]
            headers6 = table_body.find_all('tr')[7]
            headers7 = table_body.find_all('tr')[8]
            headers8 = table_body.find_all('tr')[9]
            headers9 = table_body.find_all('tr')[10]
            headers10 = table_body.find_all('tr')[11]
            headers11 = table_body.find_all('tr')[12]
            info =  table_body.find_all('tr')[13]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            Data6 = [head6.get_text() for head6 in headers6.find_all('td')]
            Data7 = [head7.get_text() for head7 in headers7.find_all('td')]
            Data8 = [head8.get_text() for head8 in headers8.find_all('td')]
            Data9 = [head9.get_text() for head9 in headers9.find_all('td')]
            Data10 = [head10.get_text() for head10 in headers10.find_all('td')]
            Data11 = [head11.get_text() for head11 in headers11.find_all('td')]
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()
            vrs6 = headers6.find('th').get_text()
            vrs7 = headers7.find('th').get_text()
            vrs8 = headers8.find('th').get_text()
            vrs9 = headers9.find('th').get_text()
            vrs10 = headers10.find('th').get_text()
            vrs11 = headers11.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')
            tab6 = tabulate([["Version", vrs6], ["Damage", Data6[0]], ["Guard", Data6[1]], ["Startup", Data6[2]], ["Active", Data6[3]], ["Recovery", Data6[4]], ["Frame Adv.", Data6[5]], ["Attribute", Data6[6]]], tablefmt='simple', stralign='left')
            tab7 = tabulate([["Version", vrs7], ["Damage", Data7[0]], ["Guard", Data7[1]], ["Startup", Data7[2]], ["Active", Data7[3]], ["Recovery", Data7[4]], ["Frame Adv.", Data7[5]], ["Attribute", Data7[6]]], tablefmt='simple', stralign='left')
            tab8 = tabulate([["Version", vrs8], ["Damage", Data8[0]], ["Guard", Data8[1]], ["Startup", Data8[2]], ["Active", Data8[3]], ["Recovery", Data8[4]], ["Frame Adv.", Data8[5]], ["Attribute", Data8[6]]], tablefmt='simple', stralign='left')
            tab9 = tabulate([["Version", vrs9], ["Damage", Data9[0]], ["Guard", Data9[1]], ["Startup", Data9[2]], ["Active", Data9[3]], ["Recovery", Data9[4]], ["Frame Adv.", Data9[5]], ["Attribute", Data9[6]]], tablefmt='simple', stralign='left')
            tab10 = tabulate([["Version", vrs10], ["Damage", Data10[0]], ["Guard", Data10[1]], ["Startup", Data10[2]], ["Active", Data10[3]], ["Recovery", Data10[4]], ["Frame Adv.", Data10[5]], ["Attribute", Data10[6]]], tablefmt='simple', stralign='left')
            tab11 = tabulate([["Version", vrs11], ["Damage", Data11[0]], ["Guard", Data11[1]], ["Startup", Data11[2]], ["Active", Data11[3]], ["Recovery", Data11[4]], ["Frame Adv.", Data11[5]], ["Attribute", Data11[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Particle Flare"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/08/BBCS_Makoto_ParticleFlare.png')
            embed.add_field(name="1st Hit, Level 1 Frame Data", value=tab)
            embed.add_field(name="1st Hit, Level 2 Frame Data", value=tab1)
            embed.add_field(name="1st Hit, Level 3 Frame Data", value=tab2)
            embed.add_field(name="1st Hit, Level G Frame Data", value=tab3)
            embed.add_field(name="2st Hit, Level 1 Frame Data", value=tab4)
            embed.add_field(name="2st Hit, Level 2 Frame Data", value=tab5)
            embed.add_field(name="2st Hit, Level 3 Frame Data", value=tab6)
            embed.add_field(name="2st Hit, Level G Frame Data", value=tab7)
            
            embed1 = discord.Embed()
            embed1.title = "Particle Flare Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/6c/BBCS_Makoto_ParticleFlare2.png')
            embed1.add_field(name="3rd Hit, Level 1 Frame Data", value=tab8)
            embed1.add_field(name="3rd Hit, Level 2 Frame Data", value=tab9)
            embed1.add_field(name="3rd Hit, Level 3 Frame Data", value=tab10)
            embed1.add_field(name="3st Hit, Level G Frame Data", value=tab11)
            embed1.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ma.command(name="abcd", pass_context=False)  # Makoto from blazblue
    async def _abcd_ma(self): 
        """Exceed Accel"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[93]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Cygnus Combination"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5e/BBCF_Makoto_CygnusCombination.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ma.command(name="2363214d", pass_context=False)  # Makoto from blazblue
    async def _astral_ma(self):   
        """Atatatatatatatatatata"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Makoto_Nanaya"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[95]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info = table_body.find_all('tr')[5]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Planet Crusher"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0b/BBCS_Makoto_PlanetCrusher.png')
            embed.add_field(name="Lv. 1 Frame Data", value=tab)
            embed.add_field(name="Lv. 2 Frame Data", value=tab1)
            embed.add_field(name="Lv. 3 Frame Data", value=tab2)
            embed.add_field(name="Lv. G Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Planet Crusher Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/aa/BBCS_Makoto_PlanetCrusher2.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

###################################################################################################################################################################################################
    @mai.command(name="5a", pass_context=False)  # Mai from blazblue
    async def _5a_mai(self):
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            headers2 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[6] #Character does not have anything else, JUST DEFAULT?
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = info.find('li').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 			
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ae/BBCF_Mai_5A.png')
            embed.add_field(name="5A Frame Data", value=tab)
			
            embed1 = discord.Embed()
            embed1.title = "5xA"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/8e/BBCF_Mai_5AA.png')
            embed1.add_field(name="5xA Frame Data", value=tab1)

            embed2 = discord.Embed()
            embed2.title = "5xAA"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/0/0e/BBCF_Mai_5AAA.png')
            embed2.add_field(name="5xAA Frame Data", value=tab2)
            embed2.add_field(name="5xAA Attack Props:", value=mpA, inline='true')
		
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mai.command(name="5b", pass_context=False)  # Mai from blazblue
    async def _5b_mai(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            #info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp2[0] + "\n" + mp1[1] + "\n" + "*" + mp2[1] + "```" 
			
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4b/BBCF_Mai_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5xb"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/cf/BBCF_Mai_5BB.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)				
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vh.command(name="a", pass_context=False)  # Mai from blazblue
    async def _vha_mai(self): 
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            my_table1 = table[7]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
			
            embed = discord.Embed(description='Variant Heart Stance')
            embed.title = "5x[B]"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f6/BBCF_Mai_5x%28B%29.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5x[B]A"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/72/BBCF_Mai_5x%28B%29A.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vh.command(name="c", pass_context=False)  # Mai from blazblue
    async def _vhc_mai(self): 
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            my_table1 = table[7]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
			
            embed = discord.Embed(description='Variant Heart Stance')
            embed.title = "5x[B]"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f6/BBCF_Mai_5x%28B%29.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5x[B]C"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/72/BBCF_Mai_5x%28B%29A.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vh.command(name="6a", pass_context=False)  # Mai from blazblue
    async def _vh6a_mai(self): 
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            my_table1 = table[9]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            #info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            #mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            #mpB = "```" + "*" + mp2[0] + "```"
			
            embed = discord.Embed(description='Variant Heart Stance')
            embed.title = "5x[B]"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f6/BBCF_Mai_5x%28B%29.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5x[B]6A"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/75/BBCF_Mai_5x%28B%296A.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vh.command(name="6c", pass_context=False)  # Mai from blazblue
    async def _vh6c_mai(self): 
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            my_table1 = table[9]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            #info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            #mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            #mpB = "```" + "*" + mp2[0] + "```"
			
            embed = discord.Embed(description='Variant Heart Stance')
            embed.title = "5x[B]"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f6/BBCF_Mai_5x%28B%29.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5x[B]6C"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/75/BBCF_Mai_5x%28B%296A.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vh.command(name="8a", pass_context=False)  # Mai from blazblue
    async def _vh8a_mai(self): 
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            my_table1 = table[11]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='Variant Heart Stance')
            embed.title = "5x[B]"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f6/BBCF_Mai_5x%28B%29.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5x[B]8A"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/fb/BBCF_Mai_5x%28B%298A.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @vh.command(name="8c", pass_context=False)  # Mai from blazblue
    async def _vh8c_mai(self): 
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            my_table1 = table[11]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='Variant Heart Stance')
            embed.title = "5x[B]"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f6/BBCF_Mai_5x%28B%29.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5x[B]8C"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/fb/BBCF_Mai_5x%28B%298A.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mai.command(name="5c", pass_context=False)  # Mai from blazblue
    async def _5c_mai(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            headers2 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[2]
            info1 = table_body.find_all('tr')[4]
            info2 = table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            mp3 = [op2.get_text() for op2 in info2.find_all('li')]
            mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + mp3[2] + "```" 
			
			
            embed = discord.Embed(description='1 Button Fatals')
            embed.title = "5C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/15/BBCF_Mai_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Poke of the gods')
            embed1.title = "5xC"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/1c/BBCF_Mai_5CC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed2 = discord.Embed(description='Mash C to fill combos')
            embed2.title = "5xCC"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/5/56/BBCF_Mai_5CCC.png')
            embed2.add_field(name="Frame Data", value=tab2)
            embed2.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @mai.command(name="2a", pass_context=False)  # Mai from blazblue
    async def _2a_mai(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            my_table1 = table[19]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info1.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/82/BBCF_Mai_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "2xC"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/6c/BBCF_Mai_2BC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mai.command(name="2b", pass_context=False)  # Mai from blazblue
    async def _2b_mai(self): 
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            my_table1 = table[19]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info1.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "```"
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b1/BBCF_Mai_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "2xC"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/6c/BBCF_Mai_2BC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mai.command(name="2c", pass_context=False)  # Mai from blazblue
    async def _2c_mai(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp2 = [po.get_text() for po in info.find_all('p')]
            #mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp2[0] + "\n" + mp2[1] + "\n" + "*" + mp1[0] + "\n" + "*" + mp[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/50/BBCF_Mai_2C_%282%29.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mai.command(name="5xab", pass_context=False)  # Mai from blazblue
    async def _5xAB_mai(self):  
        #"""Insert Tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            #mp1 = info.find('p').get_text()
            #mp2 = info.find('li').get_text()	
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "5xAB"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4c/BBCF_Mai_5AAB.png')
            embed.add_field(name="Strike Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
            embed.add_field(name="Shot Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mai.command(name="5xac", pass_context=False)  # Mai from blazblue
    async def _5xAC_mai(self):  
        #"""Insert Tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            #mp1 = info.find('p').get_text()
            #mp2 = info.find('li').get_text()	
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "5xAC"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4c/BBCF_Mai_5AAB.png')
            embed.add_field(name="Strike Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
            embed.add_field(name="Shot Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mai.command(name="5xca", pass_context=False)  # Mai from blazblue
    async def _5xca_mai(self):  
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]

			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
			
            embed = discord.Embed()
            embed.title = "5xCA"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cb/BBCF_Mai_5xCA.png')
            embed.add_field(name="Strike Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @mai.command(name="5xcb", pass_context=False)  # Mai from blazblue
    async def _5xcb_mai(self):  
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
			
            embed = discord.Embed()
            embed.title = "5xCB"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/60/BBCF_Mai_5xCB.png')
            embed.add_field(name="Strike Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @mai.command(name="ja", pass_context=False)  # Mai from blazblue
    async def _ja_mai(self): 
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b2/BBCF_Mai_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @mai.command(name="jb", pass_context=False)  # Mai from blazblue
    async def _jb_mai(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/95/BBCF_Mai_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @mai.command(name="jc", pass_context=False)  # Mai from blazblue
    async def _jc_mai(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/82/BBCF_Mai_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
							
    @mai.command(name="d", pass_context=False)  # Mai from blazblue
    async def _d_mai(self):   
        """Inputting 2,5, or 8 will change the spear trajectory, While charging makes it unblockable"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            my_table1 = table[37]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[4]
            headers3 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[6]
            headers4 = table_body1.find_all('tr')[1]
            info2 = table_body1.find_all('tr')[2]
            headers5 = table_body1.find_all('tr')[3]
            info3 = table_body1.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]	
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]	
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]	
            mp1 = info.find('li').get_text()			
            mp2 = info.find('p').get_text()			
            mp3 = [po.get_text() for po in info1.find_all('li')]
            mp4 = info1.find('p').get_text()
            mp5 = info2.find('p').get_text()	
            mp6 = info3.find('li').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')	
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')	
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')			
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
            mpC = "```" + "*" + mp5 + "```"
            mpD = "```" + "*" + mp6 + "```"
			
            embed = discord.Embed(description='Uncharged')
            embed.title = "Exseal"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/57/BBCF_Mai_5D.png')
            embed.add_field(name="2/5/8D Frame Data", value=tab)
            embed.add_field(name="OD 2/5/8D Frame Data", value=tab1)
            embed.add_field(name="Uncharged Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Charged')
            embed1.title = "Exseal"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f0/BBCF_Mai_5D%21.png')
            embed1.add_field(name="Charged 2/5/8D Frame Data", value=tab2)
            embed1.add_field(name="OD Charged 2/5/8D Frame Data", value=tab3)
            embed1.add_field(name="Charged Attack Props:", value=mpB)
			
            embed2 = discord.Embed(description='D after any Drive (Air OK)')
            embed2.title = "Direction Change"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/df/BBCF_Mai_DD.png')
            embed2.add_field(name="Uncharged Frame Data", value=tab4)
            embed2.add_field(name="Attack Props:", value=mpC)
            embed2.add_field(name="Charged Frame Data", value=tab5)
            embed2.add_field(name="Attack Props:", value=mpD)
            embed2.set_footer(text='"Did you really think I missed?"')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mai.command(name="jd", pass_context=False)  # Mai from blazblue
    async def _jd_mai(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            my_table1 = table[37]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[7]
            headers1 = table_body.find_all('tr')[8]
            headers2 = table_body.find_all('tr')[10]
            headers3 = table_body.find_all('tr')[11]
            info = table_body.find_all('tr')[9]
            info1 = table_body.find_all('tr')[12]
            headers4 = table_body1.find_all('tr')[1]
            info2 = table_body1.find_all('tr')[2]
            headers5 = table_body1.find_all('tr')[3]
            info3 = table_body1.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]	
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]	
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]	
            mp1 = info.find('li').get_text()			
            mp2 = info.find('p').get_text()			
            mp3 = [po.get_text() for po in info1.find_all('li')]
            mp4 = info1.find('p').get_text()
            mp5 = info2.find('p').get_text()	
            mp6 = info3.find('li').get_text()			
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')	
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')	
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')			
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
            mpC = "```" + "*" + mp5 + "```"
            mpD = "```" + "*" + mp6 + "```"
			
            embed = discord.Embed(description='Uncharged')
            embed.title = "Air Exseal"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d5/BBCF_Mai_j.D.png')
            embed.add_field(name="J.2/5/8D Frame Data", value=tab)
            embed.add_field(name="OD J.2/5/8D Frame Data", value=tab1)
            embed.add_field(name="Uncharged Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Charged')
            embed1.title = "Air Exseal"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/95/BBCF_Mai_j.D%21.png')
            embed1.add_field(name="Charged J.2/5/8D Frame Data", value=tab2)
            embed1.add_field(name="OD Charged J.2/5/8D Frame Data", value=tab3)
            embed1.add_field(name="Charged Attack Props:", value=mpB)
			
            embed2 = discord.Embed(description='D after any Drive (Air OK)')
            embed2.title = "Direction Change"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/df/BBCF_Mai_DD.png')
            embed2.add_field(name="Uncharged Frame Data", value=tab4)
            embed2.add_field(name="Attack Props:", value=mpC)
            embed2.add_field(name="Charged Frame Data", value=tab5)
            embed2.add_field(name="Attack Props:", value=mpD)
            embed2.set_footer(text='"Did you really think I missed?"')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @mai.command(name="ft", pass_context=False)  # Mai from blazblue
    async def _ft_mai(self):   
        """Forward Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/03/BBCF_Mai_ForwardThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mai.command(name="bt", pass_context=False)  # Mai from blazblue
    async def _bt_mai(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/03/BBCF_Mai_ForwardThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mai.command(name="at", pass_context=False)  # Mai from blazblue
    async def _at_mai(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()


            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/57/BBCF_Mai_AirThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mai.command(name="ca", pass_context=False)  # Mai from blazblue
    async def _ca_mai(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [po.get_text() for po in info.find_all('p')]	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cf/BBCF_Mai_5BB.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @mai.command(name="ct", pass_context=False)  # Mai from blazblue
    async def _ct_mai(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[3]
            headers1 = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            #mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b5/BBCF_Mai_CrushTrigger.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @jun.command(name="a", pass_context=False)  # Mai from blazblue
    async def _s1_mai(self):   
        """A after Juncture"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            my_table1 = table[49]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            #mp1 = info.find('p').get_text()
            vrs = headers1.find('th').get_text()
            vrs1 = headers2.find('th').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs1], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='236: Command Dash')
            embed.title = "Juncture"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bf/BBCF_Mai_Setsuna.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed(description='A after Juncture')
            embed1.title = "A Himeyuri"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/39/BBCF_Mai_Himeyuri.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="OD Frame Data", value=tab2)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Rocket Stab.')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @jun.command(name="b", pass_context=False)  # Mai from blazblue
    async def _s2_mai(self):   
        """B after Juncture"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            my_table1 = table[51]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            #mp1 = info.find('p').get_text()
            vrs = headers1.find('th').get_text()
            vrs1 = headers2.find('th').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs1], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='236: Command Dash')
            embed.title = "Juncture"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bf/BBCF_Mai_Setsuna.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed(description='B after Juncture')
            embed1.title = "B Himeyuri"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/39/BBCF_Mai_Himeyuri.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="OD Frame Data", value=tab2)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Rocket Stab.')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jun.command(name="c", pass_context=False)  # Mai from blazblue
    async def _s3_mai(self):   
        """C after Juncture"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            my_table1 = table[53]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            #mp1 = info.find('p').get_text()
            vrs = headers1.find('th').get_text()
            vrs1 = headers2.find('th').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs1], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='236: Command Dash')
            embed.title = "Juncture"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bf/BBCF_Mai_Setsuna.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed(description='C after Juncture')
            embed1.title = "C Himeyuri"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/2/2b/BBCF_Mai_Himeyuri-Dipper.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="OD Frame Data", value=tab2)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Rocket Stab.')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @moon.command(name="a", pass_context=False)  # Mai from blazblue
    async def _s4_mai(self):   
        """A after Moon Blossom"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            my_table1 = table[57]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            headers3 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            #mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='214: Command Jump')
            embed.title = "Moon Blossom"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCF_Mai_MoonBlossom.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed(description='A after Moon Blossom')
            embed1.title = "Suzuran"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/45/BBCF_Mai_Suzuran.png')
            embed1.add_field(name="Uncharged Frame Data", value=tab2)
            embed1.add_field(name="Charged Frame Data", value=tab3)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Diving Stab')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @moon.command(name="b", pass_context=False)  # Mai from blazblue
    async def _s5_mai(self):   
        """B after Moon Blossom"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            my_table1 = table[59]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            headers3 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            #mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='214: Command Jump')
            embed.title = "Moon Blossom"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCF_Mai_MoonBlossom.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed(description='B after Moon Blossom')
            embed1.title = "Suzuran: Blaze"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/e5/BBCF_Mai_SuzuranBlaze.png')
            embed1.add_field(name="Uncharged Frame Data", value=tab2)
            embed1.add_field(name="Charged Frame Data", value=tab3)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')		
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @moon.command(name="c", pass_context=False)  # Mai from blazblue
    async def _s6_mai(self):   
        """C after Moon Blossom"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            my_table1 = table[61]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            headers3 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            #mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='214: Command Jump')
            embed.title = "Moon Blossom"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCF_Mai_MoonBlossom.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed(description='C after Moon Blossom')
            embed1.title = "Suzuran: Dipper"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/65/BBCF_Mai_SuzuranDipper.png')
            embed1.add_field(name="Uncharged Frame Data", value=tab2)
            embed1.add_field(name="Charged Frame Data", value=tab3)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Angled Diving Stab')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			 
			
    @mai.command(name="214d", pass_context=False)  # Mai from blazblue
    async def _dd1_mai(self):
        """Hold button to go into autoguard stance"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Floral Blizzard Blossom"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/34/BBCF_Mai_FloralBlizzardBlossom.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @mai.command(name="236d", pass_context=False)  # Mai from blazblue
    async def _dd2_mai(self):
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Sylvan Hurricane Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/59/BBCF_Mai_SylvanHurricaneAssault.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")						
			
    @mai.command(name="abcd", pass_context=False)  # Mai from blazblue
    async def _abcd_mai(self): 
        """Exceed Accel"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Shearing Cherry Blossom Storm"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8a/BBCF_Mai_ShearingCherryBlossomStorm.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @mai.command(name="222d", pass_context=False)  # Mai from blazblue
    async def _astral_mai(self):   
        """Soaring Spear that Strikes with Death"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Mai_Natsume"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [po.get_text() for po in info.find_all('p')]
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Royal Crimson Sprout: New Moon Lotus"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5e/BBCF_Mai_NewMoonLotus.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

###################################################################################################################################################################################################
    @li.command(name="5a", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _5a_li(self):
        """Clap Em"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"        
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2c/BBCS_Litchi_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
		
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @li.command(name="5b", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _5b_li(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info1.find('p').get_text()
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
            mpB = "```" + "*" + mp2 + "```" 			
			
            embed = discord.Embed()
            embed.title = "5b(m)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0f/BBCS_Litchi_5Bm.png')
            embed.add_field(name="Staff Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5b(e)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b5/BBCS_Litchi_5B.png')
            embed1.add_field(name="Staffless Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)	
            await self.bot.say(embed=embed1)				
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @li.command(name="5c", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _5c_li(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info1.find('p').get_text()
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
            mpB = "```" + "*" + mp2 + "```" 
			
            embed = discord.Embed(description='Poke Poke~')
            embed.title = "5c(m)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2f/BBCS_Litchi_5Cm.png')
            embed.add_field(name="Staff Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Little Puff Ball')
            embed1.title = "5c(e)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/91/BBCS_Litchi_5C.png')
            embed1.add_field(name="Staffless Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @li.command(name="2a", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _2a_li(self):   
        """Slap them knee caps"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/42/BBCS_Litchi_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @li.command(name="2b", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _2b_li(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info1.find('p').get_text()
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
            mpB = "```" + "*" + mp2 + "```" 
			
            embed = discord.Embed(description='Split Kick!(Extend)')
            embed.title = "2b(m)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/94/BBCS_Litchi_2Bm.png')
            embed.add_field(name="Staff Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Split Kick!')
            embed1.title = "2b(e)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/0/03/BBCS_Litchi_2B.png')
            embed1.add_field(name="Staffless Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @li.command(name="2c", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _2c_li(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info1.find('p').get_text()
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
            mpB = "```" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "2c(m)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fb/BBCS_Litchi_2Cm.png')
            embed.add_field(name="Staff Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed()
            embed1.title = "2c(e)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/3a/BBCS_Litchi_2C.png')
            embed1.add_field(name="Staffless Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @li.command(name="6a", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _6a_li(self):  
        #"""Insert Tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info1.find('li').get_text()
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
            mpB = "```" + "*" + mp2 + "```" 
			
            embed = discord.Embed(description='Karate Chop![m]')
            embed.title = "6A(m)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5a/BBCS_Litchi_6Am.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Karate Chop![e]')
            embed1.title = "6A(e)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/0/04/BBCS_Litchi_6A.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @li.command(name="6b", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _6b_li(self):  
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info1.find('p').get_text()
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
            mpB = "```" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "6b(m)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/24/BBCS_Litchi_6Bm.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6b(e)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/6b/BBCS_Litchi_6B.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @li.command(name="6c", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _6c_li(self):  
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [op.get_text() for op in info1.find_all('p')]
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "6c(m)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/92/BBCS_Litchi_6Cm.png')
            embed.add_field(name="Staff Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6c(e)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/89/BBCS_Litchi_6C.png')
            embed1.add_field(name="Staffless Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @li.command(name="4b", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _4b_li(self):  
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info1.find('p').get_text()
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "4B(m)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/22/BBCP_Litchi_4Bm.png')
            embed.add_field(name="Staff Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "4B(e)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/0/01/BBCP_Litchi_4B.png')
            embed1.add_field(name="Staffless Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @li.command(name="3c", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _3c_li(self):   
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [op.get_text() for op in info.find_all('li')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            #mpB = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "3c(m)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/ca/BBCS_Litchi_3Cm.png')
            embed.add_field(name="Staff Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "3c(e)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/cc/BBCS_Litchi_3C.png')
            embed1.add_field(name="Staffless Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @li.command(name="ja", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _ja_li(self): 
        """Placeholder"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8f/BBCS_Litchi_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @li.command(name="jb", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _jb_li(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            #mp2 = 
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            #mpB =
			
            embed = discord.Embed()
            embed.title = "J.B(m)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8a/BBCS_Litchi_jBm.png')
            embed.add_field(name="Staff Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "J.B(e)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/bc/BBCS_Litchi_jB.png')
            embed1.add_field(name="Staffless Frame Data", value=tab1)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @li.command(name="jc", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _jc_li(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info1.find('p').get_text()
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"

			
            embed = discord.Embed()
            embed.title = "J.C(m)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCS_Litchi_jCm.png')
            embed.add_field(name="Staff Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "J.C(e)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/9a/BBCS_Litchi_jC.png')
            embed1.add_field(name="Staffless Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @li.command(name="5d", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _5d_li(self):   
        """5D[m]: Look at the Flick of the wrist~ 5d[e]:  Swerve em'"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            my_table1 = table[41]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
            headers2 = table_body1.find_all('tr')[1]
            headers3 = table_body1.find_all('tr')[3]
            info2 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]				
            mp1 = info.find('p').get_text() 
            mp2 = [po.get_text() for po in info1.find_all('p')]
            mp3 = [po1.get_text() for po1 in info2.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')	
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')	
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp3[2] + "```"
			
            embed = discord.Embed(description='Look at the Flick of the wrist~')
            embed.title = "5D(Staff)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7e/BBCS_Litchi_5Dm.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Swerve em')
            embed1.title = "5D(Staffless)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/7b/BBCS_Litchi_5D.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "5D Staff Launch"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/f/f8/BBCS_Litchi_Staff5D.png')
            embed2.add_field(name="Vertical Frame Data", value=tab2)
            embed2.add_field(name="Dashing Frame Data", value=tab3)
            embed2.add_field(name="Attack Props:", value=mpC)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @li.command(name="2d", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _2d_li(self):   
        #"""Insert Tag Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            my_table1 = table[41]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
            headers2 = table_body1.find_all('tr')[2]
            headers3 = table_body1.find_all('tr')[3]
            info2 = table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]				
            mp1 = info.find('p').get_text() 
            mp2 = [po.get_text() for po in info1.find_all('p')]
            mp3 = [po1.get_text() for po1 in info2.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')	
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')	
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp3[1] + "```"
			
            embed = discord.Embed(description='This Chest')
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/18/BBCS_Litchi_2Dm.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed(description='Dem legs')
            embed1.title = "2D"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/bc/BBCS_Litchi_2D.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "2D Staff Launch"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/6/6c/BBCS_Litchi_Staff2D.png')
            embed2.add_field(name="Vertical Frame Data", value=tab2)
            embed2.add_field(name="Dashing Frame Data", value=tab3)
            embed2.add_field(name="Attack Props:", value=mpC)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @li.command(name="6d", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _6d_li(self):   
        """Sets up an easy Crush Trigger."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            my_table1 = table[41]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[2]
            headers2 = table_body1.find_all('tr')[3]
            info1 = table_body1.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]				
            mp1 = info.find('p').get_text() 
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')	
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "```"
			
            embed = discord.Embed(description='Sets up an easy Crush Trigger.')
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a0/BBCS_Litchi_6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed()
            embed1.title = "6D Staff Launch"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/6c/BBCS_Litchi_Staff2D.png')
            embed1.add_field(name="Vertical Frame Data", value=tab1)
            embed1.add_field(name="Dashing Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @li.command(name="4d", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _4d_li(self):   
        """Frame adv. varies depending on distance."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            my_table1 = table[41]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[2]
            headers2 = table_body1.find_all('tr')[3]
            info1 = table_body1.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]				
            #mp1 = info.find('p').get_text() 
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')	
            #mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='Frame adv. varies depending on distance.')
            embed.title = "4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ad/BBCS_Litchi_4D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed()
            embed1.title = "4D Staff Launch"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f8/BBCS_Litchi_Staff5D.png')
            embed1.add_field(name="Vertical Frame Data", value=tab1)
            embed1.add_field(name="Dashing Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @li.command(name="jd", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _jd_li(self):   
        #"""Insert Tag Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            my_table1 = table[41]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
            headers2 = table_body1.find_all('tr')[2]
            headers3 = table_body1.find_all('tr')[3]
            info2 = table_body1.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]		
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]				
            mp1 = info.find('p').get_text() 
            mp2 = [po1.get_text() for po1 in info2.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')	
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')	
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "```"
			
            embed = discord.Embed()
            embed.title = "J.D(m)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/38/BBCS_Litchi_jDm.png')
            embed.add_field(name="Staff Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed()
            embed1.title = "J.D(e)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/7f/BBCS_Litchi_jD.png')
            embed1.add_field(name="Staffless Frame Data", value=tab1)
			
            embed2 = discord.Embed()
            embed2.title = "J.D Staff Launch"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/6/6c/BBCS_Litchi_Staff2D.png')
            embed2.add_field(name="Vertical Frame Data", value=tab2)
            embed2.add_field(name="Dashing Frame Data", value=tab3)
            embed2.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @li.command(name="j2d", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _j2d_li(self):   
        """Cross-up leads to a full combo."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            my_table1 = table[41]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[3]
            info1 = table_body1.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]					
            #mp1 = info.find('p').get_text() 
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')	
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')	
            #mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='Cross-up leads to a full combo.')
            embed.title = "J.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bc/BBCS_Litchi_j2Dm.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA)
			
            embed1 = discord.Embed()
            embed1.title = "J.2D Staff Launch"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f8/BBCS_Litchi_Staff5D.png')
            embed1.add_field(name="Vertical Frame Data", value=tab1)
            embed1.add_field(name="Dashing Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @li.command(name="ft", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _ft_li(self):   
        """Forward Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/99/BBCS_Litchi_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @li.command(name="bt", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _bt_li(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/85/BBCS_Litchi_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @li.command(name="at", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _at_li(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/90/BBCS_Litchi_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @li.command(name="ca", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _ca_li(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6b/BBCS_Litchi_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @li.command(name="ct", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _ct_li(self):   
        """Crush Trigger:  Release The Dragon!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d8/BBCP_Litchi_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @li.command(name="447", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _s1_li(self):   
        """Back flip"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Additional Back Step"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2b/BBCS_Litchi_447.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')			
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @m.command(name="41236a", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _m1_li(self):   
        #"""Insert Tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed(description='気通貫 Ikki Tsūkan')
            embed.title = "Straight Through(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1a/BBCS_Litchi_StraightThrough.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Straight Through Angles"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/81/BBCF_Litchi_StraightThroughFollowups.png')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @m.command(name="41236b", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _m2_li(self):   
        #"""Insert Tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed(description='気通貫 Ikki Tsūkan')
            embed.title = "Straight Through(B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1a/BBCS_Litchi_StraightThrough.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Straight Through Angles"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/81/BBCF_Litchi_StraightThroughFollowups.png')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @m.command(name="41236c", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _m3_li(self):   
        #"""Insert Tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed(description='気通貫 Ikki Tsūkan')
            embed.title = "Straight Through(C)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1a/BBCS_Litchi_StraightThrough.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Straight Through Angles"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/81/BBCF_Litchi_StraightThroughFollowups.png')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @m.command(name="623d", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _m4_li(self):   
        """Rising Dragon"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Tsubame Gaeshi"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2c/BBCS_Litchi_TsubameGaeshi.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")						
			
    @e.command(name="236a", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _e1_li(self):   
        """i wonder if i left the oven on"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body.find_all('tr')[4]
            info1 =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            #mp2 = [po.get_text() for po in info1.find_all('li')]
            mp1 = info.find('li').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Three Dragons: White"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e1/BBCS_Litchi_Haku.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="1st Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            embed.add_field(name="2nd Follow-up Frame Data", value=tab2)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @e.command(name="236b", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _e2_li(self):   
        """Prob left the oven on"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body.find_all('tr')[4]
            info1 =  table_body.find_all('tr')[5]
            headers3 = table_body.find_all('tr')[6]
            headers4 = table_body.find_all('tr')[7]
            info2 =  table_body.find_all('tr')[8]
            headers5 = table_body.find_all('tr')[9]
            info3 =  table_body.find_all('tr')[10]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            #mp4 = info3
            mp3 = info2.find('li').get_text()
            mp2 = info1.find('li').get_text()
            mp1 = info.find('li').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
            mpC = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Three Dragons: Green"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d0/BBCS_Litchi_Hatsu.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="1st Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="2nd Follow-up Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
            embed.add_field(name="Air Frame Data", value=tab3)
            embed.add_field(name="Air 1st Follow-up Frame Data", value=tab4)
            embed.add_field(name="Attack Props:", value=mpC, inline='true')
            embed.add_field(name="Air 2st Follow-up Frame Data", value=tab5)
            #embed.add_field(name="Attack Props:", value=mpD, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @e.command(name="236c", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _e3_li(self):   
        """Nah i didn't leave it on"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body.find_all('tr')[4]
            info1 =  table_body.find_all('tr')[5]
            headers3 = table_body.find_all('tr')[6]
            headers4 = table_body.find_all('tr')[7]
            info2 =  table_body.find_all('tr')[8]
            headers5 = table_body.find_all('tr')[9]
            info3 =  table_body.find_all('tr')[10]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            Data5 = [head5.get_text() for head5 in headers5.find_all('td')]
            #mp4 = info3
            mp3 = info2.find('li').get_text()
            mp2 = info1.find('li').get_text()
            mp1 = info.find('li').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
            vrs5 = headers5.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            tab5 = tabulate([["Version", vrs5], ["Damage", Data5[0]], ["Guard", Data5[1]], ["Startup", Data5[2]], ["Active", Data5[3]], ["Recovery", Data5[4]], ["Frame Adv.", Data5[5]], ["Attribute", Data5[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
            mpC = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Three Dragons: Green"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/28/BBCS_Litchi_Chun.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="1st Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="2nd Follow-up Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
            embed.add_field(name="Air Frame Data", value=tab3)
            embed.add_field(name="Air 1st Follow-up Frame Data", value=tab4)
            embed.add_field(name="Attack Props:", value=mpC, inline='true')
            embed.add_field(name="Air 2st Follow-up Frame Data", value=tab5)
            #embed.add_field(name="Attack Props:", value=mpD, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @e.command(name="421c", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _e4_li(self):   
        """Gut Shot"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[2]
            info1 =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Input for an attack.')
            embed.title = "Gut Shot(Uncharged)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fe/BBCS_Litchi_Kanchan.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Hold the Button for a cross up.')
            embed1.title = "Gut Shot(Charged)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/65/BBCP_Litchi_ChargedKanchan.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @reach.command(name="a", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _e5_li(self):   
        """Scoop!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            my_table1 = table[69]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info1.find('p').get_text()
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Reach: Last Chance"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/05/BBCS_Litchi_Reach.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Reach: Last Chance~A')
            embed1.title = "One Shot"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/2/20/BBCS_Litchi_ReachA.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @reach.command(name="b", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _e6_li(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            my_table1 = table[71]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            #mp2 = 
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            #mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Reach: Last Chance"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/05/BBCS_Litchi_Reach.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Reach: Last Chance~B')
            embed1.title = "Last Chance > Three Dragons: Green"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCS_Litchi_ReachB.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @reach.command(name="c", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _e7_li(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            my_table1 = table[73]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            #mp2 = 
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            #mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Reach: Last Chance"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/05/BBCS_Litchi_Reach.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Reach: Last Chance~C')
            embed1.title = "Last Chance > Three Dragons: Red"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/4c/BBCS_Litchi_ReachC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @reach.command(name="d", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _e8_li(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            my_table1 = table[75]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            #mp2 = 
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            #mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Reach: Last Chance"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/05/BBCS_Litchi_Reach.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Reach: Last Chance~D')
            embed1.title = "Robbing a Quad"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/bc/BBCS_Litchi_j2Dm.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @reach.command(name="63214b", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _e9_li(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            my_table1 = table[77]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            #mp2 = 
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            #mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Reach: Last Chance"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/05/BBCS_Litchi_Reach.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='63214B[e]')
            embed1.title = "Reach: Robbing the Kong"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/72/BBCS_Litchi_ReachToss.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @reach.command(name="63214c", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _e10_li(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            my_table1 = table[79]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info1.find('p').get_text()
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Reach: Last Chance"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/05/BBCS_Litchi_Reach.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='*Sonic Spring.Mp3*')
            embed1.title = "Reach: Kong on Kong"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/1d/BBCS_Litchi_ReachHop.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @e.command(name="41236d", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _e11_li(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            #mp2 = info1.find('p').get_text()
            #mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
            #mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "The Four Winds: Vertical"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/82/BBCS_Litchi_FourWindsVert.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "The Four Winds: Horizontal"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/0/0e/BBCS_Litchi_FourWindsHoriz.png')
            embed1.add_field(name="Frame Data", value=tab1)
            #embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @e.command(name="623d", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _e12_li(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
			
            embed = discord.Embed()
            embed.title = "Kote Gaeshi"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ea/BBCS_Litchi_Kote6.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @e.command(name="421d", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _e13_li(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Kote Gaeshi"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f5/BBCS_Litchi_Kote4.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @m.command(name="214b", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _m5_li(self):   
        """Ren Chan(B)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[85]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 =
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Ren Chan(B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5e/BBCF_Litchi_RenChan.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @m.command(name="214c", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _m6_li(self):   
        """Ren Chan(C)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[85]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 =
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Ren Chan(C)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5e/BBCF_Litchi_RenChan.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @li.command(name="6428c", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _dd1_li(self):
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[87]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "All Green"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ec/BBCS_Litchi_Ryuisou.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "All Green(OD)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/2/2e/BBCP_Litchi_RyuisouOD.png')
            embed1.add_field(name="Frame Data", value=tab1)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @li.command(name="632146c", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _dd2_li(self):
        """Strong reversal and good combo ender."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[89]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            #mp1 = info.find('li').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"

            embed = discord.Embed(description='Strong reversal and good combo ender.')
            embed.title = "All Terminals(1st Hit)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4b/BBCP_Litchi_AllTerminals.png')
			
            embed1 = discord.Embed()
            embed1.title = "All Terminals"
            embed1.add_field(name="632146C[m] (Staff ender) Frame Data", value=tab)
            embed1.add_field(name="632146C~[D][m] (Staff > Staffless ender) Frame Data", value=tab1)
            embed1.add_field(name="632146C[e] (Staffless ender) Frame Data", value=tab2)
            embed1.add_field(name="632146C during Overdrive Frame Data", value=tab3)
            #embed.add_field(name="OD Attack Props:", value=mpB, inline='true')
			
            embed2 = discord.Embed(description='More damage than the [e] version, but worse post-super options.')
            embed2.title = "All Terminals(Staff Ender)"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/c/ce/BBCP_Litchi_AllTerminalsStaff.png')
			
            embed3 = discord.Embed(description='Less damage than the [m] version, but better post-super options.')
            embed3.title = "All Terminals(Staffless Ender)"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/f/f9/BBCP_Litchi_AllTerminalsStaffless.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					

    @e.command(name="632146d", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _dd3_li(self):
        """Staffless Super"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[91]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
            mpB = "```" + "*" + mp1[1] + "```"
			
            embed = discord.Embed(description='Combo filler.')
            embed.title = "Thirteen Orphans(5D Set)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b4/BBCP_Litchi_VerticalKokushi.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Decent pressure tool.')
            embed1.title = "Thirteen Orphans(2D Set)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/d7/BBCS_Litchi_Kokushi.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @li.command(name="abcd", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _abcd_li(self): 
        """Need a hand?"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[93]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crimson Peacock"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1e/BBCF_Litchi_Exceed_Accel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @li.command(name="od", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _overdrive_li(self):   
        """Use this time to buffer staff hits"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[95]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            vrs = headers.find('th').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
            mpB = "```" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
			
            embed = discord.Embed(description='Use this time to buffer staff hits.')
            embed.title = "The Great Wheel"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4a/BBCP_Litchi_Overdrive.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Multi-purpose tool, incredibly strong.')
            embed1.title = "The Great Wheel Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/76/BBCP_Litchi_DaisharinStaff.png')
            embed1.add_field(name="Attack Props Cont:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @reach.command(name="46d", pass_context=False)  # Litchi Faye Ling from blazblue
    async def _astral_li(self):   
        """One does not simply kick 99 times without SWITCHING FEET."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Litchi_Faye_Ling"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[97]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed(description='Last Chance > 46D')
            embed.title = "Nine Gates of Heaven"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ab/BBCS_Litchi_NineGates2.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

###################################################################################################################################################################################################
    @ko.command(name="5a", pass_context=False)  # Kokonoe from blazblue
    async def _5a_ko(self):
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"        
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fd/BBCP_Kokonoe_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
		
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ko.command(name="5b", pass_context=False)  # Kokonoe from blazblue
    async def _5b_ko(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```" 		
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/35/BBCP_Kokonoe_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)				
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ko.command(name="5c", pass_context=False)  # Kokonoe from blazblue
    async def _5c_ko(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d4/BBCP_Kokonoe_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @ko.command(name="2a", pass_context=False)  # Kokonoe from blazblue
    async def _2a_ko(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```" 	
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/68/BBCP_Kokonoe_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ko.command(name="2b", pass_context=False)  # Kokonoe from blazblue
    async def _2b_ko(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f7/BBCP_Kokonoe_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ko.command(name="2c", pass_context=False)  # Kokonoe from blazblue
    async def _2c_ko(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/91/BBCP_Kokonoe_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ko.command(name="6a", pass_context=False)  # Kokonoe from blazblue
    async def _6a_ko(self):  
        """CHESTO!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bf/BBCP_Kokonoe_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ko.command(name="6b", pass_context=False)  # Kokonoe from blazblue
    async def _6b_ko(self):  
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/79/BBCP_Kokonoe_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ko.command(name="6c", pass_context=False)  # Kokonoe from blazblue
    async def _6c_ko(self):  
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cd/BBCP_Kokonoe_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ko.command(name="3c", pass_context=False)  # Kokonoe from blazblue
    async def _3c_ko(self):   
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7b/BBCP_Kokonoe_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
		
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ko.command(name="ja", pass_context=False)  # Kokonoe from blazblue
    async def _ja_ko(self): 
        """Ora ora ora ora ora ora"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/72/BBCP_Kokonoe_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ko.command(name="jb", pass_context=False)  # Kokonoe from blazblue
    async def _jb_ko(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9f/BBCP_Kokonoe_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ko.command(name="jc", pass_context=False)  # Kokonoe from blazblue
    async def _jc_ko(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = info.find('li').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b6/BBCP_Kokonoe_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ko.command(name="j2c", pass_context=False)  # Kokonoe from blazblue
    async def _j2c_ko(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e3/BBCP_Kokonoe_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ko.command(name="sg", pass_context=False)  # Kokonoe from blazblue
    async def _5d_ko(self):   
        """Drive:  Direction + D"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed(description='Direction + D')
            embed.title = "Summon Graviton"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3e/BBCP_Kokonoe_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @ko.command(name="236d", pass_context=False)  # Kokonoe from blazblue
    async def _236d_ko(self):   
        #"""Insert Tag Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]			
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')		
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed(description='air OK')
            embed.title = "Activate Graviton"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d9/BBCP_Kokonoe_236D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA)

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ko.command(name="214d", pass_context=False)  # Kokonoe from blazblue
    async def _214d_ko(self):   
        #"""Insert Tag Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]		
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')	
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed(description='air OK')
            embed.title = "Retrieve Graviton"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/79/BBCP_Kokonoe_214D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ko.command(name="ft", pass_context=False)  # Kokonoe from blazblue
    async def _ft_ko(self):   
        """Forward Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3b/BBCP_Kokonoe_ForwardThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ko.command(name="bt", pass_context=False)  # Kokonoe from blazblue
    async def _bt_ko(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ea/BBCP_Kokonoe_BackThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ko.command(name="at", pass_context=False)  # Kokonoe from blazblue
    async def _at_ko(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/03/BBCP_Kokonoe_AirThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ko.command(name="ca", pass_context=False)  # Kokonoe from blazblue
    async def _ca_ko(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/35/BBCP_Kokonoe_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @ko.command(name="ct", pass_context=False)  # Kokonoe from blazblue
    async def _ct_ko(self):   
        """Crush Trigger:  HEY HEY HEY!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/88/BBCP_Kokonoe_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ko.command(name="236a", pass_context=False)  # Kokonoe from blazblue
    async def _s1_ko(self):   
        """武装No02「突撃ブロークンバンカー Ver2.21」"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[46]
            #table_body = my_table.find("table")
            headers = my_table.find_all('tr')[1]
            headers1 = my_table.find_all('tr')[2]
            info =  my_table.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed(description='236A/[A]')
            embed.title = "Armament No.2(Broken Bunker Assault v2.21)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/46/BBCP_Kokonoe_236A.png')
            embed.add_field(name="No Charge Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')			
			
            embed1 = discord.Embed(description='EXPLOSION!')
            embed1.title = "Armament No.2(Broken Bunker Assault v2.21)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/2/2b/BBCP_Kokonoe_236A_2.png')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ko.command(name="236b", pass_context=False)  # Kokonoe from blazblue
    async def _s2_ko(self):   
        """武装 No09 「駆動ソリッドホイール Ver3.37」"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[48]
            #table_body = my_table.find("table")
            headers = my_table.find_all('tr')[1]
            info =  my_table.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Armament No. 9(Aerial Powerdrive: Solid Wheel v3.37)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/37/BBCF_Kokonoe_SolidWheel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ko.command(name="236c", pass_context=False)  # Kokonoe from blazblue
    async def _s3_ko(self):   
        """武装No03「氷結アブソリュートゼロVer4.32」"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[50]
            my_table1 = table[62]
            #table_body = my_table.find("table")
            #table_body1 = my_table1.find("table")
            headers = my_table.find_all('tr')[1]
            info =  my_table.find_all('tr')[2]
            headers1 = my_table1.find_all('tr')[1]
            info1 =  my_table1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = info1.find('li').get_text()
            mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed(description='236C')
            embed.title = "Armament No.3(Absolute Zero v4.32)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0e/BBCP_Kokonoe_236C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='236C pt. 2')
            embed1.title = "Armament No.3(Absolute Zero v4.32)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/2/2c/BBCP_Kokonoe_236C_2.png')
			
            embed2 = discord.Embed(description='Automatic after 236C, If you have 50 meter')
            embed2.title = "Armament No.8(Crime of Greed v1.00)"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/c/c8/BBCP_Kokonoe_236C_3.png')
            embed2.add_field(name="Frame Data", value=tab1)
            embed2.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ko.command(name="214a", pass_context=False)  # Kokonoe from blazblue
    async def _s4_ko(self):   
        """武装No04α「炎熱フレイムケージVer1.43」"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[52]
            #table_body = my_table.find("table")
            headers = my_table.find_all('tr')[1]
            info =  my_table.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='214A, air OK')
            embed.title = "Armament No.4α(Flame Cage v1.43) Activate"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/dd/BBCP_Kokonoe_214A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ko.command(name="214b", pass_context=False)  # Kokonoe from blazblue
    async def _s5_ko(self):   
        """武装No04α「炎熱フレイムケージVer1.43」"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[52]
            #table_body = my_table.find("table")
            headers = my_table.find_all('tr')[2]
            info =  my_table.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='214B, air OK')
            embed.title = "Armament No.4α(Flame Cage v1.43) Activate"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/dd/BBCP_Kokonoe_214A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")						
			
    @ko.command(name="214c", pass_context=False)  # Kokonoe from blazblue
    async def _s6_ko(self):   
        """武装No04α「炎熱フレイムケージVer1.43」"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[52]
            #table_body = my_table.find("table")
            headers = my_table.find_all('tr')[3]
            info =  my_table.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='214C, air OK')
            embed.title = "Armament No.4α(Flame Cage v1.43) Activate"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/dd/BBCP_Kokonoe_214A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ko.command(name="22a", pass_context=False)  # Kokonoe from blazblue
    async def _s7_ko(self):   
        """武装No05「電撃バニシングレイVer3.10」"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[54]
            #table_body = my_table.find("table")
            headers = my_table.find_all('tr')[1]
            info =  my_table.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='22A')
            embed.title = "Armament No.5(Banishing Rays v3.10)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/13/BBCP_Kokonoe_22A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='22A pt. 2')
            embed1.title = "Armament No.5(Banishing Rays v3.10)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/64/BBCP_Kokonoe_22A_2.png')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ko.command(name="22b", pass_context=False)  # Kokonoe from blazblue
    async def _s8_ko(self):   
        """武装No05「電撃バニシングレイVer3.10」"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[54]
            #table_body = my_table.find("table")
            headers = my_table.find_all('tr')[3]
            info =  my_table.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='22B')
            embed.title = "Armament No.5(Banishing Rays v3.10)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/13/BBCP_Kokonoe_22A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed(description='22B pt. 2')
            embed1.title = "Armament No.5(Banishing Rays v3.10)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/64/BBCP_Kokonoe_22A_2.png')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ko.command(name="22c", pass_context=False)  # Kokonoe from blazblue
    async def _s9_ko(self):   
        """武装No06「転移ライアーヘイズVer1.24」"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[56]
            #table_body = my_table.find("table")
            headers = my_table.find_all('tr')[1]
            info =  my_table.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='22C')
            embed.title = "Armament No.5(Planar Haze v1.24)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5b/BBCP_Kokonoe_22C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ko.command(name="214214a", pass_context=False)  # Kokonoe from blazblue
    async def _dd1_ko(self):
        """武装No04β「超炎熱フレイムベルボーグVer2.73」"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[58]
            table_body = my_table.find("table")
            headers = my_table.find_all('tr')[1]
            info = my_table.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='air OK')
            embed.title = "Armament No.4β(Pyro: Flaming Belobog v2.73)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/78/BBCP_Kokonoe_214214A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ko.command(name="214214b", pass_context=False)  # Kokonoe from blazblue
    async def _dd2_ko(self):
        """武装No04β「超炎熱フレイムベルボーグVer2.73」"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[58]
            #table_body = my_table.find("table")
            headers = my_table.find_all('tr')[2]
            info = my_table.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='air OK')
            embed.title = "Armament No.4β(Pyro: Flaming Belobog v2.73)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/78/BBCP_Kokonoe_214214A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ko.command(name="214214c", pass_context=False)  # Kokonoe from blazblue
    async def _dd3_ko(self):
        """武装No04β「超炎熱フレイムベルボーグVer2.73」"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[58]
            #table_body = my_table.find("table")
            headers = my_table.find_all('tr')[3]
            info = my_table.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='air OK')
            embed.title = "Armament No.4β(Pyro: Flaming Belobog v2.73)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/78/BBCP_Kokonoe_214214A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ko.command(name="632146d", pass_context=False)  # Kokonoe from blazblue
    async def _dd4_ko(self):
        """武装No07「重力ジャミングダークVer1.65"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[60]
            #table_body = my_table.find("table")
            headers = my_table.find_all('tr')[1]
            info = my_table.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Armament No.7(Jamming Dark v1.65)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d8/BBCP_Kokonoe_632146D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")						

    @ko.command(name="64641236c", pass_context=False)  # Kokonoe from blazblue
    async def _dd5_ko(self):
        """武装No00「撃滅超弩級メカテイガー」"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[64]
            table_body = my_table.find("table")
            headers = my_table.find_all('tr')[1]
            info = my_table.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='air OK')
            embed.title = "Armament No.00(Dreadnought Destroyer)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ef/BBCP_Kokonoe_2363214C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ko.command(name="od64641236c", pass_context=False)  # Kokonoe from blazblue
    async def _dd6_ko(self):
        """武装No01「殲滅超弩級ゴールデンテイガー」"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[66]
            #table_body = my_table.find("table")
            headers = my_table.find_all('tr')[1]
            info =  my_table.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='air OK')
            embed.title = "Armament No.01(Super Dreadnought Exterminator)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/97/BBCP_Kokonoe_OD_2363214C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ko.command(name="abcd", pass_context=False)  # Kokonoe from blazblue
    async def _abcd_ko(self): 
        """武装No11「根絶フルメタルヘビーウエポン Ver2.05」"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[68]
            #table_body = my_table.find("table")
            headers = my_table.find_all('tr')[1]
            headers1 = my_table.find_all('tr')[2]
            info = my_table.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Armament No. 11(Full Metal Heavy Weapon v2.05)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d8/BBCF_Kokonoe_FullMetalHeavyWeapon.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ko.command(name="720d", pass_context=False)  # Kokonoe from blazblue
    async def _astral_ko(self):   
        """武装No99「最終決戦破壊事象」アルテイメイトっインパクト"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kokonoe"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[70]
            #table_body = my_table.find("table")
            headers = my_table.find_all('tr')[1]
            info = my_table.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Armament No.99(Final Apocalypse) Ultimate Impact"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1e/BBCP_Kokonoe_720D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

###################################################################################################################################################################################################
    @ka.command(name="5a", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _5a_ka(self):
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"        
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9c/BBCP_Kagura_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
		
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ka.command(name="5b", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _5b_ka(self):   
        #"""Insert tag here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            my_table1 = table[15]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info1.find('p').get_text()
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
            mpB = "```" + "*" + mp2 + "```" 			
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ae/BBCP_Kagura_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5bb"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/6/65/BBCP_Kagura_6B.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)	
            await self.bot.say(embed=embed1)				
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ka.command(name="5c", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _5c_ka(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Poke Poke~')
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/74/BBCP_Kagura_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @ka.command(name="2a", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _2a_ka(self):   
        """Slap them knee caps"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCP_Kagura_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ka.command(name="2b", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _2b_ka(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "2b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5c/BBCP_Kagura_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ka.command(name="2c", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _2c_ka(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3b/BBCP_Kagura_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ka.command(name="6a", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _6a_ka(self):  
        #"""Insert Tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b0/BBCP_Kagura_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ka.command(name="6b", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _6b_ka(self):  
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/65/BBCP_Kagura_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ka.command(name="6c", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _6c_ka(self):  
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0b/BBCP_Kagura_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ka.command(name="3c", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _3c_ka(self):   
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b0/BBCP_Kagura_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
						
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ka.command(name="ja", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _ja_ka(self): 
        #"""Insert tag here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3b/BBCP_Kagura_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ka.command(name="jb", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _jb_ka(self):   
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/29/BBCP_Kagura_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ka.command(name="jc", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _jc_ka(self): 
        #"""Insert tag here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6d/BBCP_Kagura_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ka.command(name="stance", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _stance_ka(self): 
        """5D/2D/6D, air OK"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[4]
            info1 = table_body.find_all('tr')[5]
            headers2 = table_body.find_all('tr')[7]
            #info2 = table_body.find_all('tr')[8]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            #mp6 = info2.find('p').get_text()
            mp4 = [op2.get_text() for op2 in info1.find_all('p')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "```"
			
            embed = discord.Embed(description='5D/2D/6D')
            embed.title = "Stances"
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
            embed.add_field(name="Cancel Frame Data", value=tab2)
			
            embed1 = discord.Embed()
            embed1.title = "5D"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a2/BBCP_Kagura_5D.png')
			
            embed2 = discord.Embed()
            embed2.title = "2D"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/4/4f/BBCP_Kagura_2D.png')
			
            embed3 = discord.Embed()
            embed3.title = "6D"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/e/e2/BBCP_Kagura_6D.png')
			
            embed4 = discord.Embed(description='4D to cancel Stance')
            embed4.title = "4D"
            embed4.set_image(url='http://www.dustloop.com/wiki/images/2/2f/BBCP_Kagura_4D.png')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
            await self.bot.say(embed=embed4)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @s5d.command(name="a", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _5da_ka(self):   
        """龍破衝(りゅうはしょう)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='5D~A')
            embed.title = "Dragon Blast"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e3/BBCP_Kagura_5D~A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @s5d.command(name="b", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _5db_ka(self):   
        """龍戟爪(りゅうげきそう)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='5D~B')
            embed.title = "Dragon's Claw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3c/BBCP_Kagura_5D~B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @s5d.command(name="c", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _5dc_ka(self):   
        """屠龍連斬(とりゅうれんざん)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='5D~C')
            embed.title = "Dragon Slaughter"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/32/BBCP_Kagura_5D~C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @s2d.command(name="a", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _2da_ka(self):   
        """砕龍撃(さいりんげき)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='2D~A')
            embed.title = "Dragon Strike"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/af/BBCP_Kagura_2D~A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @s2d.command(name="b", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _2db_ka(self):   
        """龍閃剣(りゅうせんけん)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='2D~B')
            embed.title = "Dragon's Blade"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/53/BBCP_Kagura_2D~B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @s2d.command(name="c", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _2dc_ka(self):   
        """臥竜双破(がりょうそうは)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='2D~C')
            embed.title = "Dragon's Dual Strike"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c6/BBCP_Kagura_2D~C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @s6d.command(name="a", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _6da_ka(self):   
        """龍牙迅(りゅうがじん)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='6D~A')
            embed.title = "Dragon's Fang"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3e/BBCP_Kagura_6D~A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @s6d.command(name="b", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _6db_ka(self):   
        """龍影迅(りゅうえいじん)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='6D~B')
            embed.title = "Dragon's Mirage"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c1/BBCP_Kagura_6D~B_1.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @s6d.command(name="c", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _6dc_ka(self):   
        """飛龍尖撃(ひりゅうせんげき)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='6D~C')
            embed.title = "Sky Dragon's Strike"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/06/BBCP_Kagura_6D~C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ka.command(name="ft", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _ft_ka(self):   
        """Forward Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a7/BBCP_Kagura_ForwardThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ka.command(name="bt", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _bt_ka(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            mp1 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/dd/BBCP_Kagura_BackThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ka.command(name="at", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _at_ka(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/16/BBCP_Kagura_AirThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ka.command(name="ca", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _ca_ka(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/65/BBCP_Kagura_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ka.command(name="ct", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _ct_ka(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bb/BBCP_Kagura_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ka.command(name="46a", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _s1_ka(self):   
        """龍縛旋(りゅうばくせん)(A)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='[4]~6A')
            embed.title = "Dragon Spirit"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/31/BBCP_Kagura_4~6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')			
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ka.command(name="46b", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _s2_ka(self):   
        """龍縛旋(りゅうばくせん)(B)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='[4]~6B')
            embed.title = "Dragon Spirit"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/31/BBCP_Kagura_4~6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')			
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ka.command(name="28b", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _s3_ka(self):   
        """龍刃翔(りゅうじんしょう)(B)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='[2]~8B')
            embed.title = "Dragon's Ascent"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/af/BBCP_Kagura_2~8C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')			
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ka.command(name="28c", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _s4_ka(self):   
        """龍刃翔(りゅうじんしょう)(C)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='[2]~8C')
            embed.title = "Dragon's Ascent"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/af/BBCP_Kagura_2~8C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')			
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ka.command(name="82c", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _s5_ka(self):   
        """龍憐舞(りゅうれんぶ)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='[8]~2C')
            embed.title = "Dragon's Dance"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/31/BBCF_Kagura_Ryuurenbu.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")						
			
    @ka.command(name="441236c", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _dd1_ka(self):
        """龍覇・獄焔塵(りゅうは・ごくえんじん)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Supreme Dragon's Inferno"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/dd/BBCP_Kagura_4~41236C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Follow-up Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ka.command(name="28d", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _dd2_ka(self):
        """龍皇・斬牙欧衝(りゅうおう・ざんがおうしょう)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='During a stance, 28D, air OK')
            embed.title = "The Dragon Lord's Striking Fang"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2c/BBCP_Kagura_28D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OverDrive Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ka.command(name="abcd", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _abcd_ka(self): 
        """哮龍・幻魔烈刀嶄(こうりゅう・げんまれっとうざん)"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Dark Flame of the Bellowing Dragon"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/68/BBCF_Kagura_GenmaRettouzan.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ka.command(name="236236c", pass_context=False)  # Kagura Mutsuki from blazblue
    async def _astral_ka(self):   
        """Swift death and eye candy for everyone!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Kagura_Mutsuki"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mp = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Black Dragon's Sky-Rending Blade"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3e/BBCP_Kagura_236236C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mp, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
###################################################################################################################################################################################################
    @iz.command(name="5a", pass_context=False)  # Izayoi from blazblue
    async def _5a_iz(self):
        """High, quick hilt jab"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"   
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6a/BBCP_Izayoi_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
		
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @iz.command(name="5b", pass_context=False)  # Izayoi from blazblue
    async def _5b_iz(self):   
        """Long-reaching poke."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"  			
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCP_Izayoi_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @iz.command(name="5c", pass_context=False)  # Izayoi from blazblue
    async def _5c_iz(self): 
        """Normal and Drive 5C"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            my_table1 = table[7]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp4 = info1.find('p').get_text()
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```" 
			
            embed = discord.Embed(description='Reclining slash.')
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9b/BBCP_Izayoi_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Quick downwards slice.')
            embed1.title = "5c(GA)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/ee/BBCP_Izayoi_5C%28GA%29.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @iz.command(name="2a", pass_context=False)  # Izayoi from blazblue
    async def _2a_iz(self):   
        """Low profile kick."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/06/BBCP_Izayoi_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @iz.command(name="2b", pass_context=False)  # Izayoi from blazblue
    async def _2b_iz(self): 
        """Backwards sweep."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/de/BBCP_Izayoi_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @iz.command(name="2c", pass_context=False)  # Izayoi from blazblue
    async def _2c_iz(self):   
        """Normal and Drive 2C"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            my_table1 = table[15]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp4 = info1.find('p').get_text()
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```" 
			
            embed = discord.Embed(description='Lifting, upwards slash.')
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/be/BBCP_Izayoi_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Two quick cuts in succession.')
            embed1.title = "2c(GA)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/e2/BBCP_Izayoi_2C%28GA%29.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @iz.command(name="6a", pass_context=False)  # Izayoi from blazblue
    async def _6a_iz(self):  
        """Downwards bash."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/86/BBCP_Izayoi_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @iz.command(name="6b", pass_context=False)  # Izayoi from blazblue
    async def _6b_iz(self):  
        """Overhead flip kick!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/60/BBCP_Izayoi_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @iz.command(name="6c", pass_context=False)  # Izayoi from blazblue
    async def _6c_iz(self):  
        """Normal and Drive 6c"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            my_table1 = table[23]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp4 = info1.find('p').get_text()
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp3[3] + "\n" + "*" + mp3[4] + "\n" + "*" + mp4 + "```" 
			
            embed = discord.Embed(description='Dashing armor attack')
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c3/BBCP_Izayoi_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Upwards step-kick.')
            embed1.title = "6c(GA)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/90/BBCP_Izayoi_6C%28GA%29.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @iz.command(name="3c", pass_context=False)  # Izayoi from blazblue
    async def _3c_iz(self):   
        """Normal and Drive 3C"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            my_table1 = table[27]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp4 = info1.find('p').get_text()
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```" 
			
            embed = discord.Embed(description='Spinning sword sweep.')
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e2/BBCP_Izayoi_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
						
            embed1 = discord.Embed(description='Low hitting slide.')
            embed1.title = "3c(GA)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/1d/BBCP_Izayoi_3C%28GA%29.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @iz.command(name="ja", pass_context=False)  # Izayoi from blazblue
    async def _ja_iz(self): 
        """Far range hilt poke."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/eb/BBCP_Izayoi_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @iz.command(name="jb", pass_context=False)  # Izayoi from blazblue
    async def _jb_iz(self):   
        """Kick attack."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e5/BBCF_Izayoi_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @iz.command(name="jc", pass_context=False)  # Izayoi from blazblue
    async def _jc_iz(self): 
        """Normal and Drive J.C"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            my_table1 = table[35]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp4 = info1.find('p').get_text()
            mp3 = [op.get_text() for op in info1.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed(description='Angled spinning slash.')
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5c/BBCP_Izayoi_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Armor attack.')
            embed1.title = "J.C(GA)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/5/50/BBCP_Izayoi_jC%28GA%29.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @iz.command(name="5d", aliases=["2d"], pass_context=False)  # Izayoi from blazblue
    async def _5d_iz(self): 
        """Mode Change."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "5D/2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7c/BBCP_Izayoi_5D.png')
            embed.add_field(name="5D Frame Data", value=tab)
            embed.add_field(name="2D Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @iz.command(name="jd", pass_context=False)  # Izayoi from blazblue
    async def _jd_iz(self):   
        """Air mode change!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/70/BBCP_Izayoi_jD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @iz.command(name="ft", pass_context=False)  # Izayoi from blazblue
    async def _ft_iz(self):   
        """Forward Throw: Lance thrust."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fb/BBCP_Izayoi_ForwardThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @iz.command(name="bt", pass_context=False)  # Izayoi from blazblue
    async def _bt_iz(self):   
        """Back Throw: Dash through and stab!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b4/BBCP_Izayoi_BackThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @iz.command(name="at", pass_context=False)  # Izayoi from blazblue
    async def _at_iz(self):   
        """Air Throw: Downwards dive."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8e/BBCP_Izayoi_AirThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @iz.command(name="ca", pass_context=False)  # Izayoi from blazblue
    async def _ca_iz(self):   
        """Counter Assault: Launching CA."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/90/BBCP_Izayoi_6C%28GA%29.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @iz.command(name="ct", pass_context=False)  # Izayoi from blazblue
    async def _ct_iz(self):   
        """Crush Trigger: Downwards strike!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e8/BBCP_Izayoi_CrushTrigger.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @iz.command(name="236a", aliases=["236d"], pass_context=False)  # Izayoi from blazblue
    async def _s1_iz(self):   
        """Sonicu Seiba!(A/D)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            headers2 = table_body.find_all('tr')[4]
            info1 =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()
            mp3 = [po1.get_text() for po1 in info1.find_all('li')]
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp3[3] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Sonic Sabre(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCP_Izayoi_SonicSabre.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed()
            embed1.title = "Sonic Sabre(D)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a3/BBCF_Izayoi_SonicSabreD.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="OD Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @iz.command(name="j236a", aliases=["j236d"], pass_context=False)  # Izayoi from blazblue
    async def _s3_iz(self):   
        """Angled Sonic Sabre!(A/D)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            headers2 = table_body.find_all('tr')[4]
            info1 =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]	
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()
            mp3 = [po1.get_text() for po1 in info1.find_all('li')]
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp3[3] + "\n" + "*" + mp3[4] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Sonic Sabre(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bb/BBCP_Izayoi_SonicSabreAir.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed()
            embed1.title = "Air Sonic Sabre(D)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/89/BBCF_Izayoi_SonicSabreDAir.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="OD Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @iz.command(name="623b", pass_context=False)  # Izayoi from blazblue
    async def _s5_iz(self):   
        """Great anti air."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            my_table1 = table[63]
            my_table2 = table[69]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
            headers3 = table_body2.find_all('tr')[1]
            info2 =  table_body2.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()
            mp3 = [po1.get_text() for po1 in info1.find_all('li')]
            mp4 = info1.find('p').get_text()
            mp5 = info2.find('li').get_text()
            mp6 = info2.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp4 + "\n" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "```"
            mpC = "```" + "*" + mp5 + "\n" + "*" + mp6 + "```"
			
            embed = discord.Embed(description='air OK')
            embed.title = "Crusade Seraphim α"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c1/BBCP_Izayoi_CrusadeSeraphimAlpha.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Crusade Seraphim (Hold) ~ A')
            embed1.title = "Stance Cancel (CS)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/34/BBCP_Izayoi_CSStanceCancel.png')
            embed1.add_field(name="Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Feint!')
			
            embed2 = discord.Embed(description='Seraphim α ~ D')
            embed2.title = "Strike Fall"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/1/1b/BBCP_Izayoi_StrikeFall.png')
            embed2.add_field(name="Frame Data", value=tab3)
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')
            embed2.set_footer(text='Knockdown!')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @iz.command(name="236c", pass_context=False)  # Izayoi from blazblue
    async def _s6_iz(self):   
        """Long horizontal swipe."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            my_table1 = table[61]
            my_table2 = table[63]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            headers3 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
            headers4 = table_body2.find_all('tr')[1]
            info2 =  table_body2.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()
            mp3 = [po1.get_text() for po1 in info1.find_all('li')]
            mp4 = [po2.get_text() for po2 in info2.find_all('li')]
            mp5 = info2.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp3[3] + "\n" + "*" + mp3[4] + "```"
            mpC = "```" + "*" + mp5 + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "\n" + "*" + mp4[2] + "```"
			
            embed = discord.Embed(description='air OK')
            embed.title = "Crusade Seraphim β"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/17/BBCP_Izayoi_CrusadeSeraphimBeta.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Crusade Seraphim ß ~ 6D')
            embed1.title = "Valkyrie Astraea"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b4/BBCP_Izayoi_ValkyrieAstraea.png')
            embed1.add_field(name="Frame Data", value=tab2)
            embed1.add_field(name="OD Frame Data", value=tab3)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Quick dash attack.')
			
            embed2 = discord.Embed(description='Crusade Seraphim (Hold) ~ A')
            embed2.title = "Stance Cancel (CS)"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/3/34/BBCP_Izayoi_CSStanceCancel.png')
            embed2.add_field(name="Frame Data", value=tab4)
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')
            embed2.set_footer(text='Feint!')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @iz.command(name="236b", pass_context=False)  # Izayoi from blazblue
    async def _s7_iz(self):   
        """Far reaching, low slash."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            my_table1 = table[61]
            my_table2 = table[63]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            headers3 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
            headers4 = table_body2.find_all('tr')[1]
            info2 =  table_body2.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()
            mp3 = [po1.get_text() for po1 in info1.find_all('li')]
            mp4 = [po2.get_text() for po2 in info2.find_all('li')]
            mp5 = info2.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp3[3] + "\n" + "*" + mp3[4] + "```"
            mpC = "```" + "*" + mp5 + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "\n" + "*" + mp4[2] + "```"
			
            embed = discord.Embed(description='air OK')
            embed.title = "Crusade Seraphim γ"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/40/BBCP_Izayoi_CrusadeSeraphimGamma.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Crusade Seraphim γ ~ 6D')
            embed1.title = "Valkyrie Astraea"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b4/BBCP_Izayoi_ValkyrieAstraea.png')
            embed1.add_field(name="Frame Data", value=tab2)
            embed1.add_field(name="OD Frame Data", value=tab3)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Quick dash attack.')
			
            embed2 = discord.Embed(description='Crusade Seraphim (Hold) ~ A')
            embed2.title = "Stance Cancel (CS)"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/3/34/BBCP_Izayoi_CSStanceCancel.png')
            embed2.add_field(name="Frame Data", value=tab4)
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')
            embed2.set_footer(text='Feint!')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @iz.command(name="623c", pass_context=False)  # Izayoi from blazblue
    async def _s8_iz(self):   
        """Fast, huge upwards slash."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            my_table1 = table[67]
            my_table2 = table[69]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            table_body2 = my_table2.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
            headers2 = table_body2.find_all('tr')[1]
            info2 =  table_body2.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info1.find('li').get_text()
            mp3 = info1.find('p').get_text()
            mp4 = info2.find('li').get_text()
            mp5 = info2.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
            mpB = "```" + "*" + mp2 + "\n" + "*" + mp3 + "```"
            mpC = "```" + "*" + mp4 + "\n" + "*" + mp5 + "```"
			
            embed = discord.Embed()
            embed.title = "Aegis Blade"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/54/BBCP_Izayoi_AegisBlade.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Aegis Blade (Hold) ~ A')
            embed1.title = "Stance Cancel (AB)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a5/BBCP_Izayoi_ABStanceCancel.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Long recovery.')
			
            embed2 = discord.Embed(description='A.Blade ~ D')
            embed2.title = "Strike Fall"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/1/1b/BBCP_Izayoi_StrikeFall.png')
            embed2.add_field(name="Frame Data", value=tab2)
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')
            embed2.set_footer(text='Feint!')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @iz.command(name="214a", aliases=["214b", "214c", "214d", "j214d"], pass_context=False)  # Izayoi from blazblue
    async def _s9_iz(self):   
        """Mirage Thruster(A/B/C/D/j214d)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[5]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = [op.get_text() for op in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"

            embed = discord.Embed(description="A stays in place, B goes forward, C goes backward, D automatically teleports behind opponent!")
            embed.title = "Mirage Thruster"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b6/BBCP_Izayoi_MirageThruster1.png')
            embed.add_field(name="A Frame Data", value=tab)
            embed.add_field(name="B Frame Data", value=tab1)
            embed.add_field(name="C Frame Data", value=tab2)
            embed.add_field(name="D Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed()
            embed1.title = "Mirage Thruster Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/0/01/BBCP_Izayoi_MirageThruster2.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	
			
    @iz.command(name="236236c", pass_context=False)  # Izayoi from blazblue
    async def _dd1_iz(self):
        """Reversal!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Justice Phorizer"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5e/BBCP_Izayoi_JusticePhorizer.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @iz.command(name="632146d", pass_context=False)  # Izayoi from blazblue
    async def _dd2_iz(self):
        """Install! 632146D during Gain art"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description="632146D during Gain art")
            embed.title = "Slaver Trans-Am"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/69/BBCP_Izayoi_SlaverTransAm.png')
            embed.add_field(name="Summon Frame Data", value=tab)
            embed.add_field(name="Per Attack Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @iz.command(name="abcd", pass_context=False)  # Izayoi from blazblue
    async def _abcd_iz(self): 
        """Elegeant AF"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Banshee Lancer"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7d/BBCF_Izyoi_BansheeLancer.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @iz.command(name="632146c", pass_context=False)  # Izayoi from blazblue
    async def _astral_iz(self):   
        """Actually...useful?!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izayoi"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Judge Of Destiny"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1b/BBCP_Izayoi_JudgeOfDestiny.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='CHUCK THAT SPEAR!')
            embed1.title = "Judge Of Destiny PT.2"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/83/BBCP_Izayoi_JudgeOfDestiny2.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
###################################################################################################################################################################################################
    @mi.command(name="5a", pass_context=False)  # Izanami from blazblue
    async def _5a_mi(self):
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"   
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/85/BBCF_Izanami_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
		
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mi.command(name="5b", pass_context=False)  # Izanami from blazblue
    async def _5b_mi(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"  			
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3c/BBCF_Izanami_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mi.command(name="5c", pass_context=False)  # Izanami from blazblue
    async def _5c_mi(self): 
        """5C/5CC"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            my_table1 = table[7]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info1.find('li').get_text()
            mp1 = info.find('p').get_text()
            mp3 = info1.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
            mpB = "```" + "*" + mp2 + "\n" + "*" + mp3 + "```" 
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/04/BBCF_Izanami_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5cc"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b5/BBCF_Izanami_5CC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @mi.command(name="2a", pass_context=False)  # Izanami from blazblue
    async def _2a_mi(self):   
        #"""Insert Tag Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b4/BBCF_Izanami_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mi.command(name="2b", pass_context=False)  # Izanami from blazblue
    async def _2b_mi(self): 
        #"""Insert Tag Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/04/BBCF_Izanami_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mi.command(name="2c", pass_context=False)  # Izanami from blazblue
    async def _2c_mi(self):   
        """2c/2cc"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            my_table1 = table[15]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()
            mp4 = info1.find('p').get_text()
            mp3 = info1.find('li').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```" 
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```" 
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1f/BBCF_Izanami_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "2cc"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/8/8a/BBCF_Izanami_2CC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mi.command(name="6a", pass_context=False)  # Izanami from blazblue
    async def _6a_mi(self):  
        """Main anti-air."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e7/BBCF_Izanami_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mi.command(name="6b", pass_context=False)  # Izanami from blazblue
    async def _6b_mi(self):  
        #"""Insert Tag Here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [op.get_text() for op in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/dc/BBCF_Izanami_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @mi.command(name="6c", pass_context=False)  # Izanami from blazblue
    async def _6c_mi(self):  
        """6c/6cc"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            my_table1 = table[23]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = info1.find('li').get_text()
            mp3 = info1.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
            mpB = "```" + "*" + mp2 + "\n" + "*" + mp3 + "```" 
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/73/BBCF_Izanami_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6cc"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f4/BBCF_Izanami_6CC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @mi.command(name="3c", pass_context=False)  # Izanami from blazblue
    async def _3c_mi(self):   
        #"""Insert Tag Here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/da/BBCF_Izanami_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @mi.command(name="ja", pass_context=False)  # Izanami from blazblue
    async def _ja_mi(self): 
        #"""Insert Tag Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ea/BBCF_Izanami_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @mi.command(name="jb", pass_context=False)  # Izanami from blazblue
    async def _jb_mi(self):   
        #"""Insert Tag Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e2/BBCF_Izanami_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @mi.command(name="jc", pass_context=False)  # Izanami from blazblue
    async def _jc_mi(self): 
        """J.C/J.CC"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            my_table1 = table[33]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = info1.find('li').get_text()
            mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "\n" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3f/BBCF_Izanami_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "J.CC"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/bc/BBCF_Izanami_jCC.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mi.command(name="j2c", pass_context=False)  # Izanami from blazblue
    async def _j2c_mi(self):   
        #"""Insert Tag Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e6/BBCF_Izanami_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mi.command(name="5d", aliases=["jd"], pass_context=False)  # Izanami from blazblue
    async def _5d_mi(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "5D/J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/da/BBCF_Izanami_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @mi.command(name="4d", aliases=["j4d"], pass_context=False)  # Izanami from blazblue
    async def _4d_mi(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "4D/J.4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3a/BBCF_Izanami_4D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @mi.command(name="6d", aliases=["j6d"], pass_context=False)  # Izanami from blazblue
    async def _6d_mi(self):   
        #"""Insert Tag Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6D/J.6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCF_Izanami_6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @mi.command(name="2d", aliases=["j2d"], pass_context=False)  # Izanami from blazblue
    async def _2d_mi(self):   
        #"""Insert Tag Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2D/J.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cc/BBCF_Izanami_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @mi.command(name="3d", aliases=["j3d"], pass_context=False)  # Izanami from blazblue
    async def _3d_mi(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "3D/J.3D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7b/BBCF_Izanami_3D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @mi.command(name="1d", aliases=["j1d"], pass_context=False)  # Izanami from blazblue
    async def _1d_mi(self):   
        #"""Insert Tag Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "1D/J.1D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCF_Izanami_1D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @mi.command(name="ft", pass_context=False)  # Izanami from blazblue
    async def _ft_mi(self):   
        """Forward Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/63/BBCF_Izanami_ForwardThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mi.command(name="bt", pass_context=False)  # Izanami from blazblue
    async def _bt_mi(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]		
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fa/BBCF_Izanami_BackThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mi.command(name="at", pass_context=False)  # Izanami from blazblue
    async def _at_mi(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e0/BBCF_Izanami_AirThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mi.command(name="ca", pass_context=False)  # Izanami from blazblue
    async def _ca_mi(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3c/BBCF_Izanami_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @mi.command(name="ct", pass_context=False)  # Izanami from blazblue
    async def _ct_mi(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/93/BBCF_Izanami_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @mi.command(name="236a", pass_context=False)  # Izanami from blazblue
    async def _s1_mi(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Ghost Peak Strike"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4d/BBCF_Izanami_Gaihou_no_Geki.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')			
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @mi.command(name="214a", aliases=["214b"], pass_context=False)  # Izanami from blazblue
    async def _s2_mi(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 =  table_body.find_all('tr')[4]

            Data = [head.get_text() for head in headers.find_all('td')]				
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()

            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]				
            mp4 = info1.find('p').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed()
            embed.title = "Thunderbolt Lance(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f9/BBCF_Izanami_Tourai_no_Hoko_A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed()
            embed1.title = "Thunderbolt Lance(B)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/39/BBCF_Izanami_Tourai_no_Hoko_B.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @mi.command(name="623b", pass_context=False)  # Izanami from blazblue
    async def _s4_mi(self):   
        """RibCage!!!!!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            my_table1 = table[65]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]					
            mp2 = [po.get_text() for po in info.find_all('p')]	
            mp3 = info1.find('li').get_text()
            mp4 = [po1.get_text() for po1 in info1.find_all('p')]	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpC = "```" + "*" + mp3 + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "```"
			
            embed = discord.Embed(description='Activate')
            embed.title = "Shield of Dreams"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed()
            embed1.title = "Shield of Dreams Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/3d/BBCF_Izanami_Mujuu_no_Tate_Activate.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')		

            embed2 = discord.Embed(description='Deactivate')
            embed2.title = "Bulwark"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/a/a7/BBCF_Izanami_Mujuu_no_Tate_Deactivate.png')
            embed2.add_field(name="Frame Data", value=tab1)
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')					
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @mi.command(name="41236c", pass_context=False)  # Izanami from blazblue
    async def _s5_mi(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='Chargeable')
            embed.title = "Flaming Dome"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a5/BBCF_Izanami_Tengai_no_Hi.png')
            embed.add_field(name="No Charge Frame Data", value=tab)
            embed.add_field(name="Half Charge Frame Data", value=tab1)
            embed.add_field(name="Max Charge Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @mi.command(name="63214c", pass_context=False)  # Izanami from blazblue
    async def _s6_mi(self):   
        """Restores barrier/health on hit."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Distant Affection"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fd/BBCF_Izanami_Jiai_no_Yuu.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @mi.command(name="41236d", pass_context=False)  # Izanami from blazblue
    async def _s7_mi(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Droplet"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e3/BBCF_Izanami_Shizuku.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @mi.command(name="63214d", pass_context=False)  # Izanami from blazblue
    async def _s8_mi(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Orchid"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e8/BBCF_Izanami_Araragi.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @mi.command(name="j63214b", pass_context=False)  # Izanami from blazblue
    async def _s9_mi(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Arms of Sympathy"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a3/BBCF_Izanami_Renge_no_Kai.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @mi.command(name="236236b", pass_context=False)  # Izanami from blazblue
    async def _dd1_mi(self):
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Stake of Supremacy"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/dd/BBCF_Izanami_Hazen_no_Kui.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @mi.command(name="214214c", pass_context=False)  # Izanami from blazblue
    async def _dd2_mi(self):
        """ZA WARUDO! TOKI YO TOMARE!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
            mpB = "```" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp1[8] + "\n" + "*" + mp1[9] + "```"
            mpC = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Hour of Nihility"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed()
            embed1.title = "Hour of Nihility Cont."
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            embed2 = discord.Embed()
            embed2.title = "Hour of Nihility Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/7/75/BBCF_Izanami_Kyomu_no_Koko.png')
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @mi.command(name="720a", pass_context=False)  # Izanami from blazblue
    async def _dd3_mi(self):
        """ROADA ROLLA DA!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] +  "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "```"
            mpB = "```" + "*" + mp2 + "```"

            embed = discord.Embed()
            embed.title = "Moment of Benevolence"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed()
            embed1.title = "Moment of Benevolence Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/ce/BBCF_Izanami_Jintou_no_Koku.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @mi.command(name="abcd", pass_context=False)  # Izanami from blazblue
    async def _abcd_mi(self): 
        """Exceed Accel:  Spooky scary skeletons."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Melancholy Death (Arc Drive)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6c/BBCF_Izanami_Nayuta.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @mi.command(name="1632143d", pass_context=False)  # Izanami from blazblue
    async def _astral_mi(self):   
        """HEEEEEERE'S JOHHNY!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Izanami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[85]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Eternal Darkness"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/ba/BBCF_Izanami_Tokoyo_no_Yami.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
###################################################################################################################################################################################################
    @ta.command(name="5a", pass_context=False)  # Iron Tager from blazblue
    async def _5a_ta(self):
        """The jab of science."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "```"  
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9d/BBCS_Tager_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
		
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ta.command(name="5b", pass_context=False)  # Iron Tager from blazblue
    async def _5b_ta(self):   
        """Now with color. And jump cancel."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"  			
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b5/BBCS_Tager_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ta.command(name="5c", pass_context=False)  # Iron Tager from blazblue
    async def _5c_ta(self): 
        """Chops! Very good starter as well."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0b/BBCS_Tager_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @ta.command(name="2a", pass_context=False)  # Iron Tager from blazblue
    async def _2a_ta(self):   
        """Kind of an anti air."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3f/BBCS_Tager_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ta.command(name="2b", pass_context=False)  # Iron Tager from blazblue
    async def _2b_ta(self): 
        """The monkey kick that's surprisingly fast and safe."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/85/BBCS_Tager_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ta.command(name="2c", pass_context=False)  # Iron Tager from blazblue
    async def _2c_ta(self):   
        """Most manly launcher"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]

            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```" 
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c5/BBCS_Tager_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ta.command(name="6a", pass_context=False)  # Iron Tager from blazblue
    async def _6a_ta(self):  
        """Good for shutting down mashers and scrubs."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp3 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpC = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed()
            embed1.title = "6A Cont."
            embed1.add_field(name="Uncharged Attack Props Cont.", value=mpB, inline='true')

            embed2 = discord.Embed()
            embed2.title = "6A Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/8/8c/BBCS_Tager_6A.png')
            embed2.add_field(name="Max Charged Frame Data", value=tab1)
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ta.command(name="6b", pass_context=False)  # Iron Tager from blazblue
    async def _6b_ta(self):  
        """No longer an overhead, but faster and safer"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp2 + "```"  
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4b/BBCS_Tager_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ta.command(name="6c", pass_context=False)  # Iron Tager from blazblue
    async def _6c_ta(self):  
        """6c/6cc"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2 + "```"  
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e4/BBCS_Tager_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ta.command(name="3c", pass_context=False)  # Iron Tager from blazblue
    async def _3c_ta(self):   
        """I'mma trip you, and then I'mma make you fly!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/61/BBCS_Tager_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ta.command(name="ja", pass_context=False)  # Iron Tager from blazblue
    async def _ja_ta(self): 
        """The best move nobody uses."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6e/BBCS_Tager_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ta.command(name="jb", pass_context=False)  # Iron Tager from blazblue
    async def _jb_ta(self):   
        """TheClassic"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/78/BBCS_Tager_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ta.command(name="jc", pass_context=False)  # Iron Tager from blazblue
    async def _jc_ta(self): 
        """The indiscriminate headbutt. Good for closing in on the opponent."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```" 
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/40/BBCS_Tager_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ta.command(name="j2c", pass_context=False)  # Iron Tager from blazblue
    async def _j2c_ta(self):   
        """The cries of anguish you will hear when this hits."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e1/BBCS_Tager_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ta.command(name="5d", pass_context=False)  # Iron Tager from blazblue
    async def _5d_ta(self): 
        """The punch of science."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```" 
            mpB = "```" + "*" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed()
            embed1.title = "5D Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/0/08/BBCS_Tager_5D.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ta.command(name="2d", pass_context=False)  # Iron Tager from blazblue
    async def _2d_ta(self):   
        """Be careful of using this move. Whiffing this move can result in unwanted situations."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "```" 
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"

            embed = discord.Embed()
            embed.title = "2D"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed()
            embed1.title = "2D Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/0/03/BBCS_Tager_2D.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ta.command(name="4d", pass_context=False)  # Iron Tager from blazblue
    async def _4d_ta(self):   
        """Nice blockstring ender because of its speed and frame advantage."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [op.get_text() for op in info.find_all('li')]	
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```" 
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "4D"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)

            embed1 = discord.Embed()
            embed1.title = "4D"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/30/BBCS_Tager_4D.png')
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ta.command(name="jd", pass_context=False)  # Iron Tager from blazblue
    async def _jd_ta(self):   
        """Hot damn that clap hurts."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [op.get_text() for op in info.find_all('li')]		
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
            mpB = "```" + "*" + mp2 +  "```"

            embed = discord.Embed()
            embed.title = "J.D"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA)

            embed1 = discord.Embed()
            embed1.title = "J.D Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/e1/BBCS_Tager_jD.png')
            embed1.add_field(name="Attack Props:", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ta.command(name="ft", pass_context=False)  # Iron Tager from blazblue
    async def _ft_ta(self):   
        """Forward Throw:  Yes, Tager actually does have normal throws."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]		
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5d/BBCS_Tager_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ta.command(name="bt", pass_context=False)  # Iron Tager from blazblue
    async def _bt_ta(self):   
        """Back Throw:  Recovery on his normal throws is scarily fast."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()	
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/87/BBCS_Tager_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ta.command(name="at", pass_context=False)  # Iron Tager from blazblue
    async def _at_ta(self):   
        """Air Throw:  This probably won't ever happen."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a1/BBCS_Tager_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ta.command(name="ca", pass_context=False)  # Iron Tager from blazblue
    async def _ca_ta(self):   
        """Counter Assault:  Turn the tables"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4b/BBCS_Tager_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ta.command(name="ct", pass_context=False)  # Iron Tager from blazblue
    async def _ct_ta(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]	
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7c/BBCP_Tager_CrushTrigger.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ta.command(name="360a", pass_context=False)  # Iron Tager from blazblue
    async def _s1_ta(self):   
        """Make your opponent feels stupid for getting grabbed by this."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "```"
            mpB = "```" + "*" + mp2 + "```"


            embed = discord.Embed()
            embed.title = "Gigantic Tager Driver"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed()
            embed1.title = "Gigantic Tager Driver Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/4/4f/BBCS_Tager_Buster.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ta.command(name="360b", pass_context=False)  # Iron Tager from blazblue
    async def _s2_ta(self):   
        """Wedge 'em and Sledge 'em"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            my_table1 = table[51]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body1.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]	
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]				
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp4 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp1[8] + "\n" + "*" + mp2[0] + "```"
            mpB = "```" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            mpC = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp3[3] + "\n" + "*" + mp3[4] + "```"
            mpD = "```" + "*" + mp4 +  "```"
			
            embed = discord.Embed()
            embed.title = "Wedge Catapult"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b5/BBCF_Tager_WedgeCatapult1.png')
            embed.add_field(name="WC Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		
			
            embed1 = discord.Embed()
            embed1.title = "Wedge Catapult Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f9/BBCF_Tager_WedgeCatapult2.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            embed2 = discord.Embed(description='360b after Wedge Catapult')
            embed2.title = "Impact Driver"
            embed2.add_field(name="ID Frame Data", value=tab1)
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')

            embed3 = discord.Embed()
            embed3.title = "Impact Driver Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/3/33/BBCF_Tager_ImpactDriver.png')
            embed3.add_field(name="Attack Props:", value=mpD, inline='true')				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ta.command(name="360c", pass_context=False)  # Iron Tager from blazblue
    async def _s3_ta(self):   
        """About time!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]				
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Driver"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4f/BBCS_Tager_Buster.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')			
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ta.command(name="623c", pass_context=False)  # Iron Tager from blazblue
    async def _s4_ta(self):   
        """Make your opponent jump then snatch them out the air with this."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]				
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "```"
            mpB = "```" + "*" + mp2 + "```"

            embed = discord.Embed()
            embed.title = "Atomic Collider"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed()
            embed1.title = "Atomic Collider"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/ef/BBCS_Tager_Collider.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')							
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ta.command(name="236a", pass_context=False)  # Iron Tager from blazblue
    async def _s5_ta(self):   
        """Slap projectiles and your opponent silly with this sledge"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            my_table1 = table[61]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            vrs = headers1.find('th').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```"
			
            embed = discord.Embed()
            embed.title = "A Sledgehammer"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Tager_Sledge.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='236A after A Sledge')
            embed1.title = "Additional Attack"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/3c/BBCS_Tager_Hammer.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='CRUSH THEIR SKULLS!')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ta.command(name="236b", pass_context=False)  # Iron Tager from blazblue
    async def _s6_ta(self):   
        """Good at closing the distance against zoners...sometimes"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            my_table1 = table[61]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```"
			
            embed = discord.Embed()
            embed.title = "B Sledgehammer"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Tager_Sledge.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Max Charge Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='236a after Sledge')
            embed1.title = "Additional Attack"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/3c/BBCS_Tager_Hammer.png')
            embed1.add_field(name="Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ta.command(name="22d", pass_context=False)  # Iron Tager from blazblue
    async def _s7_ta(self):   
        """Get Fingered."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
            mpB = "```" + "*" + mp1[4] + "\n" + "*" + mp1[7] + "```"
            mpC = "```" + "*" + mp1[8] + "\n" + "*" + mp1[9] +  "```"
            mpD = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] +  "```"
            mpE = "```" + "*" + mp2[2] + "\n" + "*" + mp2[3] +  "```"
			
            embed = discord.Embed(description='22D on downed opponent')
            embed.title = "Gadget Finger"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Gadget Finger Cont."
            embed1.add_field(name="Attack Props:", value=mpB)

            embed2 = discord.Embed()
            embed2.title = "Gadget Finger Cont."
            embed2.add_field(name="Attack Props:", value=mpC)
			
            embed3 = discord.Embed()
            embed3.title = "Gadget Finger Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/5/50/BBCS_Tager_Finger.png')
            embed3.add_field(name="Attack Props:", value=mpD)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ta.command(name="214d", pass_context=False)  # Iron Tager from blazblue
    async def _s8_ta(self):   
        """Guard point the world then hammer their skulls afterward"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            my_table1 = table[61]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp3[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Voltec Charge"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b5/BBCS_Tager_Charge.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed(description='236a after Guard Point')
            embed1.title = "Additional Attack"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/3c/BBCS_Tager_Hammer.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ta.command(name="41236d", aliases=["623d"], pass_context=False)  # Iron Tager from blazblue
    async def _s9_ta(self):   
        """Now with wall bound property."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
            mpB = "```" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp1[8] + "\n" + "*" + mp1[9] + "```"
            mpC = "```" + "*" + mp2 +  "```"

            embed = discord.Embed()
            embed.title = "Spark Bolt"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed()
            embed1.title = "Spark Bolt Cont."
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            embed2 = discord.Embed()
            embed2.title = "Spark Bolt Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/6/6a/BBCP_Tager_SparkBolt.png')
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ta.command(name="63214a", pass_context=False)  # Iron Tager from blazblue
    async def _s11_ta(self):   
        """Whoa! Air combo oki ender :O"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crimson Punisher"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed()
            embed1.title = "Crimson Punisher Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/ca/BBCP_Tager_GrandPunish.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ta.command(name="236236b", pass_context=False)  # Iron Tager from blazblue
    async def _dd1_ta(self):
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            my_table1 = table[73]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            headers3 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp4 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpC = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp3[3] + "\n" + "*" + mp3[4] + "```"
            mpD = "```" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "```"

            embed = discord.Embed()
            embed.title = "Magna Tech Wheel"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed()
            embed1.title = "Magna Tech Wheel Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f6/BBCS_Tager_MTW.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            embed2 = discord.Embed(description='MTW -> 236236B')
            embed2.title = "Terra Break"
            embed2.add_field(name="Frame Data", value=tab2)
            embed2.add_field(name="OD Frame Data", value=tab3)
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')

            embed3 = discord.Embed()
            embed3.title = "Terra Break Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/1/1d/BBCS_Tager_TerraBreak.png')
            embed3.add_field(name="Attack Props:", value=mpD, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ta.command(name="720c", pass_context=False)  # Iron Tager from blazblue
    async def _dd2_ta(self):
        #"""Insert Tag Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp1[8] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp2[1] + "```"

            embed = discord.Embed()
            embed.title = "Genesic Emerald Tager Buster"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Genesic Emerald Tager Buster Pt.2"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/0/08/BBCS_Tager_GETB.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')   

            embed2 = discord.Embed()
            embed2.title = "Genesic Emerald Tager Buster Pt.2"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/0/09/BBCS_Tager_GETB2.png')
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')     

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")						
			
    @ta.command(name="abcd", pass_context=False)  # Iron Tager from blazblue
    async def _abcd_ta(self): 
        """Exceed Accel"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"
			
            embed = discord.Embed()
            embed.title = "Charged Lightning"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/92/BBCF_Tager_ChargeLightning.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ta.command(name="1080d", pass_context=False)  # Iron Tager from blazblue
    async def _astral_ta(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Iron_Tager"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "King of Tager"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a7/BBCS_Tager_Astral.png')
            embed.add_field(name="Frame Data", value=tab)
			
            embed1 = discord.Embed()
            embed1.title = "King of Tager Pt. 2"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/0/09/BBCS_Tager_Astral2.png')
            embed1.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "King of Tager Pt. 3"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/de/BBCS_Tager_Astral3.png')
            embed2.add_field(name="Attack Props:", value=mpB, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

##################################################################################################################################################################################################			
    @hi.command(name="5a", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _5a_hi(self):
        """Pressure Starter"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"  
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCF_Hibiki_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
		
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hi.command(name="5b", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _5b_hi(self):   
        """First Hit Jump Cancellable on Block"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"  
            mpB = "```" + "*" + mp1[1] + "```" 			
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a6/BBCF_Hibiki_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Combo Filler')
            embed1.title = "5bb"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/1e/BBCF_Hibiki_5BB.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)		
            await self.bot.say(embed=embed1)				
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hi.command(name="5c", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _5c_hi(self): 
        """Great Punish Starter"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ee/BBCF_Hibiki_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @hi.command(name="2a", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _2a_hi(self):   
        """A bit better than 5A"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8d/BBCF_Hibiki_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hi.command(name="2b", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _2b_hi(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            mp2 = info.find('li').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp2 + "\n" + "*" + mp1[0] + "```"  
            mpB = "```" + "*" + mp1[1] + "```" 	
			
            embed = discord.Embed()
            embed.title = "2b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d3/BBCF_Hibiki_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "2bb"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/d5/BBCF_Hibiki_2BB.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hi.command(name="2c", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _2c_hi(self):   
        #"""Insert Tag Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/03/BBCF_Hibiki_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hi.command(name="6a", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _6a_hi(self):  
        #"""Insert Tag Here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9d/BBCF_Hibiki_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hi.command(name="6b", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _6b_hi(self):  
        #"""Insert Tag Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp2[0] + "```"  
            mpB = "```" + "*" + mp1[1] + "\n" + "*" + mp2[1] + "```" 	
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/90/BBCF_Hibiki_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6bb"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/5/5f/BBCF_Hibiki_6BB.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @hi.command(name="6c", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _6c_hi(self):  
        #"""Insert Tag Here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/00/BBCF_Hibiki_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @hi.command(name="4b", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _4b_hi(self):  
        #"""Insert Tag Here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "```"  
            mpB = "```" + "*" + mp2[1] + "```" 	
			
            embed = discord.Embed()
            embed.title = "4b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/10/BBCF_Hibiki_4B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "4bb"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/ea/BBCP_Hibiki_4BB.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @hi.command(name="3c", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _3c_hi(self):   
        #"""Insert Tag Here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d1/BBCF_Hibiki_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @hi.command(name="ja", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _ja_hi(self): 
        #"""Insert Tag Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0b/BBCF_Hibiki_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
			
    @hi.command(name="jb", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _jb_hi(self):   
        #"""Insert Tag Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"  
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/83/BBCF_Hibiki_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "J.BB"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/0/01/BBCF_Hibiki_jBB.png')
            embed1.add_field(name="Frame Data", value=tab1)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @hi.command(name="jc", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _jc_hi(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/68/BBCF_Hibiki_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hi.command(name="5d", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _5d_hi(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/76/BBCF_Hibiki_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hi.command(name="6d", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _6d_hi(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[4]
            headers1 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/76/BBCF_Hibiki_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hi.command(name="2d", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _2d_hi(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/23/BBCF_Hibiki_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hi.command(name="3d", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _3d_hi(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[4]
            headers1 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "3D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/23/BBCF_Hibiki_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hi.command(name="jd", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _jd_hi(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e2/BBCF_Hibiki_jD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA)
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @hi.command(name="j6d", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _j6d_hi(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[4]
            headers1 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e2/BBCF_Hibiki_jD.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hi.command(name="j2d", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _j2d_hi(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "J.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCF_Hibiki_j2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hi.command(name="j3d", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _j3d_hi(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[4]
            headers1 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = [op.get_text() for op in info.find_all('p')]
            mp1 = info.find('li').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "J.3D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCF_Hibiki_j2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @hi.command(name="ft", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _ft_hi(self):   
        """Forward Throw: Flashy Animation"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/04/BBCF_Hibiki_ForwardThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hi.command(name="bt", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _bt_hi(self):   
        """Back Throw: Decent Combo afterwards"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f0/BBCF_Hibiki_BackThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hi.command(name="at", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _at_hi(self):   
        """Air Throw: Sideswaps on hit"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/be/BBCF_Hibiki_AirThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @hi.command(name="ca", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _ca_hi(self):   
        """Counter Assault: Back off, I'm with Lord Kagura"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ee/BBCF_Hibiki_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @hi.command(name="ct", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _ct_hi(self):   
        """Crush Trigger: Guard Crush/Combo Extender"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a7/BBCF_Hibiki_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @sk.command(name="a", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _s1_hi(self):   
        """Soaring Kick Follow-up: A"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            my_table1 = table[49]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp4 = [po1.get_text() for po1 in info1.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "```"
			
            embed = discord.Embed(description='236a')
            embed.title = "Soaring Kick"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9d/BBCF_Hibiki_Zansh%C5%8Dkyaku.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed(description='A during Soaring Kick')
            embed1.title = "Piercing Feather"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/37/BBCF_Hibiki_Senba.png')
            embed1.add_field(name="Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Usually throws knives, throwing papers is VS Kagura exclusive.')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @sk.command(name="b", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _s2_hi(self):   
        """Soaring Kick Follow-up: B"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            my_table1 = table[51]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp4 = info1.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp3[3] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed(description='236a')
            embed.title = "Soaring Kick"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9d/BBCF_Hibiki_Zansh%C5%8Dkyaku.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed(description='B during Soaring Kick')
            embed1.title = "Thrashing Claw"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/d2/BBCF_Hibiki_Ressou.png')
            embed1.add_field(name="Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Overhead/Alternate Side Swap')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @sk.command(name="c", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _s3_hi(self):   
        """Soaring Kick Follow-up: C"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            my_table1 = table[53]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp4 = info1.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed(description='236a')
            embed.title = "Soaring Kick"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9d/BBCF_Hibiki_Zansh%C5%8Dkyaku.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed(description='C during Soaring Kick')
            embed1.title = "Pulverizing Fin"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/31/BBCF_Hibiki_Misago_Kudaki.png')
            embed1.add_field(name="Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	
            embed1.set_footer(text='Combo Ender/Catches Jump Outs')				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @sk.command(name="d", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _s4_hi(self):   
        """Soaring Kick Follow-up: D"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            my_table1 = table[55]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp3 = info1.find('li').get_text()
            mp4 = info1.find('p').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"
			
            embed = discord.Embed(description='236a')
            embed.title = "Soaring Kick"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9d/BBCF_Hibiki_Zansh%C5%8Dkyaku.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed(description='D during Soaring Kick')
            embed1.title = "Catastrophic Strike"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/2/20/BBCF_Hibiki_Maga_Uchi.png')
            embed1.add_field(name="Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	
            embed1.set_footer(text='Guard Point Counter Attack')				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @hi.command(name="214a", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _s5_hi(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            my_table1 = table[61]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Dual Wing Smash: Heaven"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ad/BBCF_Hibiki_Hiyokujin_Ten.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='D after Dual Wing Smash')
            embed1.title = "Dual Wing Smash: Void"
            #embed1.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Tager_Sledge.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @hi.command(name="214b", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _s6_hi(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            my_table1 = table[61]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            mp3 = info1.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
            mpB = "```" + "*" + mp3 + "```"
			
            embed = discord.Embed()
            embed.title = "Dual Wing Smash: Earth"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ad/BBCF_Hibiki_Hiyokujin_Ten.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='D after Dual Wing Smash')
            embed1.title = "Dual Wing Smash: Void"
            #embed1.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Tager_Sledge.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @hi.command(name="214c", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _s7_hi(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Soaring Slash"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e1/BBCF_Hibiki_Hizansh%C5%8D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @hi.command(name="214d", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _s8_hi(self):   
        """SIKE!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Soaring Slash: Revolution"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b0/BBCF_Hibiki_Hizansh%C5%8D_Kai.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @hi.command(name="623c", aliases=["j623c"], pass_context=False)  # Hibiki Kohaku from blazblue
    async def _s9_hi(self):   
        """Meterless Reversal"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed(description='Air Ok')
            embed.title = "Double Wing Cyclone"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5a/BBCF_Hibiki_Souyokusen.png')
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @hi.command(name="j214a", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _s10_hi(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Piercing Muzzle-blade"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/55/BBCF_Hibiki_Senshijin.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	

    @sk.command(name="ja", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _s11_hi(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            my_table1 = table[69]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp3 = info1.find('li').get_text()
            mp4 = info1.find('p').get_text()

            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"

            embed = discord.Embed(description='J.236a')
            embed.title = "Soaring Kick"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9d/BBCF_Hibiki_Zansh%C5%8Dkyaku.png')
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed(description='A during J.236A')
            embed1.title = "Piercing Muzzle-blade"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/5/55/BBCF_Hibiki_Senshijin.png')
            embed1.add_field(name="Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @hi.command(name="632146c", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _dd1_hi(self):
        """Swag Distortion"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Shadow Dance: Hidden Phoenix"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f7/BBCF_Hibiki_Tsugaimai_%22Oboro_%C5%8Ctori%22.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Ground OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @hi.command(name="632146d", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _dd2_hi(self):
        """An Izuna drop is stuck onto the end during OD."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Black Thunder:  Nue"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0e/BBCF_Hibiki_Kuremi_Kazuchi_%22Nue%22.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")							
			
    @hi.command(name="abcd", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _abcd_hi(self): 
        """Exceed Accel"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Mark: Purification"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/de/BBCF_Hibiki_Haraebina.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @hi.command(name="222d", pass_context=False)  # Hibiki Kohaku from blazblue
    async def _astral_hi(self):   
        """Astral Heat"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hibiki_Kohaku"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Divine Nightfall: Raven"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b9/BBCF_Hibiki_Nakikarasu.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
###################################################################################################################################################################################################
    @haz.command(name="5a", pass_context=False)  # Hazama from blazblue
    async def _5a_haz(self):
        """High, fast jab"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"  
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/db/BBCS_Hazama_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
		
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @haz.command(name="5b", pass_context=False)  # Hazama from blazblue
    async def _5b_haz(self):   
        """Fast, close-ranged knee"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 	
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7e/BBCS_Hazama_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)					
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @haz.command(name="5c", pass_context=False)  # Hazama from blazblue
    async def _5c_haz(self): 
        """Short-range, two-hit swing of his knives"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```" 	
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7b/BBCS_Hazama_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @haz.command(name="2a", pass_context=False)  # Hazama from blazblue
    async def _2a_haz(self):   
        """Fast, crouching jab"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 	
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f4/BBCS_Hazama_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @haz.command(name="2b", pass_context=False)  # Hazama from blazblue
    async def _2b_haz(self): 
        """Hazama has legs"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```" 	
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCS_Hazama_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @haz.command(name="2c", pass_context=False)  # Hazama from blazblue
    async def _2c_haz(self):   
        """The god anti-air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4f/BBCS_Hazama_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @haz.command(name="6a", pass_context=False)  # Hazama from blazblue
    async def _6a_haz(self):  
        """No one blocks this"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/66/BBCS_Hazama_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @haz.command(name="6b", pass_context=False)  # Hazama from blazblue
    async def _6b_haz(self):  
        """Watch your shins"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"  	
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a6/BBCS_Hazama_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @haz.command(name="6c", pass_context=False)  # Hazama from blazblue
    async def _6c_haz(self):  
        """Bounce 'em up"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/31/BBCS_Hazama_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @haz.command(name="3c", pass_context=False)  # Hazama from blazblue
    async def _3c_haz(self):   
        """His only good mid-screen poke"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ac/BBCS_Hazama_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
			
    @haz.command(name="ja", pass_context=False)  # Hazama from blazblue
    async def _ja_haz(self): 
        """Safe air poke"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```" 
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/62/BBCS_Hazama_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
			
    @haz.command(name="jb", pass_context=False)  # Hazama from blazblue
    async def _jb_haz(self):   
        """Good air to air"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```" 
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCS_Hazama_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
			
    @haz.command(name="jc", pass_context=False)  # Hazama from blazblue
    async def _jc_haz(self): 
        """CCCCC..."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            headers4 = table_body.find_all('tr')[5]
            info = table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            Data4 = [head4.get_text() for head4 in headers4.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
            vrs4 = headers4.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            tab4 = tabulate([["Version", vrs4], ["Damage", Data4[0]], ["Guard", Data4[1]], ["Startup", Data4[2]], ["Active", Data4[3]], ["Recovery", Data4[4]], ["Frame Adv.", Data4[5]], ["Attribute", Data4[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d5/BBCS_Hazama_jC1.png')
            embed.add_field(name="j.C(1) Frame Data", value=tab)
            embed.add_field(name="j.C(2) Frame Data", value=tab1)
            embed.add_field(name="j.C(3) Frame Data", value=tab2)
            embed.add_field(name="j.C(4) Frame Data", value=tab3)
            embed.add_field(name="j.C(5) Frame Data", value=tab4)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @haz.command(name="j2c", pass_context=False)  # Hazama from blazblue
    async def _j2c_haz(self):   
        """Death from above"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3d/BBCS_Hazama_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @nd.command(name="a", pass_context=False)  # Hazama from blazblue
    async def _5d_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            my_table1 = table[31] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = [po.get_text() for po in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='Horizontal chain')
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/86/BBCS_Hazama_5D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Having second thoughts?')
            embed1.title = "Follow-up: A"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/c4/BBCS_Hazama_AFollowup.png')
            embed1.add_field(name="Follow-up: A Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @nd.command(name="b", pass_context=False)  # Hazama from blazblue
    async def _5d1_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            my_table1 = table[33] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed(description='Horizontal chain')
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/86/BBCS_Hazama_5D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Angled approach for baiting and other options')
            embed1.title = "Follow-up: B"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a1/BBCS_Hazama_BFollowup.png')
            embed1.add_field(name="Follow-up: B Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @nd.command(name="c", pass_context=False)  # Hazama from blazblue
    async def _5d2_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            my_table1 = table[35] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Horizontal chain')
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/86/BBCS_Hazama_5D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Confusing and tricky maneuver')
            embed1.title = "Follow-up: C"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCS_Hazama_CFollowup.png')
            embed1.add_field(name="Follow-up: C Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @nd.command(name="d", pass_context=False)  # Hazama from blazblue
    async def _5d3_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            my_table1 = table[37] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='Horizontal chain')
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/86/BBCS_Hazama_5D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='WOOHOO!')
            embed1.title = "Follow-up: D"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/ed/BBCS_Hazama_DFollowup.png')
            embed1.add_field(name="Follow-up: D Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
		
    @crd.command(name="a", pass_context=False)  # Hazama from blazblue
    async def _2d_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            my_table1 = table[31] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='Vertical chain')
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/39/BBCS_Hazama_2D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Having second thoughts?')
            embed1.title = "Follow-up: A"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/c4/BBCS_Hazama_AFollowup.png')
            embed1.add_field(name="Follow-up: A Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @crd.command(name="b", pass_context=False)  # Hazama from blazblue
    async def _2d1_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            my_table1 = table[33] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed(description='Vertical chain')
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/39/BBCS_Hazama_2D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Angled approach for baiting and other options')
            embed1.title = "Follow-up: B"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a1/BBCS_Hazama_BFollowup.png')
            embed1.add_field(name="Follow-up: B Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @crd.command(name="c", pass_context=False)  # Hazama from blazblue
    async def _2d2_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            my_table1 = table[35] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Vertical chain')
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/39/BBCS_Hazama_2D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Confusing and tricky maneuver')
            embed1.title = "Follow-up: C"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCS_Hazama_CFollowup.png')
            embed1.add_field(name="Follow-up: C Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @crd.command(name="d", pass_context=False)  # Hazama from blazblue
    async def _2d3_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            my_table1 = table[37] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='Vertical chain')
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/39/BBCS_Hazama_2D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='WOOHOO!')
            embed1.title = "Follow-up: D"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/ed/BBCS_Hazama_DFollowup.png')
            embed1.add_field(name="Follow-up: D Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @fd.command(name="a", pass_context=False)  # Hazama from blazblue
    async def _6d_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            my_table1 = table[31] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='30 degree angle chain')
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/67/BBCS_Hazama_6D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Having second thoughts?')
            embed1.title = "Follow-up: A"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/c4/BBCS_Hazama_AFollowup.png')
            embed1.add_field(name="Follow-up: A Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @fd.command(name="b", pass_context=False)  # Hazama from blazblue
    async def _6d1_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            my_table1 = table[33] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed(description='30 degree angle chain')
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/67/BBCS_Hazama_6D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Angled approach for baiting and other options')
            embed1.title = "Follow-up: B"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a1/BBCS_Hazama_BFollowup.png')
            embed1.add_field(name="Follow-up: B Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @fd.command(name="c", pass_context=False)  # Hazama from blazblue
    async def _6d2_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            my_table1 = table[35] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='30 degree angle chain')
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/67/BBCS_Hazama_6D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Confusing and tricky maneuver')
            embed1.title = "Follow-up: C"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCS_Hazama_CFollowup.png')
            embed1.add_field(name="Follow-up: C Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @fd.command(name="d", pass_context=False)  # Hazama from blazblue
    async def _6d3_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            my_table1 = table[37] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='30 degree angle chain')
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/67/BBCS_Hazama_6D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='WOOHOO!')
            embed1.title = "Follow-up: D"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/ed/BBCS_Hazama_DFollowup.png')
            embed1.add_field(name="Follow-up: D Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bd.command(name="a", pass_context=False)  # Hazama from blazblue
    async def _4d_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            my_table1 = table[31] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='70 degree angle chain.')
            embed.title = "4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCS_Hazama_4D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Having second thoughts?')
            embed1.title = "Follow-up: A"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/c4/BBCS_Hazama_AFollowup.png')
            embed1.add_field(name="Follow-up: A Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bd.command(name="b", pass_context=False)  # Hazama from blazblue
    async def _4d1_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            my_table1 = table[33] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed(description='70 degree angle chain.')
            embed.title = "4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCS_Hazama_4D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Angled approach for baiting and other options')
            embed1.title = "Follow-up: B"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a1/BBCS_Hazama_BFollowup.png')
            embed1.add_field(name="Follow-up: B Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bd.command(name="c", pass_context=False)  # Hazama from blazblue
    async def _4d2_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            my_table1 = table[35] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='70 degree angle chain.')
            embed.title = "4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCS_Hazama_4D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Confusing and tricky maneuver')
            embed1.title = "Follow-up: C"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCS_Hazama_CFollowup.png')
            embed1.add_field(name="Follow-up: C Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bd.command(name="d", pass_context=False)  # Hazama from blazblue
    async def _4d3_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            my_table1 = table[37] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='70 degree angle chain.')
            embed.title = "4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCS_Hazama_4D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='WOOHOO!')
            embed1.title = "Follow-up: D"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/ed/BBCS_Hazama_DFollowup.png')
            embed1.add_field(name="Follow-up: D Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @jd.command(name="a", pass_context=False)  # Hazama from blazblue
    async def _jd_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            my_table1 = table[31] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='Horizontal chain.')
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ec/BBCS_Hazama_jD.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Having second thoughts?')
            embed1.title = "Follow-up: A"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/c4/BBCS_Hazama_AFollowup.png')
            embed1.add_field(name="Follow-up: A Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jd.command(name="b", pass_context=False)  # Hazama from blazblue
    async def _jd1_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            my_table1 = table[33] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed(description='Horizontal chain.')
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ec/BBCS_Hazama_jD.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Angled approach for baiting and other options')
            embed1.title = "Follow-up: B"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a1/BBCS_Hazama_BFollowup.png')
            embed1.add_field(name="Follow-up: B Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jd.command(name="c", pass_context=False)  # Hazama from blazblue
    async def _jd2_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            my_table1 = table[35] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Horizontal chain.')
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ec/BBCS_Hazama_jD.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Confusing and tricky maneuver')
            embed1.title = "Follow-up: C"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCS_Hazama_CFollowup.png')
            embed1.add_field(name="Follow-up: C Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @jd.command(name="d", pass_context=False)  # Hazama from blazblue
    async def _jd3_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            my_table1 = table[37] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='Horizontal chain.')
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ec/BBCS_Hazama_jD.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='WOOHOO!')
            embed1.title = "Follow-up: D"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/ed/BBCS_Hazama_DFollowup.png')
            embed1.add_field(name="Follow-up: D Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @j2d.command(name="a", pass_context=False)  # Hazama from blazblue
    async def _j2d_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            my_table1 = table[31] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='Directly downward chain')
            embed.title = "J.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1e/BBCS_Hazama_j2D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Having second thoughts?')
            embed1.title = "Follow-up: A"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/c4/BBCS_Hazama_AFollowup.png')
            embed1.add_field(name="Follow-up: A Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @j2d.command(name="b", pass_context=False)  # Hazama from blazblue
    async def _j2d1_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            my_table1 = table[33] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed(description='Directly downward chain')
            embed.title = "J.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1e/BBCS_Hazama_j2D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Angled approach for baiting and other options')
            embed1.title = "Follow-up: B"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a1/BBCS_Hazama_BFollowup.png')
            embed1.add_field(name="Follow-up: B Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @j2d.command(name="c", pass_context=False)  # Hazama from blazblue
    async def _j2d2_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            my_table1 = table[35] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='Directly downward chain')
            embed.title = "J.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1e/BBCS_Hazama_j2D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Confusing and tricky maneuver')
            embed1.title = "Follow-up: C"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCS_Hazama_CFollowup.png')
            embed1.add_field(name="Follow-up: C Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @j2d.command(name="d", pass_context=False)  # Hazama from blazblue
    async def _j2d3_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            my_table1 = table[37] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='Directly downward chain')
            embed.title = "J.2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1e/BBCS_Hazama_j2D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='WOOHOO!')
            embed1.title = "Follow-up: D"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/ed/BBCS_Hazama_DFollowup.png')
            embed1.add_field(name="Follow-up: D Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @j6d.command(name="a", pass_context=False)  # Hazama from blazblue
    async def _j6d_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            my_table1 = table[31] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='-30 degree angle chain')
            embed.title = "J.6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5b/BBCS_Hazama_j6D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Having second thoughts?')
            embed1.title = "Follow-up: A"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/c4/BBCS_Hazama_AFollowup.png')
            embed1.add_field(name="Follow-up: A Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @j6d.command(name="b", pass_context=False)  # Hazama from blazblue
    async def _j6d1_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            my_table1 = table[33] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed(description='-30 degree angle chain')
            embed.title = "J.6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5b/BBCS_Hazama_j6D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Angled approach for baiting and other options')
            embed1.title = "Follow-up: B"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a1/BBCS_Hazama_BFollowup.png')
            embed1.add_field(name="Follow-up: B Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @j6d.command(name="c", pass_context=False)  # Hazama from blazblue
    async def _j6d2_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            my_table1 = table[35] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='-30 degree angle chain')
            embed.title = "J.6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5b/BBCS_Hazama_j6D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Confusing and tricky maneuver')
            embed1.title = "Follow-up: C"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCS_Hazama_CFollowup.png')
            embed1.add_field(name="Follow-up: C Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @j6d.command(name="d", pass_context=False)  # Hazama from blazblue
    async def _j6d3_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            my_table1 = table[37] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='-30 degree angle chain')
            embed.title = "J.6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5b/BBCS_Hazama_j6D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='WOOHOO!')
            embed1.title = "Follow-up: D"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/ed/BBCS_Hazama_DFollowup.png')
            embed1.add_field(name="Follow-up: D Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @j4d.command(name="a", pass_context=False)  # Hazama from blazblue
    async def _j4d_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            my_table1 = table[31] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='-70 degree angle chain')
            embed.title = "J.4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3f/BBCS_Hazama_j4D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Having second thoughts?')
            embed1.title = "Follow-up: A"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/c4/BBCS_Hazama_AFollowup.png')
            embed1.add_field(name="Follow-up: A Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @j4d.command(name="b", pass_context=False)  # Hazama from blazblue
    async def _j4d1_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            my_table1 = table[33] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed(description='-70 degree angle chain')
            embed.title = "J.4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3f/BBCS_Hazama_j4D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Angled approach for baiting and other options')
            embed1.title = "Follow-up: B"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a1/BBCS_Hazama_BFollowup.png')
            embed1.add_field(name="Follow-up: B Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @j4d.command(name="c", pass_context=False)  # Hazama from blazblue
    async def _j4d2_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            my_table1 = table[35] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='-70 degree angle chain')
            embed.title = "J.4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3f/BBCS_Hazama_j4D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Confusing and tricky maneuver')
            embed1.title = "Follow-up: C"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCS_Hazama_CFollowup.png')
            embed1.add_field(name="Follow-up: C Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @j4d.command(name="d", pass_context=False)  # Hazama from blazblue
    async def _j4d3_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            my_table1 = table[37] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='-70 degree angle chain')
            embed.title = "J.4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3f/BBCS_Hazama_j4D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='WOOHOO!')
            embed1.title = "Follow-up: D"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/ed/BBCS_Hazama_DFollowup.png')
            embed1.add_field(name="Follow-up: D Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @j8d.command(name="a", pass_context=False)  # Hazama from blazblue
    async def _j8d_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            my_table1 = table[31] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='30 degree angle chain')
            embed.title = "J.8D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/36/BBCS_Hazama_j8D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Having second thoughts?')
            embed1.title = "Follow-up: A"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/c/c4/BBCS_Hazama_AFollowup.png')
            embed1.add_field(name="Follow-up: A Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @j8d.command(name="b", pass_context=False)  # Hazama from blazblue
    async def _j8d1_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            my_table1 = table[33] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed(description='30 degree angle chain')
            embed.title = "J.8D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/36/BBCS_Hazama_j8D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Angled approach for baiting and other options')
            embed1.title = "Follow-up: B"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/a1/BBCS_Hazama_BFollowup.png')
            embed1.add_field(name="Follow-up: B Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @j8d.command(name="c", pass_context=False)  # Hazama from blazblue
    async def _j8d2_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            my_table1 = table[35] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='30 degree angle chain')
            embed.title = "J.8D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/36/BBCS_Hazama_j8D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='Confusing and tricky maneuver')
            embed1.title = "Follow-up: C"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCS_Hazama_CFollowup.png')
            embed1.add_field(name="Follow-up: C Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @j8d.command(name="d", pass_context=False)  # Hazama from blazblue
    async def _j8d3_haz(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            my_table1 = table[37] #A: 31, B: 33, C: 35, D: 37
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            info1 = table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='30 degree angle chain')
            embed.title = "J.8D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/36/BBCS_Hazama_j8D.png')
            embed.add_field(name="Near Frame Data", value=tab)
            embed.add_field(name="Far Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed(description='WOOHOO!')
            embed1.title = "Follow-up: D"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/ed/BBCS_Hazama_DFollowup.png')
            embed1.add_field(name="Follow-up: D Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @haz.command(name="ft", pass_context=False)  # Hazama from blazblue
    async def _ft_haz(self):   
        """Forward Throw: And the kick is good!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/97/BBCS_Hazama_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @haz.command(name="bt", pass_context=False)  # Hazama from blazblue
    async def _bt_haz(self):   
        """Back Throw: Now wallbounces anywhere"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f5/BBCS_Hazama_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @haz.command(name="at", pass_context=False)  # Hazama from blazblue
    async def _at_haz(self):   
        """Air Throw: GO TO HELL"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0e/BBCS_Hazama_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @haz.command(name="ca", pass_context=False)  # Hazama from blazblue
    async def _ca_haz(self):   
        """Counter Assault: GET OFF OF ME!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7e/BBCS_Hazama_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @haz.command(name="ct", pass_context=False)  # Hazama from blazblue
    async def _ct_haz(self):   
        """Crush Trigger: Good vertical reach"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp2 = info.find('p').get_text()		
            mp1 = [op.get_text() for op in info.find_all('li')]	
            vrs = headers.find('th').get_text()		
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1a/BBCP_Hazama_CrushTrigger.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @haz.command(name="236a", pass_context=False)  # Hazama from blazblue
    async def _s1_haz(self):   
        """Don't get (corner) carried away"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Venom Sword - Jabaki"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/de/BBCS_Hazama_jabaki.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')					
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @haz.command(name="214b", pass_context=False)  # Hazama from blazblue
    async def _s2_haz(self):   
        """Pretty much 214D with a hitbox"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Vengeful Viper - Jagai"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4c/BBCF_Hazama_Jagai.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')					
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @sbj.command(name="214d", pass_context=False)  # Hazama from blazblue
    async def _s3_haz(self):   
        """Winding up..."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = info.find('li').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed(description='Winding up...')
            embed.title = "Serpent's Benediction - Jasetsu"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c9/BBCS_Hazama_jasetsu.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')				
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @sbj.command(name="44", aliases=["66"], pass_context=False)  # Hazama from blazblue
    async def _s4_haz(self):   
        """Smooth moves"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='Smooth moves')
            embed.title = "Serpent's Redemption - Jakatsu:  Back dash"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/dc/BBCP_Hazama_jakatsu.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')				
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @sbj.command(name="a", pass_context=False)  # Hazama from blazblue
    async def _s6_haz(self):   
        """Bop on the head, comboable"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='214D~A')
            embed.title = "Falling Fang - Ressenga"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c4/BBCS_Hazama_ressenga.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	
            embed.set_footer(text='Bop on the head, comboable')			
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @sbj.command(name="b", pass_context=False)  # Hazama from blazblue
    async def _s7_haz(self):   
        """Flash kick, also comboable"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"
			
            embed = discord.Embed(description='214D~B')
            embed.title = "Rising Fang - Gashoukyaku"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1d/BBCS_Hazama_gashoukyaku.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	
            embed.set_footer(text='Flash kick, also comboable')			
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @sbj.command(name="c", pass_context=False)  # Hazama from blazblue
    async def _s8_haz(self):   
        """(Mint Chocolate) Ice Cream Scoop, deliciously comboable"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]

            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='214D~C')
            embed.title = "Devouring Fang - Zaneiga"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/12/BBCS_Hazama_zaneiga.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	
            embed.set_footer(text='(Mint Chocolate) Ice Cream Scoop, deliciously comboable')			
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @sbj.command(name="d", pass_context=False)  # Hazama from blazblue
    async def _s9_haz(self):   
        """Winding down..."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='214D~D')
            embed.title = "Serpent's Haste - Chuudan"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/ba/BBCS_Hazama_Kamae_Chuudan.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	
            embed.set_footer(text='Winding down...')			
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @haz.command(name="j214b", pass_context=False)  # Hazama from blazblue
    async def _s10_haz(self):   
        """Lol divekick"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Shadow Serpent - Jameijin"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0b/BBCF_Hazama_Jameijin.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @haz.command(name="236c", pass_context=False)  # Hazama from blazblue
    async def _s11_haz(self):   
        """GATCHA"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[83]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Bloody Fangs - Gasaishou"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8f/BBCS_Hazama_gasaishou.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @haz.command(name="623d", pass_context=False)  # Hazama from blazblue
    async def _s12_haz(self):   
        """Back to the corner with you!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[85]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] +"```"
			
            embed = discord.Embed()
            embed.title = "Hungry Coils - Jakou"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d3/BBCS_Hazama_jakou.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @haz.command(name="236236b", pass_context=False)  # Hazama from blazblue
    async def _dd1_haz(self):
        """Straight to Heaven"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[87]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Serpent's Infernal Rapture - Jayoku Houtenjin"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/46/BBCS_Hazama_Jayoku_Houtenjin.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @haz.command(name="632146c", pass_context=False)  # Hazama from blazblue
    async def _dd2_haz(self):
        """Does it hurt?"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[89]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Eternal Coils of the Dragon Serpent - Mizuchi Rekkazan"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/97/BBCS_Hazama_Mizuchi_Rekkazan.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @sbj.command(name="632146d", pass_context=False)  # Hazama from blazblue
    async def _dd3_haz(self):
        """A thousand years of curb stomps"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[91]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='214D~632146D')
            embed.title = "The Serpent's Unholy Wrath - Orochi Burensou"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6a/BBCP_Hazama_Orochi_Burensou.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.set_footer(text="A thousand years of curb stomps")
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @haz.command(name="abcd", pass_context=False)  # Hazama from blazblue
    async def _abcd_haz(self): 
        """Exceed Accel: Ripping people to shreds"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[93]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Glimmering Fang of the Basilisk - Meija Gekkouga"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/52/BBCF_Hazama_MeijaGekkouga.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @haz.command(name="1632143d", aliases=["6321463214d"], pass_context=False)  # Hazama from blazblue
    async def _astral1_haz(self):   
        """Astral Heat ~ All bets are off"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Hazama"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[95]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Hungry Darkness of 1000 Souls - Senkon Meiraku"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4d/BBCS_Hazama_Senkon_Meiraku.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
###################################################################################################################################################################################################
    @ca.command(name="5a", pass_context=False)  #  Carol Clover from blazblue
    async def _5a_ca(self):
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```" 	  
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/ff/BBCS_Carl_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
		
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ca.command(name="5b", pass_context=False)  #  Carol Clover from blazblue
    async def _5b_ca(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```" 	
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/92/BBCS_Carl_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)					
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ca.command(name="5c", pass_context=False)  #  Carol Clover from blazblue
    async def _5c_ca(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```" 	
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/07/BBCS_Carl_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @ca.command(name="2a", pass_context=False)  #  Carol Clover from blazblue
    async def _2a_ca(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 	
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c3/BBCS_Carl_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ca.command(name="2b", pass_context=False)  #  Carol Clover from blazblue
    async def _2b_ca(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```" 	
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCS_Carl_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ca.command(name="2c", pass_context=False)  #  Carol Clover from blazblue
    async def _2c_ca(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8a/BBCS_Carl_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ca.command(name="6a", pass_context=False)  #  Carol Clover from blazblue
    async def _6a_ca(self):  
        #"""Insert Tag Here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e8/BBCS_Carl_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ca.command(name="6b", pass_context=False)  #  Carol Clover from blazblue
    async def _6b_ca(self):  
        #"""Insert Tag Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[1] + "```"  	
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/aa/BBCS_Carl_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ca.command(name="6c", pass_context=False)  #  Carol Clover from blazblue
    async def _6c_ca(self):  
        #"""Insert Tag Here"""			
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4b/BBCF_Carl_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ca.command(name="3c", pass_context=False)  #  Carol Clover from blazblue
    async def _3c_ca(self):   
        #"""Insert Tag Here"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```" 
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f5/BBCS_Carl_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ca.command(name="ja", pass_context=False)  #  Carol Clover from blazblue
    async def _ja_ca(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```" 
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e5/BBCS_Carl_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ca.command(name="jb", pass_context=False)  #  Carol Clover from blazblue
    async def _jb_ca(self):   
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            #mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```" 
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/75/BBCS_Carl_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ca.command(name="jc", pass_context=False)  #  Carol Clover from blazblue
    async def _jc_ca(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA =
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a9/BBCS_Carl_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ca.command(name="j2c", pass_context=False)  #  Carol Clover from blazblue
    async def _j2c_ca(self):   
        """Going in strong!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/ba/BBCS_Carl_j2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ca.command(name="6d", pass_context=False)  #  Carol Clover from blazblue
    async def _6d_ca(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            #info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = 
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/8c/BBCS_Carl_6D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ca.command(name="3d", pass_context=False)  #  Carol Clover from blazblue
    async def _3d_ca(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = 
			
            embed = discord.Embed()
            embed.title = "3D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/91/BBCS_Carl_3D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ca.command(name="4d", pass_context=False)  #  Carol Clover from blazblue
    async def _4d_ca(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "4D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b3/BBCP_Carl_46D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ca.command(name="2d", pass_context=False)  #  Carol Clover from blazblue
    async def _2d_ca(self): 
        #"""Insert Tag Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cd/BBCF_Carl_1D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ca.command(name="8d", pass_context=False)  #  Carol Clover from blazblue
    async def _8d_ca(self): 
        """The Clap"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "8D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/79/BBCS_Carl_8D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
		
    @ca.command(name="22d", pass_context=False)  #  Carol Clover from blazblue
    async def _22d_ca(self): 
        """The Bell"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "La Campanella"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/da/BBCS_Carl_22D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ca.command(name="623d", pass_context=False)  #  Carol Clover from blazblue
    async def _623d_ca(self): 
        """With Vigor"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Con Brio"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/49/BBCS_Carl_623D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ca.command(name="63214d", pass_context=False)  #  Carol Clover from blazblue
    async def _63214d_ca(self): 
        """With feeling"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Con Anima"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f7/BBCS_Carl_63214D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ca.command(name="41236d", pass_context=False)  #  Carol Clover from blazblue
    async def _41236d_ca(self): 
        """With fire"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Con Fuoco"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/82/BBCS_Carl_41236D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ca.command(name="421d", pass_context=False)  #  Carol Clover from blazblue
    async def _421d_ca(self): 
        """Flying"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Volante"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/55/BBCS_Carl_421D.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ca.command(name="ft", pass_context=False)  #  Carol Clover from blazblue
    async def _ft_ca(self):   
        """Forward Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = 
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/89/BBCS_Carl_FThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ca.command(name="bt", pass_context=False)  #  Carol Clover from blazblue
    async def _bt_ca(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = 
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/30/BBCS_Carl_BThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ca.command(name="at", pass_context=False)  #  Carol Clover from blazblue
    async def _at_ca(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [po.get_text() for po in info.find_all('p')]	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = 
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7c/BBCS_Carl_AThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ca.command(name="ca", pass_context=False)  #  Carol Clover from blazblue
    async def _ca_ca(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cf/BBCS_Carl_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ca.command(name="ct", pass_context=False)  #  Carol Clover from blazblue
    async def _ct_ca(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            mp1 = [op.get_text() for op in info.find_all('li')]	
            vrs = headers.find('th').get_text()		
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b0/BBCP_Carl_CT.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ca.command(name="236a", pass_context=False)  #  Carol Clover from blazblue
    async def _s1_ca(self):   
        """Quickly(A)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
			
            embed = discord.Embed()
            embed.title = "Vivace(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d5/BBCS_Carl_Vivace.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')					
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ca.command(name="236b", pass_context=False)  #  Carol Clover from blazblue
    async def _s2_ca(self):   
        """Quickly(B)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "```"
			
            embed = discord.Embed()
            embed.title = "Vivace(B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d5/BBCS_Carl_Vivace.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')					
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ca.command(name="623c", pass_context=False)  #  Carol Clover from blazblue
    async def _s3_ca(self):   
        """A songlike tone"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Cantabile"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/67/BBCS_Carl_Cantabile.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ca.command(name="j214c", pass_context=False)  #  Carol Clover from blazblue
    async def _s4_ca(self):   
        """Light and moderately brisk"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Allegretto"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bb/BBCS_Carl_Allegretto.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @ca.command(name="632146c", pass_context=False)  #  Carol Clover from blazblue
    async def _dd1_ca(self):
        """Song of joy"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Laetabilis Cantata"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0f/BBCS_Carl_LaetabilisCantata.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ca.command(name="236236d", pass_context=False)  #  Carol Clover from blazblue
    async def _dd2_ca(self):
        """Air OK"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Rhapsody of Memories"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c0/BBCS_Carl_RhapsodyOfMemories.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")						

    @ca.command(name="214214d", pass_context=False)  #  Carol Clover from blazblue
    async def _dd3_ca(self):
        """And the finale(AIR OK)"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [po.get_text() for po in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Fermata"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bc/BBCS_Carl_Fermata.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ca.command(name="632146d", pass_context=False)  #  Carol Clover from blazblue
    async def _dd4_ca(self):
        """OverDrive Only Distortion Drive"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Arpeggio of Oblivion (OD Only)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9c/BBCP_Carl_Arpeggio.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ca.command(name="abcd", pass_context=False)  #  Carol Clover from blazblue
    async def _abcd_ca(self): 
        """Exceed Accel"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Symphony of Lament"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/3f/BBCF_Carl_ExceedAccel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ca.command(name="64641236d", pass_context=False)  #  Carol Clover from blazblue
    async def _astral_ca(self):   
        """Astral Heat"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Carl_Clover"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Deus Ex Machina"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2d/BBCP_Carl_Machina.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
###################################################################################################################################################################################################
    @bu.command(name="5a", pass_context=False)  #   Bullet from blazblue
    async def _5a_bu(self):
        """Just another punch"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```" 
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://dustloop.com/wiki/images/e/e2/BBCP_Bullet_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
		
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bu.command(name="5b", pass_context=False)  #   Bullet from blazblue
    async def _5b_bu(self):   
        """The best non-Drive poke you got"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```" 	
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://dustloop.com/wiki/images/9/9e/BBCP_Bullet_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)					
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bu.command(name="5c", pass_context=False)  #   Bullet from blazblue
    async def _5c_bu(self): 
        """Flamey punch brings satisfaction"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 	
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://dustloop.com/wiki/images/2/26/BBCP_Bullet_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @bu.command(name="2a", pass_context=False)  #   Bullet from blazblue
    async def _2a_bu(self):   
        """poke poke poke dash* poke poke"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```" 	
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://dustloop.com/wiki/images/d/d7/BBCP_Bullet_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bu.command(name="2b", pass_context=False)  #   Bullet from blazblue
    async def _2b_bu(self): 
        """Best low normal and not that bad of a poke, too"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 		
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://dustloop.com/wiki/images/3/33/BBCP_Bullet_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bu.command(name="2c", pass_context=False)  #   Bullet from blazblue
    async def _2c_bu(self):   
        """Criss-cross!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```" 	
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://dustloop.com/wiki/images/4/42/BBCP_Bullet_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bu.command(name="6a", pass_context=False)  #   Bullet from blazblue
    async def _6a_bu(self):  
        """It's an overhead"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://dustloop.com/wiki/images/1/13/BBCP_Bullet_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bu.command(name="6b", pass_context=False)  #   Bullet from blazblue
    async def _6b_bu(self):  
        """Pretty good as far as anti-airs go"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 	
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://dustloop.com/wiki/images/6/66/BBCP_Bullet_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @bu.command(name="6c", pass_context=False)  #   Bullet from blazblue
    async def _6c_bu(self):  
        """Knee of Justice?"""			
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
            mpB = "```" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```" 
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6c"
            embed1.set_image(url='http://dustloop.com/wiki/images/e/ec/BBCP_Bullet_6C.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @bu.command(name="3c", pass_context=False)  #   Bullet from blazblue
    async def _3c_bu(self):   
        """Sweep the leg"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://dustloop.com/wiki/images/8/85/BBCP_Bullet_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
			
    @bu.command(name="ja", pass_context=False)  #   Bullet from blazblue
    async def _ja_bu(self): 
        """jump* poke poke poke"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://dustloop.com/wiki/images/f/f0/BBCP_Bullet_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
			
    @bu.command(name="jb", pass_context=False)  #   Bullet from blazblue
    async def _jb_bu(self):   
        """Kick 'em in the face"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://dustloop.com/wiki/images/6/6e/BBCP_Bullet_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
			
    @bu.command(name="jc", pass_context=False)  #   Bullet from blazblue
    async def _jc_bu(self): 
        """Basically does everything"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] +"```" 
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://dustloop.com/wiki/images/c/c6/BBCP_Bullet_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bu.command(name="5d", pass_context=False)  #   Bullet from blazblue
    async def _5d_bu(self): 
        """zoop"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            my_table1 = table[45]  #table [45]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            headers3 = table_body1.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('p')]
            mp2 = info1.find('li').get_text()
            mp3 = info.find('li').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp3 + "\n" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```" 
            mpB = "```" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://dustloop.com/wiki/images/c/cc/BBCP_Bullet_5D.png')
            embed.add_field(name="Lv. 0 Frame Data", value=tab)
            embed.add_field(name="Lv. 1, 2 Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed(description='D during a D normal')
            embed1.title = "Wadcut Engage"
            embed1.set_image(url='http://dustloop.com/wiki/images/a/a3/BBCP_Bullet_5DD.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab2)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab3)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Never a bad idea to use this in the corner')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bu.command(name="jd", pass_context=False)  #   Bullet from blazblue
    async def _jd_bu(self): 
        """zoop"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            my_table1 = table[45]  #table [45]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            headers3 = table_body1.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info1.find('li').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "```" 
            mpB = "```" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://dustloop.com/wiki/images/c/cc/BBCP_Bullet_5D.png')
            embed.add_field(name="Lv. 0 Frame Data", value=tab)
            embed.add_field(name="Lv. 1, 2 Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed(description='D during a D normal')
            embed1.title = "Wadcut Engage"
            embed1.set_image(url='http://dustloop.com/wiki/images/a/a3/BBCP_Bullet_5DD.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab2)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab3)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Never a bad idea to use this in the corner')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bu.command(name="2d", pass_context=False)  #   Bullet from blazblue
    async def _2d_bu(self): 
        """A mix-up tool with a confusing animation"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            my_table1 = table[45]  #table [45]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            headers3 = table_body1.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = info1.find('li').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
            mpB = "```" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://dustloop.com/wiki/images/e/e8/BBCP_Bullet_2D.png')
            embed.add_field(name="Lv. 0 Frame Data", value=tab)
            embed.add_field(name="Lv. 1, 2 Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed(description='D during a D normal')
            embed1.title = "Wadcut Engage"
            embed1.set_image(url='http://dustloop.com/wiki/images/a/a3/BBCP_Bullet_5DD.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab2)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab3)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Never a bad idea to use this in the corner')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bu.command(name="6d", pass_context=False)  #   Bullet from blazblue
    async def _6d_bu(self): 
        """A mix-up tool with a less confusing animation"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            my_table1 = table[45]  #table [45]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            headers3 = table_body1.find_all('tr')[2]
            info1 = table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = info.find('p').get_text()
            mp2 = info1.find('li').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
            mpB = "```" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://dustloop.com/wiki/images/0/0e/BBCP_Bullet_6D.png')
            embed.add_field(name="Lv. 0 Frame Data", value=tab)
            embed.add_field(name="Lv. 1, 2 Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed(description='D during a D normal')
            embed1.title = "Wadcut Engage"
            embed1.set_image(url='http://dustloop.com/wiki/images/a/a3/BBCP_Bullet_5DD.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab2)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab3)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
            embed1.set_footer(text='Never a bad idea to use this in the corner')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bu.command(name="ft", pass_context=False)  #   Bullet from blazblue
    async def _ft_bu(self):   
        """Forward Throw: Bounces them off the wall"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = info.find('p').get_text()		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://dustloop.com/wiki/images/9/90/BBCP_Bullet_BC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bu.command(name="bt", pass_context=False)  #   Bullet from blazblue
    async def _bt_bu(self):   
        """Back Throw: Drops them to the ground"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"  
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://dustloop.com/wiki/images/7/7f/BBCP_Bullet_4BC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bu.command(name="at", pass_context=False)  #   Bullet from blazblue
    async def _at_bu(self):   
        """Air Throw: Similar to the ground forward throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"  
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://dustloop.com/wiki/images/b/b2/BBCP_Bullet_jBC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bu.command(name="ca", pass_context=False)  #   Bullet from blazblue
    async def _ca_bu(self):   
        """Counter Assault: Don't get yourself in situations when you have to use this"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://dustloop.com/wiki/images/6/66/BBCP_Bullet_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @bu.command(name="ct", pass_context=False)  #   Bullet from blazblue
    async def _ct_bu(self):   
        """Crush Trigger: There's never enough ways to crack the enemy open"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]	
            mp1 = info.find('li').get_text()
            vrs = headers.find('th').get_text()		
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://dustloop.com/wiki/images/9/9c/BBCP_Bullet_AB.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @bu.command(name="236a", pass_context=False)  #   Bullet from blazblue
    async def _s1_bu(self):   
        """Not for, but against zoning"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            my_table1 = table[49]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
            headers3 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "```"  
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"  
            mpC = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "```"  
			
            embed = discord.Embed()
            embed.title = "Flint Shooter"
            embed.add_field(name="Lv. 0 Frame Data", value=tab)
            embed.add_field(name="Lv. 1 Frame Data", value=tab1)
            embed.add_field(name="Lv. 2 Frame Data", value=tab2)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	
			
            embed1 = discord.Embed()
            embed1.title = "Flint Shooter Cont."
            embed1.set_image(url='http://dustloop.com/wiki/images/0/03/BBCP_Bullet_236A.png')
            embed1.add_field(name="Attack Properties cont.", value=mpB)

            embed2 = discord.Embed(description='236[A]')
            embed2.title = "Flint Shooter (Charged)"
            embed2.set_image(url='http://dustloop.com/wiki/images/1/13/BBCP_Bullet_236A_charged.png')
            embed2.add_field(name="Frame Data", value=tab3)
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')	
            embed2.set_footer(text='A great combo tool. Now with neutral!')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @bu.command(name="623b", pass_context=False)  #   Bullet from blazblue
    async def _s2_bu(self):   
        """Has a penchant for missing"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            my_table1 = table[53]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp3 = info1.find('li').get_text()
            mp4 = info1.find('p').get_text()
            vrs = headers1.find('th').get_text()
            vrs1 = headers2.find('th').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs1], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"  
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4 + "```"  
			
            embed = discord.Embed()
            embed.title = "Cutting Shear"
            embed.set_image(url='http://dustloop.com/wiki/images/4/4b/BBCP_Bullet_623B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed(description='22D during Cutting Shear')
            embed1.title = "Explode Engage"
            embed1.set_image(url='http://dustloop.com/wiki/images/d/dc/BBCP_Bullet_22D.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab1)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	
            embed1.set_footer(text='A rare sight to see, but a cool one')				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @bu.command(name="41236c", pass_context=False)  #   Bullet from blazblue
    async def _s3_bu(self):   
        """Just don't use it as a command dash"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            my_table1 = table[57]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers2 = table_body1.find_all('tr')[1]
            headers3 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [op1.get_text() for op1 in info1.find_all('li')]
            mp3 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```"  
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp3 + "```"  
			
            embed = discord.Embed()
            embed.title = "Miquelet Capture"
            embed.set_image(url='http://dustloop.com/wiki/images/7/75/BBCP_Bullet_41236C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Brake Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed(description='236D during Miquelet Capture')
            embed1.title = "Piercing Engage"
            embed1.set_image(url='http://dustloop.com/wiki/images/4/4f/BBCP_Bullet_236D.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab2)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab3)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	
            embed1.set_footer(text='This baby hurts')				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @bu.command(name="623c", pass_context=False)  #   Bullet from blazblue
    async def _s4_bu(self):   
        """Barely even an anti-air"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            my_table1 = table[61]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp4 = [po1.get_text() for po1 in info1.find_all('p')]
            mp3 = info1.find('li').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"  
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "```"  
			
            embed = discord.Embed()
            embed.title = "Snaphance Fist(Ground)"
            embed.set_image(url='http://dustloop.com/wiki/images/5/59/BBCP_Bullet_623C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed(description='623D during Snaphance Fist')
            embed1.title = "Flechette Engage"
            embed1.set_image(url='http://dustloop.com/wiki/images/1/14/BBCP_Bullet_623D.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab1)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	
            embed1.set_footer(text='Catch and boom')				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @bu.command(name="j623c", pass_context=False)  #   Bullet from blazblue
    async def _s5_bu(self):   
        """Barely even an anti-air"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            my_table1 = table[61]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp4 = [po1.get_text() for po1 in info1.find_all('p')]
            mp3 = info1.find('li').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"  
            mpB = "```" + "*" + mp3 + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "```"  
			
            embed = discord.Embed()
            embed.title = "Snaphance Fist(Air)"
            embed.set_image(url='http://dustloop.com/wiki/images/5/59/BBCP_Bullet_623C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed(description='623D during Snaphance Fist')
            embed1.title = "Flechette Engage"
            embed1.set_image(url='http://dustloop.com/wiki/images/1/14/BBCP_Bullet_623D.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab1)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	
            embed1.set_footer(text='Catch and boom')				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bu.command(name="360b", pass_context=False)  #   Bullet from blazblue
    async def _s6_bu(self):   
        """Heel drop"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            my_table1 = table[65]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            headers2 = table_body1.find_all('tr')[2]
            info1 =  table_body1.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp3 = [op.get_text() for op in info1.find_all('li')]
            mp4 = info1.find('p').get_text()
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()
            vrs = headers1.find('th').get_text()
            vrs1 = headers2.find('th').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs1], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"  
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```"  
			
            embed = discord.Embed()
            embed.title = "Crossfire Wheel"
            embed.set_image(url='http://dustloop.com/wiki/images/8/84/BBCF_Bullet_CrossfireWheel.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed(description='63214D during Crossfire Wheel')
            embed1.title = "Shot Shell: Engage"
            embed1.set_image(url='http://dustloop.com/wiki/images/4/46/BBCF_Bullet_Shot_Shell_Engage.png')
            embed1.add_field(name="Lv. 1 Frame Data", value=tab1)
            embed1.add_field(name="Lv. 2 Frame Data", value=tab2)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	
            embed1.set_footer(text='Drag your opponent through the dirt!')				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bu.command(name="214d", pass_context=False)  #   Bullet from blazblue
    async def _s7_bu(self):   
        """For when they try to make fun of your stubby dash"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()			

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"  
			
            embed = discord.Embed()
            embed.title = "Afterburner"
            embed.set_image(url='http://dustloop.com/wiki/images/4/41/BBCP_Bullet_214D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @bu.command(name="2363214c", pass_context=False)  #   Bullet from blazblue
    async def _dd1_bu(self):
        """The ultimate combo ender."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Rage Aggressor"
            embed.set_image(url='http://dustloop.com/wiki/images/e/ee/BBCP_Bullet_2363214C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @sa.command(name="720a", pass_context=False)  #   Bullet from blazblue
    async def _dd2_bu(self):
        """And they said she's not a grappler."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed(description="And they said she's not a grappler.")
            embed.title = "Serpentine Assault"
            embed.set_image(url='http://dustloop.com/wiki/images/9/9c/BBCP_Bullet_720A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					

    @sa.command(name="720d", pass_context=False)  #   Bullet from blazblue
    async def _dd3_bu(self):
        """720D during Serpentine Assault: It's not over yet!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"
			
            embed = discord.Embed(description='720D during Serpentine Assault')
            embed.title = "Frangible Engage"
            embed.set_image(url='http://dustloop.com/wiki/images/b/b0/BBCP_Bullet_720D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.set_footer(text="It's not over yet!")	
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @sa.command(name="1080d", pass_context=False)  #   Bullet from blazblue
    async def _dd4_bu(self):
        """1080D during Frangible Engage: Lights out!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed(description='1080D during Frangible Engage')
            embed.title = "Blackout"
            embed.set_image(url='http://dustloop.com/wiki/images/f/f8/BBCP_Bullet_1080D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.set_footer(text="Lights out!")	
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @bu.command(name="abcd", pass_context=False)  #   Bullet from blazblue
    async def _abcd_bu(self): 
        """Exceed Accel: Dat corner carry"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Execution Maneuver"
            embed.set_image(url='http://dustloop.com/wiki/images/7/7e/BBCF_Bullet_ExcecutionManeuver.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @bu.command(name="632146d", pass_context=False)  #   Bullet from blazblue
    async def _astral_bu(self):   
        """Astral Heat: Actually not that hard to kill with"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bullet"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```"
			
            embed = discord.Embed()
            embed.title = "Hard Kill Bringer"
            embed.set_image(url='http://dustloop.com/wiki/images/0/0f/BBCP_Bullet_AH.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
###################################################################################################################################################################################################
    @ba.command(name="5a", pass_context=False)  #   Bang Shishigami from blazblue
    async def _5a_ba(self):
        """The Multipurpose God Jab"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/74/BBCS_Bang_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
		
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ba.command(name="5b", pass_context=False)  #   Bang Shishigami from blazblue
    async def _5b_ba(self):   
        """Its like 5A, except stronger!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 	
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ef/BBCS_Bang_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)					
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ba.command(name="5c", pass_context=False)  #   Bang Shishigami from blazblue
    async def _5c_ba(self): 
        """Go to Overhead with many options. Everyone else wishes they had this."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 	
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9f/BBCS_Bang_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @ba.command(name="2a", pass_context=False)  #   Bang Shishigami from blazblue
    async def _2a_ba(self):   
        """We lost a human right to buff this."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 	
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/03/BBCS_Bang_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ba.command(name="2b", pass_context=False)  #   Bang Shishigami from blazblue
    async def _2b_ba(self): 
        """Situational Poke. Extend then retract. Extend. Then retract."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 		
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/09/BBCS_Bang_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ba.command(name="2c", pass_context=False)  #   Bang Shishigami from blazblue
    async def _2c_ba(self):   
        """Sweep them off their feet, you charmer."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```" 	
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/ce/BBCS_Bang_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ba.command(name="6a", pass_context=False)  #   Bang Shishigami from blazblue
    async def _6a_ba(self):  
        """Only Plus Normal. Watch your toes!"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2[0] + "```" 
            mpB = "```" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```" 
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "6A Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b6/BBCS_Bang_6A.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ba.command(name="6b", pass_context=False)  #   Bang Shishigami from blazblue
    async def _6b_ba(self):  
        """Overhead #2. No, 6B loops are still dead."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```" 	
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/52/BBCS_Bang_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ba.command(name="6c", pass_context=False)  #   Bang Shishigami from blazblue
    async def _6c_ba(self):  
        """Standing Combo Filler. Whiff this on crouch, and you die."""			
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```" 
			
            embed = discord.Embed()
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6a/BBCS_Bang_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ba.command(name="3c", pass_context=False)  #   Bang Shishigami from blazblue
    async def _3c_ba(self):   
        """Remember when this had head invuln? ...WHY!?"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
            mpB = "```" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```" 	
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "3c Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/db/BBCS_Bang_3C.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
			
    @ba.command(name="ja", pass_context=False)  #   Bang Shishigami from blazblue
    async def _ja_ba(self): 
        """Its like 5A, but in the AIR!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/35/BBCS_Bang_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
			
    @ba.command(name="jb", pass_context=False)  #   Bang Shishigami from blazblue
    async def _jb_ba(self):   
        """Air-to-Air Poke. Almost a sword normal?"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/52/BBCS_Bang_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
			
    @ba.command(name="jc", pass_context=False)  #   Bang Shishigami from blazblue
    async def _jc_ba(self): 
        """A version of 6C that actually hits crouching! Also good Yolo poke."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6a/BBCS_Bang_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ba.command(name="j4b", pass_context=False)  #   Bang Shishigami from blazblue
    async def _j4b_ba(self): 
        """Or as KoF players would call it, THE TACO!!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "J.4B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ad/BBCS_Bang_j4B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ba.command(name="j2c", pass_context=False)  #   Bang Shishigami from blazblue
    async def _j2c_ba(self): 
        """Dat ain't Falco!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```" 
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/dd/BBCS_Bang_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bh.command(name="5d", pass_context=False)  #   Bang Shishigami from blazblue
    async def _5d_ba(self): 
        """Looks like an anti air. Blocks lows. I don't understand."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "```"      
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```" 			
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "5D Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/2/2b/BBCS_Bang_5D.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bh.command(name="2d", pass_context=False)  #   Bang Shishigami from blazblue
    async def _2d_ba(self): 
        """Oh look! Something that resembles an anti-air!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp2[0] + "```" 
            mpB = "```" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```" 	
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "2D Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/a/ad/BBCS_Bang_2D.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bh.command(name="6d", pass_context=False)  #   Bang Shishigami from blazblue
    async def _6d_ba(self): 
        """Used somewhat like a reversal. Its not that good at it though."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/39/BBCS_Bang_6D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bh.command(name="jd", pass_context=False)  #   Bang Shishigami from blazblue
    async def _jd_ba(self): 
        """Air combo DUNK. Now an actual overhead!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "```" 
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 	
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "J.D Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f2/BBCS_Bang_jD.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bh.command(name="gp", pass_context=False)  #   Bang Shishigami from blazblue
    async def _gp_ba(self): 
        """Pssshhh... Nothin Personnel, kid."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            info = my_table.find('td').get_text()
			
            mpA = "```" + info + "```" 
			
            embed = discord.Embed(description='A/B/C during Guardpoint')
            embed.title = "Secret Art: Bang's Shadowstep Jutsu"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bb/BBCS_Bang_Shadowstep.png')
            embed.add_field(name="Attack Properties", value=mpA, inline='true')
            embed.set_footer(text='Pssshhh... Nothin Personnel, kid.')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bh.command(name="gpd", pass_context=False)  #   Bang Shishigami from blazblue
    async def _gpd_ba(self): 
        """I can Drive Explode that!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp1[8] + "\n" + "*" + mp1[9] + "```" 
            mpB = "```" + "*" + mp2[0] + "```" 
            mpC = "```" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed(description='D during Guardpoint')
            embed.title = "Secret Technique: Bang's Pulverizing Blast Jutsu"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.set_footer(text='I can Drive Explode that!')
			
            embed1 = discord.Embed()
            embed1.title = "Secret Technique: Bang's Pulverizing Blast Jutsu Cont."
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Secret Technique: Bang's Pulverizing Blast Jutsu Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/a/ae/BBCF_Bang_D-DFollowup.png')
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ba.command(name="ft", pass_context=False)  #   Bang Shishigami from blazblue
    async def _ft_ba(self):   
        """Forward Throw: Bang was a fan of Nero's Dash taunt, I see..."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()			

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```" 
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/de/BBCS_Bang_GroundThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ba.command(name="bt", pass_context=False)  #   Bang Shishigami from blazblue
    async def _bt_ba(self):   
        """Back Throw: Bang was a fan of Nero's Dash taunt, I see..."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]	
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()		

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"  
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/de/BBCS_Bang_GroundThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ba.command(name="at", pass_context=False)  #   Bang Shishigami from blazblue
    async def _at_ba(self):   
        """Air Throw: BEHIND ME!!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"  
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCS_Bang_AirThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ba.command(name="ca", pass_context=False)  #   Bang Shishigami from blazblue
    async def _ca_ba(self):   
        """Counter Assault: GET AWAY FROM ME"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```"  
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ef/BBCS_Bang_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @ba.command(name="ct", pass_context=False)  #   Bang Shishigami from blazblue
    async def _ct_ba(self):   
        """Crush Trigger: Wish it was better :<"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]		

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"  
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCP_Bang_CT.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ba.command(name="623c", pass_context=False)  #   Bang Shishigami from blazblue
    async def _s1_ba(self):   
        """The Galaxy special"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```" 
			
            embed = discord.Embed()
            embed.title = "Bang's Void Tempest Kick"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/06/BBCS_Bang_VoidTempestKick.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ba.command(name="j623c", pass_context=False)  #   Bang Shishigami from blazblue
    async def _s2_ba(self):   
        """BANGU KNACKURUS!!!!!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "Bang's Void Tempest Kick EX"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/31/BBCS_Bang_VoidTempestKickEX.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ba.command(name="623b", pass_context=False)  #   Bang Shishigami from blazblue
    async def _s3_ba(self):   
        """Solgaleo existed before Solgaleo was even a thing! He IS the Legendary Pokemon..."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "Bang's Unstoppable Double Palm Thrust"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2b/BBCS_Bang_SuperCrash.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ba.command(name="j623b", pass_context=False)  #   Bang Shishigami from blazblue
    async def _s4_ba(self):   
        """R.I.P Dora Special"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```" 
			
            embed = discord.Embed()
            embed.title = "Bang's Heavenly Double Palm Thrust"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/28/BBCS_Bang_HeavenlyPhoenix.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ba.command(name="j236a", pass_context=False)  #   Bang Shishigami from blazblue
    async def _s5_ba(self):   
        """BANG STYLE SHURIKEN!(A)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 =  table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp4 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp1[8] + "\n" + "*" + mp1[9] + "```"  
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"  
            mpC = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp3[3] + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "```"  
			
            embed = discord.Embed()
            embed.title = "Bang-style Shuriken(A)"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed()
            embed1.title = "Bang-style Shuriken(A) Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/d6/BBCS_Bang_ShurikenThrow.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	
			
            embed2 = discord.Embed()
            embed2.title = "Bang-style Shuriken(A+D)"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/3/36/BBCS_Bang_ANail.png')
            embed2.add_field(name="Frame Data", value=tab1)
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @ba.command(name="j236b", pass_context=False)  #   Bang Shishigami from blazblue
    async def _s6_ba(self):   
        """BANG STYLE SHURIKEN!(B)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[5]
            info =  table_body.find_all('tr')[6]
            headers1 = table_body.find_all('tr')[7]
            info1 =  table_body.find_all('tr')[8]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp4 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"  
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp3[3] + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "```"  
			
            embed = discord.Embed()
            embed.title = "Bang-style Shuriken(B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d6/BBCS_Bang_ShurikenThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed()
            embed1.title = "Bang-style Shuriken(B+D)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/d0/BBCS_Bang_BNail.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ba.command(name="j236c", pass_context=False)  #   Bang Shishigami from blazblue
    async def _s7_ba(self):   
        """BANG STYLE SHURIKEN!(C)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[9]
            info =  table_body.find_all('tr')[10]
            headers1 = table_body.find_all('tr')[11]
            info1 =  table_body.find_all('tr')[12]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp4 = [po1.get_text() for po1 in info1.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"  
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp3[3] + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "```"  
			
            embed = discord.Embed()
            embed.title = "Bang-style Shuriken(C)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d6/BBCS_Bang_ShurikenThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed()
            embed1.title = "Bang-style Shuriken(C+D)"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/e/e2/BBCS_Bang_CNail.png')
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ba.command(name="j236d", pass_context=False)  #   Bang Shishigami from blazblue
    async def _s8_ba(self):   
        """BANG STYLE SHURIKEN!(D)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[13]
            info =  table_body.find_all('tr')[14]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"  
			
            embed = discord.Embed()
            embed.title = "Bang-style Shuriken(D)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCS_Bang_DNail.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')				
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ba.command(name="632146b", pass_context=False)  #   Bang Shishigami from blazblue
    async def _s9_ba(self):   
        """It got buffed... STILL doesn't see much use though."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2 + "```"  
			
            embed = discord.Embed()
            embed.title = "Bang's Steel Rain"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b4/BBCS_Bang_Umbrella.png')	
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')						
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ba.command(name="j22a", pass_context=False)  #   Bang Shishigami from blazblue
    async def _s10_ba(self):   
        """It got buffed... STILL doesn't see much use though."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp1[8] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            mpC = "```" + "*" + mp2[3] + "\n" + "*" + mp2[4] + "\n" + "*" + mp2[5] + "```"
			
            embed = discord.Embed()
            embed.title = "Flaming Air Attack"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed()
            embed1.title = "Flaming Air Attack Cont."	
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	

            embed2 = discord.Embed()
            embed2.title = "Flaming Air Attack Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/f/fb/BBCP_Bang_FlamingAirAttack.png')		
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ba.command(name="snb", pass_context=False)  #   Bang Shishigami from blazblue
    async def _s11_ba(self):   
        """Set Nail/Bumpers - 214A/B/C/D air OK"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            my_table1 = table[67]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 =  table_body.find_all('tr')[4]
            headers2 = table_body1.find_all('tr')[1]
            info2 =  table_body1.find_all('tr')[2]
            headers3 = table_body1.find_all('tr')[3]
            info3 =  table_body1.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            mp4 = [po1.get_text() for po1 in info1.find_all('p')]
            mp5 = [op2.get_text() for op2 in info2.find_all('li')]
            mp6 = [po2.get_text() for po2 in info3.find_all('li')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp1[8] + "\n" + "*" + mp1[9] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            mpC = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp3[2] + "\n" + "*" + mp4[0] + "\n" + "*" + mp4[1] + "```"
            mpD = "```" + "*" + mp5[0] + "\n" + "*" + mp5[1] + "\n" + "*" + mp5[2] + "\n" + "*" + mp5[3] + "```"
            mpE = "```" + "*" + mp6[0] + "\n" + "*" + mp6[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Set Nail/Bumpers(Ground)"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Set Nail/Bumpers(Ground)Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/73/BBCF_Bang_NailSetDiagramGround.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            embed2 = discord.Embed()
            embed2.title = "Set Nail/Bumpers(Air)"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/c/c3/BBCF_Bang_NailSetDiagramAir.png')
            embed2.add_field(name="Frame Data", value=tab1)
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')					

            embed3 = discord.Embed(description='Any direction off Set Nail')
            embed3.title = "Nail Dash"
            embed3.set_image(url='http://www.dustloop.com/wiki/images/5/59/BBCS_Bang_NailDash.png')
            embed3.add_field(name="Ground Frame Data", value=tab2)
            embed3.add_field(name="Attack Props:", value=mpD, inline='true')
            embed3.add_field(name="Air Frame Data", value=tab3)
            embed3.add_field(name="Attack Props:", value=mpE, inline='true')
            embed3.set_footer(text='SHINOBI!')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ba.command(name="frkzd", pass_context=False)  #   Bang Shishigami from blazblue
    async def _s12_ba(self):   
        """FuRinKaZan Dash: Just believe justice! Seigi jōtō! Tamashī de!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
            mpC = "```" + "*" + mp2[3] + "\n" + "*" + mp2[4] + "```"
			
            embed = discord.Embed(description='Any direction during Overdrive')
            embed.title = "FuRinKaZan Dash"
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed()
            embed1.title = "FuRinKaZan Dash Cont."	
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')		

            embed2 = discord.Embed()
            embed2.title = "FuRinKaZan Dash Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/5/59/BBCS_Bang_NailDash.png')	
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ba.command(name="2363214c", pass_context=False)  #   Bang Shishigami from blazblue
    async def _dd1_ba(self):
        """Instant corner carry, just add meter."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Shishigami-style Secret Technique: Fatal Eruption/Daifunka"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/db/BBCS_Bang_Daifunka.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ba.command(name="236236a", pass_context=False)  #   Bang Shishigami from blazblue
    async def _dd2_ba(self):
        """The DP Attack is the most reliable move in the game. Now ACTUALLY punishable."""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "Shishigami-style Technique: Bang's Infinite Chaos-Fist of the Void/Ashura"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/44/BBCS_Bang_Ashura.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")							

    @ba.command(name="236236d", pass_context=False)  #   Bang Shishigami from blazblue
    async def _dd3_ba(self):
        """I heard you like zoning... Would be a shame if I... invalidated it!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
            mpC = "```" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Ultra Technique: Hyper Shadowstep Strike"
            embed.add_field(name="Normal (vs. Grounded Opponent) Frame Data", value=tab)
            embed.add_field(name="Overdrive (vs. Grounded Opponent) Frame Data", value=tab1)
            embed.add_field(name="Normal (vs. Airborne Opponent) Frame Data", value=tab2)
            embed.add_field(name="Overdrive (vs. Airborne Opponent) Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            embed1 = discord.Embed()
            embed1.title = "Ultra Technique: Hyper Shadowstep Strike Cont."
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	

            embed2 = discord.Embed()
            embed2.title = "Ultra Technique: Hyper Shadowstep Strike Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/d/df/BBCP_Bang_Shadowstep_Strike.png')
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')				
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ba.command(name="abcd", pass_context=False)  #   Bang Shishigami from blazblue
    async def _abcd_ba(self): 
        """Exceed Accel: Throw the Shurikens. Throw the Kunai. Throw the Nails. BOMB THIS BOI!! Don't expect Oki though."""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "```"
            mpB = "```" + "*" + mp2[0] + "```"
            mpC = "```" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Bang's Dancing Petal Storm"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Bang's Dancing Petal Storm Cont."
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "Bang's Dancing Petal Storm Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/7/7a/BBCF_Bang_ExceedAccel.png')
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ba.command(name="j6321463214d", pass_context=False)  #   Bang Shishigami from blazblue
    async def _astral_ba(self):   
        """Astral Heat: I AM... JUSTICE!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Bang_Shishigami"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp1[8] + "\n" + "*" + mp1[9] + "```"
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "Shishigami-style Forbidden Technique: The Ultimate Bang"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d1/BBCS_Bang_TheUltimateBang.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "Shishigami-style Forbidden Technique: The Ultimate Bang"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/f/f0/BBCS_Bang_AstralAnimation.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            embed2 = discord.Embed()
            embed2.title = "I AM... JUSTICE!"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/b/ba/BBCS_Bang_AstralFinishPose.png')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

###################################################################################################################################################################################################
    @ar.command(name="5a", pass_context=False)  #  Arakune from blazblue
    async def _5a_ar(self):
        """Standard poke. Hit Crouchers. Good for its range."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c7/BBCS_Arakune_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
		
            await self.bot.say(embed=embed)            
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="5b", pass_context=False)  #  Arakune from blazblue
    async def _5b_ar(self):   
        """Combo filler, really"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```" 	
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a0/BBCS_Arakune_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)					
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="5c", pass_context=False)  #  Arakune from blazblue
    async def _5c_ar(self): 
        """Standard Anti Air, needs a little bit of prediction"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```" 	
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/07/BBCS_Arakune_5C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
	
    @ar.command(name="2a", pass_context=False)  #  Arakune from blazblue
    async def _2a_ar(self):   
        """Funky Attack, reaches a little farther than it looks"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 	
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ae/BBCS_Arakune_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="2b", pass_context=False)  #  Arakune from blazblue
    async def _2b_ar(self): 
        """Secretly your real anti-air"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```" 			
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/43/BBCS_Arakune_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="2c", pass_context=False)  #  Arakune from blazblue
    async def _2c_ar(self):   
        """The infamous shark"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 	
			
            embed = discord.Embed()
            embed.title = "2c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9e/BBCS_Arakune_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="6a", pass_context=False)  #  Arakune from blazblue
    async def _6a_ar(self):  
        """Overhead, not a bad one in fact"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/10/BBCS_Arakune_6A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="6b", pass_context=False)  #  Arakune from blazblue
    async def _6b_ar(self):  
        """PELVIC THRUST"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```" 	
			
            embed = discord.Embed()
            embed.title = "6b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6a/BBCS_Arakune_6B.png')
            embed.add_field(name="5a/6a > 6b Frame Data", value=tab)
            embed.add_field(name="standalone 6b Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="4b", pass_context=False)  #  Arakune from blazblue
    async def _4b_ar(self):  
        """Millipede NASCAR"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "4B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0d/BBCS_Arakune_4B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ar.command(name="6c", pass_context=False)  #  Arakune from blazblue
    async def _6c_ar(self):  
        """Impractical pre-curse overhead. Combo Staple in Curse."""			
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "```" 
			
            embed = discord.Embed(description='Impractical pre-curse overhead. Combo Staple in Curse.')
            embed.title = "6c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f8/BBCS_Arakune_6C1.png')
            embed.add_field(name="Frame Data", value=tab)
			
            embed1 = discord.Embed(description='Follow up #1 from 6C. Fruitful for its cross-up reset, not too good for anything else other than combo filler.')
            embed1.title = "6cc"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/2/20/BBCS_Arakune_6C2.png')
            embed1.add_field(name="Frame Data", value=tab1)
			
            embed2 = discord.Embed(description='Follow up #2 from 6C. Combo filler. Nothing more.')
            embed2.title = "6ccc"
            embed2.set_image(url='http://www.dustloop.com/wiki/images/2/2d/BBCS_Arakune_6C3.png')
            embed2.add_field(name="Frame Data", value=tab2)
            embed2.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ar.command(name="3c", pass_context=False)  #  Arakune from blazblue
    async def _3c_ar(self):   
        """Don't use this move unless you are 100% sure it will hit (or doing an unblockable)"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "3c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/24/BBCS_Arakune_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
			
    @ar.command(name="ja", pass_context=False)  #  Arakune from blazblue
    async def _ja_ar(self): 
        """Pretty good air to air"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ac/BBCS_Arakune_jA.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
			
    @ar.command(name="jb", pass_context=False)  #  Arakune from blazblue
    async def _jb_ar(self):   
        """Arakune's most valuable attack pre-curse"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/59/BBCS_Arakune_jB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
			
    @ar.command(name="jc", pass_context=False)  #  Arakune from blazblue
    async def _jc_ar(self): 
        """Combo tool pre-curse, high damage."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a8/BBCS_Arakune_jC.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="j6a", pass_context=False)  #  Arakune from blazblue
    async def _j6a_ar(self): 
        """Air to air confirm and combo filler. With high execution, it's good for pressure."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCS_Arakune_bird.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="j6b", pass_context=False)  #  Arakune from blazblue
    async def _j6b_ar(self): 
        """Air to air confirm and combo filler. With high execution, it's good for pressure."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCS_Arakune_bird.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="j6c", pass_context=False)  #  Arakune from blazblue
    async def _j6c_ar(self): 
        """Air to air confirm and combo filler. With high execution, it's good for pressure."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f3/BBCS_Arakune_bird.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="j2a", pass_context=False)  #  Arakune from blazblue
    async def _j2a_ar(self): 
        """Combo filler. Never try to use this as a starter."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1f/BBCF_Arakune_dive.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="j2b", pass_context=False)  #  Arakune from blazblue
    async def _j2b_ar(self): 
        """Combo filler. Never try to use this as a starter."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1f/BBCF_Arakune_dive.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="j2c", pass_context=False)  #  Arakune from blazblue
    async def _j2c_ar(self): 
        """Combo filler. Never try to use this as a starter."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[3]
            info = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/1f/BBCF_Arakune_dive.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="5d", pass_context=False)  #  Arakune from blazblue
    async def _5d_ar(self): 
        """*Cough*"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"            
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b0/BBCS_Arakune_5D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="1d", pass_context=False)  #  Arakune from blazblue
    async def _1d_ar(self): 
        """Bad Start up, don't use point blank. Kinda unsafe in most situations, but it's a half decent for mid-range zoning."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "1D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/29/BBCS_Arakune_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="2d", pass_context=False)  #  Arakune from blazblue
    async def _2d_ar(self): 
        """Bad Start up, don't use point blank. Kinda unsafe in most situations, but it's a half decent for mid-range zoning."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "2D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/29/BBCS_Arakune_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="3d", pass_context=False)  #  Arakune from blazblue
    async def _3d_ar(self): 
        """Bad Start up, don't use point blank. Kinda unsafe in most situations, but it's a half decent for mid-range zoning."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = info.find('p').get_text()
            mp1 = info.find('li').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "3D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/29/BBCS_Arakune_2D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="6d", pass_context=False)  #  Arakune from blazblue
    async def _6d_ar(self): 
        """Headbutt, really."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            headers1 = table_body.find_all('tr')[3]
            info1 = table_body.find_all('tr')[4]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = [op.get_text() for op in info1.find_all('li')]
            mp4 = info1.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```" 
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + mp4 + "```" 
			
            embed = discord.Embed()
            embed.title = "6D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/67/BBCS_Arakune_6D.png')
            embed.add_field(name="Headbutt Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="Bell Bug Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="jd", pass_context=False)  #  Arakune from blazblue
    async def _jd_ar(self): 
        """Combo and zoning tool. Hits mid, don't be fooled."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/14/BBCF_Arakune_jDRange.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bugs.command(name="a", pass_context=False)  #  Arakune from blazblue
    async def _bugsa_ar(self): 
        """Bouncy"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed(description='Bouncy')
            embed.title = "Bug(A)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d3/BBCF_Arakune_ABugs.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bugs.command(name="b", pass_context=False)  #  Arakune from blazblue
    async def _bugsb_ar(self): 
        """Drill Monster"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed(description='Drill Monster')
            embed.title = "Bug(B)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a3/BBCF_Arakune_BBugs.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bugs.command(name="c", pass_context=False)  #  Arakune from blazblue
    async def _bugsc_ar(self): 
        """Mr. Gaurd Crush Your Girl"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed(description='Mr. Gaurd Crush Your Girl')
            embed.title = "Bug(C)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4d/BBCF_Arakune_CBugs.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @bugs.command(name="d", pass_context=False)  #  Arakune from blazblue
    async def _bugsd_ar(self): 
        """Bane of everyone's existence"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed(description="Bane of everyone's existence")
            embed.title = "Bug(D)"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2b/BBCF_Arakune_DBugs.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="ft", pass_context=False)  #  Arakune from blazblue
    async def _ft_ar(self):   
        """Forward Throw: Not bad considering Arakune rarely grabs."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0c/BBCS_Arakune_GroundThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="bt", pass_context=False)  #  Arakune from blazblue
    async def _bt_ar(self):   
        """Back Throw: Not bad considering Arakune rarely grabs."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"  
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0c/BBCS_Arakune_GroundThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="at", pass_context=False)  #  Arakune from blazblue
    async def _at_ar(self):   
        """Air Throw: Hugs"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"  
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/cb/BBCS_Arakune_AirThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="ca", pass_context=False)  #  Arakune from blazblue
    async def _ca_ar(self):   
        """Counter Assault: Better than a throw overall"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"  
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6a/BBCS_Arakune_6B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @ar.command(name="ct", pass_context=False)  #  Arakune from blazblue
    async def _ct_ar(self):   
        """Crush Trigger: What a calamity"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()	
            vrs = headers.find('th').get_text()	
            vrs1 = headers1.find('th').get_text()				

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"  
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/0a/BBCP_Arakune_AB.png')
            embed.add_field(name="Uncharged Frame Data", value=tab)
            embed.add_field(name="Charged Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ar.command(name="236b", pass_context=False)  #  Arakune from blazblue
    async def _s1_ar(self):   
        """GET IT!?"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp1[8] + "\n" + "*" + mp1[9] + "\n" + "*" + mp1[10] + "\n" + "*" + mp2[3] + "```" 
			
            embed = discord.Embed()
            embed.title = "Equals Zero"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c0/BBCS_Arakune_EqualsZero.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ar.command(name="236d", pass_context=False)  #  Arakune from blazblue
    async def _s2_ar(self):   
        """The Random Cloud"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "```" 
            mpB = "```" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```" 
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Zero Vector"
            embed.add_field(name="Ground Frame Data", value=tab)
            embed.add_field(name="Air Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		
			
            embed1 = discord.Embed()
            embed1.title = "Zero Vector Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/7/7c/BBCS_Arakune_ZeroVector.png')
            embed1.add_field(name="Attack Props Cont.", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @ar.command(name="j236c", pass_context=False)  #  Arakune from blazblue
    async def _s3_ar(self):   
        """Combo Staple"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "Y-Two Dash"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/04/BBCS_Arakune_YTwoDash.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @ar.command(name="22a", pass_context=False)  #  Arakune from blazblue
    async def _s4_ar(self):   
        """R.I.P Dora Special"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "Permutation, N, R"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/59/BBCP_Arakune_Permutation.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="22b", pass_context=False)  #  Arakune from blazblue
    async def _s5_ar(self):   
        """Sp00der"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "Permutation, N, R"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/59/BBCP_Arakune_Permutation.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
		
    @ar.command(name="22c", pass_context=False)  #  Arakune from blazblue
    async def _s6_ar(self):   
        """Sp00der"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "Permutation, N, R"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/59/BBCP_Arakune_Permutation.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="j22a", pass_context=False)  #  Arakune from blazblue
    async def _s7_ar(self):   
        """Sp00der"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "Permutation, N, R"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/59/BBCP_Arakune_Permutation.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="j22b", pass_context=False)  #  Arakune from blazblue
    async def _s8_ar(self):   
        """Sp00der"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "Permutation, N, R"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/59/BBCP_Arakune_Permutation.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="j22c", pass_context=False)  #  Arakune from blazblue
    async def _s9_ar(self):   
        """Sp00der"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "Permutation, N, R"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/59/BBCP_Arakune_Permutation.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ar.command(name="c236d", pass_context=False)  #  Arakune from blazblue
    async def _s10_ar(self):   
        """Slooooooow"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2[0] + "```"
            mpB = "```" + "*" + mp2[1] + "```"
            mpC = "```" + "*" + mp2[2] + "```"  	  			
			
            embed = discord.Embed(description='236D during Curse (Air OK)')
            embed.title = "a±b"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed()
            embed1.title = "a±b cont."
            embed1.add_field(name="Attack Props Cont.", value=mpB, inline='true')

            embed2 = discord.Embed()
            embed2.title = "a±b cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/c/c9/BBCP_Arakune_AplusminusB.png')
            embed2.add_field(name="Attack Props Cont.", value=mpC, inline='true')				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			
			
    @ar.command(name="214a", pass_context=False)  #  Arakune from blazblue
    async def _s11_ar(self):   
        """Grounded teleport options."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            my_table1 = table[69]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            #mp4 = info1.find('p').get_text() Too much text had to split it manually in half
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"  
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + "A strike grabbing spider that appears after teleports if the opponent is close enough to Arakune's departure. If the spider hits, the opponent is cocooned and hoisted up to the top of the screen. Equally useful as a combo tool and as a free punish for those who get too eager to rush you while teleporting. This moves properties are identical no matter which teleport was used to create it, but some teleports are able to use it much better than others (Ground and air 214B are especially good for it)." + "```"  
            mpC = "```" + "*" + "No matter how close to teching the opponent is the cocoon will always finish reaching the top of the screen before they are allowed to airtech. They will always be able to tech once it reaches the top, even on a Fatal Counter, so tag a curse building spider on the end of it if you can't follow up with a proper combo before they reach the apex of the stage. Alternatively, you can take the time they're in the cocoon to position yourself, set up clouds, or turn invisible; sometimes a better use of time if you weren't able to follow with a combo to build full curse meter." + "```"  
			
            embed = discord.Embed()
            embed.title = "If p then q"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fa/BBCF_Arakune_GroundTeleports.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed(description='Near opponent during the startup of If p then q')
            embed1.title = "Negating p"
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	
            embed1.set_footer(text='Swiggity swooty...')		

            embed2 = discord.Embed()
            embed2.title = "Negating p Cont. "
            embed2.set_image(url='http://www.dustloop.com/wiki/images/5/5a/BBCF_Arakune_P_Reject.png')
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="214b", pass_context=False)  #  Arakune from blazblue
    async def _s12_ar(self):   
        """Grounded teleport options."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            my_table1 = table[69]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[3]
            info =  table_body.find_all('tr')[4]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            #mp4 = info1.find('p').get_text() Too much text had to split it manually in half
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"  
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + "A strike grabbing spider that appears after teleports if the opponent is close enough to Arakune's departure. If the spider hits, the opponent is cocooned and hoisted up to the top of the screen. Equally useful as a combo tool and as a free punish for those who get too eager to rush you while teleporting. This moves properties are identical no matter which teleport was used to create it, but some teleports are able to use it much better than others (Ground and air 214B are especially good for it)." + "```"  
            mpC = "```" + "*" + "No matter how close to teching the opponent is the cocoon will always finish reaching the top of the screen before they are allowed to airtech. They will always be able to tech once it reaches the top, even on a Fatal Counter, so tag a curse building spider on the end of it if you can't follow up with a proper combo before they reach the apex of the stage. Alternatively, you can take the time they're in the cocoon to position yourself, set up clouds, or turn invisible; sometimes a better use of time if you weren't able to follow with a combo to build full curse meter." + "```"  
			
            embed = discord.Embed()
            embed.title = "If p then q"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fa/BBCF_Arakune_GroundTeleports.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed(description='Near opponent during the startup of If p then q')
            embed1.title = "Negating p"
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	
            embed1.set_footer(text='Swiggity swooty...')		

            embed2 = discord.Embed()
            embed2.title = "Negating p Cont. "
            embed2.set_image(url='http://www.dustloop.com/wiki/images/5/5a/BBCF_Arakune_P_Reject.png')
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="214c", pass_context=False)  #  Arakune from blazblue
    async def _s13_ar(self):   
        """Grounded teleport options."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            my_table1 = table[69]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[5]
            info =  table_body.find_all('tr')[6]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            #mp4 = info1.find('p').get_text() Too much text had to split it manually in half
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"  
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + "A strike grabbing spider that appears after teleports if the opponent is close enough to Arakune's departure. If the spider hits, the opponent is cocooned and hoisted up to the top of the screen. Equally useful as a combo tool and as a free punish for those who get too eager to rush you while teleporting. This moves properties are identical no matter which teleport was used to create it, but some teleports are able to use it much better than others (Ground and air 214B are especially good for it)." + "```"  
            mpC = "```" + "*" + "No matter how close to teching the opponent is the cocoon will always finish reaching the top of the screen before they are allowed to airtech. They will always be able to tech once it reaches the top, even on a Fatal Counter, so tag a curse building spider on the end of it if you can't follow up with a proper combo before they reach the apex of the stage. Alternatively, you can take the time they're in the cocoon to position yourself, set up clouds, or turn invisible; sometimes a better use of time if you weren't able to follow with a combo to build full curse meter." + "```"  
			
            embed = discord.Embed()
            embed.title = "If p then q"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/fa/BBCF_Arakune_GroundTeleports.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed(description='Near opponent during the startup of If p then q')
            embed1.title = "Negating p"
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	
            embed1.set_footer(text='Swiggity swooty...')		

            embed2 = discord.Embed()
            embed2.title = "Negating p Cont. "
            embed2.set_image(url='http://www.dustloop.com/wiki/images/5/5a/BBCF_Arakune_P_Reject.png')
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ar.command(name="j214a", pass_context=False)  #  Arakune from blazblue
    async def _s14_ar(self):   
        """Air teleport options. (Hut hut hike!)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            my_table1 = table[69]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[7]
            info =  table_body.find_all('tr')[8]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            #mp4 = info1.find('p').get_text() Too much text had to split it manually in half
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"  
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + "A strike grabbing spider that appears after teleports if the opponent is close enough to Arakune's departure. If the spider hits, the opponent is cocooned and hoisted up to the top of the screen. Equally useful as a combo tool and as a free punish for those who get too eager to rush you while teleporting. This moves properties are identical no matter which teleport was used to create it, but some teleports are able to use it much better than others (Ground and air 214B are especially good for it)." + "```"  
            mpC = "```" + "*" + "No matter how close to teching the opponent is the cocoon will always finish reaching the top of the screen before they are allowed to airtech. They will always be able to tech once it reaches the top, even on a Fatal Counter, so tag a curse building spider on the end of it if you can't follow up with a proper combo before they reach the apex of the stage. Alternatively, you can take the time they're in the cocoon to position yourself, set up clouds, or turn invisible; sometimes a better use of time if you weren't able to follow with a combo to build full curse meter." + "```"  
			
            embed = discord.Embed()
            embed.title = "If p then q"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/58/BBCF_Arakune_AirTeleports2.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed(description='Near opponent during the startup of If p then q')
            embed1.title = "Negating p"
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	
            embed1.set_footer(text='Swiggity swooty...')		

            embed2 = discord.Embed()
            embed2.title = "Negating p Cont. "
            embed2.set_image(url='http://www.dustloop.com/wiki/images/5/5a/BBCF_Arakune_P_Reject.png')
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)		
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

    @ar.command(name="j214b", pass_context=False)  #  Arakune from blazblue
    async def _s15_ar(self):   
        """Air teleport options. (Hut hut hike!)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            my_table1 = table[69]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[9]
            info =  table_body.find_all('tr')[10]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            #mp4 = info1.find('p').get_text() Too much text had to split it manually in half
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"  
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + "A strike grabbing spider that appears after teleports if the opponent is close enough to Arakune's departure. If the spider hits, the opponent is cocooned and hoisted up to the top of the screen. Equally useful as a combo tool and as a free punish for those who get too eager to rush you while teleporting. This moves properties are identical no matter which teleport was used to create it, but some teleports are able to use it much better than others (Ground and air 214B are especially good for it)." + "```"  
            mpC = "```" + "*" + "No matter how close to teching the opponent is the cocoon will always finish reaching the top of the screen before they are allowed to airtech. They will always be able to tech once it reaches the top, even on a Fatal Counter, so tag a curse building spider on the end of it if you can't follow up with a proper combo before they reach the apex of the stage. Alternatively, you can take the time they're in the cocoon to position yourself, set up clouds, or turn invisible; sometimes a better use of time if you weren't able to follow with a combo to build full curse meter." + "```"  
			
            embed = discord.Embed()
            embed.title = "If p then q"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/58/BBCF_Arakune_AirTeleports2.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed(description='Near opponent during the startup of If p then q')
            embed1.title = "Negating p"
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	
            embed1.set_footer(text='Swiggity swooty...')		

            embed2 = discord.Embed()
            embed2.title = "Negating p Cont. "
            embed2.set_image(url='http://www.dustloop.com/wiki/images/5/5a/BBCF_Arakune_P_Reject.png')
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ar.command(name="j214c", pass_context=False)  #  Arakune from blazblue
    async def _s16_ar(self):   
        """Air teleport options. (Hut hut hike!)"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            my_table1 = table[69]
            table_body = my_table.find("table")
            table_body1 = my_table1.find("table")
            headers = table_body.find_all('tr')[11]
            info =  table_body.find_all('tr')[12]
            headers1 = table_body1.find_all('tr')[1]
            info1 =  table_body1.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
            mp3 = [op1.get_text() for op1 in info1.find_all('li')]
            #mp4 = info1.find('p').get_text() Too much text had to split it manually in half
            vrs = headers.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"  
            mpB = "```" + "*" + mp3[0] + "\n" + "*" + mp3[1] + "\n" + "*" + "A strike grabbing spider that appears after teleports if the opponent is close enough to Arakune's departure. If the spider hits, the opponent is cocooned and hoisted up to the top of the screen. Equally useful as a combo tool and as a free punish for those who get too eager to rush you while teleporting. This moves properties are identical no matter which teleport was used to create it, but some teleports are able to use it much better than others (Ground and air 214B are especially good for it)." + "```"  
            mpC = "```" + "*" + "No matter how close to teching the opponent is the cocoon will always finish reaching the top of the screen before they are allowed to airtech. They will always be able to tech once it reaches the top, even on a Fatal Counter, so tag a curse building spider on the end of it if you can't follow up with a proper combo before they reach the apex of the stage. Alternatively, you can take the time they're in the cocoon to position yourself, set up clouds, or turn invisible; sometimes a better use of time if you weren't able to follow with a combo to build full curse meter." + "```"  
			
            embed = discord.Embed()
            embed.title = "If p then q"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/58/BBCF_Arakune_AirTeleports2.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed(description='Near opponent during the startup of If p then q')
            embed1.title = "Negating p"
            embed1.add_field(name="Frame Data", value=tab1)
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	
            embed1.set_footer(text='Swiggity swooty...')		

            embed2 = discord.Embed()
            embed2.title = "Negating p Cont. "
            embed2.set_image(url='http://www.dustloop.com/wiki/images/5/5a/BBCF_Arakune_P_Reject.png')
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')				
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="j44", pass_context=False)  #  Arakune from blazblue
    async def _s17_ar(self):   
        """Pissing off opponents since 2008."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed(description='j.44 When backed to a wall')
            embed.title = "Wall Teleport"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/76/BBCS_Arakune_j44.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')				
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ar.command(name="236236c", pass_context=False)  #  Arakune from blazblue
    async def _dd1_ar(self):
        """Combo filler or Arakune's only real wake up DP."""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[3]
            headers3 = table_body.find_all('tr')[4]
            info =  table_body.find_all('tr')[5]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "```"
            mpB = "```" + "*" + mp2[1] + "```"
            mpC = "```" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "F-Inverse"
            embed.add_field(name="Body Frame Data", value=tab)
            embed.add_field(name="Body OD Frame Data", value=tab1)
            embed.add_field(name="Laser Frame Data", value=tab2)
            embed.add_field(name="Laser OD Frame Data", value=tab3)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "F-Inverse Cont."
            embed1.add_field(name="Attack Props cont.", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "F-Inverse Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/5/5a/BBCS_Arakune_FInverse.png')
            embed2.add_field(name="Attack Props cont.", value=mpC)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")			

    @ar.command(name="j214214d", pass_context=False)  #  Arakune from blazblue
    async def _dd2_ar(self):
        """Homes in, 100% curse, 50% on block, swag"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[75]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "```"
            mpB = "```" + "*" + mp2[1] + "```"
            mpC = "```" + "*" + mp2[2] + "```"
			
            embed = discord.Embed()
            embed.title = "F of G"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            embed1 = discord.Embed()
            embed1.title = "F of G Cont."
            embed1.add_field(name="Attack Props Cont.", value=mpB)
			
            embed2 = discord.Embed()
            embed2.title = "F of G Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/7/74/BBCS_Arakune_FofG.png')
            embed2.add_field(name="Attack Props Cont.", value=mpC)
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")						

    @ar.command(name="236236d", pass_context=False)  #  Arakune from blazblue
    async def _dd3_ar(self):
        """Basically Volcarona summoning Yanmega"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[77]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "```"
            mpB = "```" + "*" + mp2[1] + "```"
            mpC = "```" + "*" + mp2[2] + "```"
            mpD = "```" + "*" + mp2[3] + "\n" + "*" + mp2[4] + "```"
			
            embed = discord.Embed(description='236236D during Curse (Air OK)')
            embed.title = "F equals"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	
			
            embed1 = discord.Embed()
            embed1.title = "F equals Cont."
            embed1.add_field(name="Attack Props Cont.", value=mpB, inline='true')	
			
            embed2 = discord.Embed()
            embed2.title = "F equals Cont."
            embed2.add_field(name="Attack Props Cont.", value=mpC, inline='true')
			
            embed3 = discord.Embed()
            embed3.title = "F equals Cont."
            embed3.set_image(url='http://www.dustloop.com/wiki/images/5/53/BBCF_Arakune_F_equals.png')
            embed3.add_field(name="Attack Props Cont.", value=mpD, inline='true')
            
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
            await self.bot.say(embed=embed3)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")					
			
    @ar.command(name="abcd", pass_context=False)  #  Arakune from blazblue
    async def _abcd_ar(self): 
        """Exceed Accel: What are you looking at?"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[79]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "n Factorial"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/bd/BBCF_Arakune_nFactorial.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				
			
    @ar.command(name="632146d", pass_context=False)  #  Arakune from blazblue
    async def _astral_ar(self):   
        """You activated my trap card, Gorgon's eye!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Arakune"  
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[81]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "N-Infinity"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/5b/BBCP_Arakune_NInfinity2.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		

###################################################################################################################################################################################################
    @ju.command(name="5a", pass_context=False)  #  Jubei from blazblue
    async def _5a_ju(self):
        """Paw paw paw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[1]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```" 
			
            embed = discord.Embed()
            embed.title = "5a"
            embed.set_image(url='http://www.dustloop.com/wiki/images/c/c4/BBCF_Jubei_5A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
		
            await self.bot.say(embed=embed)            
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
			
    @ju.command(name="5b", pass_context=False)  #  Jubei from blazblue
    async def _5b_ju(self):   
        """Quasi Anti-air move"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[3]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 	
			
            embed = discord.Embed()
            embed.title = "5b"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ea/BBCF_Jubei_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)					
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
			
    @ju.command(name="5c", pass_context=False)  #  Jubei from blazblue
    async def _5c_ju(self): 
        """Two swords, two strikes"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[5]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "5c"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4b/BBCF_Jubei_5C1.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
	
    @ju.command(name="2a", pass_context=False)  #  Jubei from blazblue
    async def _2a_ju(self):   
        """Tail to an Ars Magus fight"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[7]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 	
			
            embed = discord.Embed()
            embed.title = "2A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/09/BBCF_Jubei_2A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
			
    @ju.command(name="2b", pass_context=False)  #  Jubei from blazblue
    async def _2b_ju(self): 
        """Stubbed the Black Beast's toe"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[9]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            mp1 = info.find('li').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 			
			
            embed = discord.Embed()
            embed.title = "2B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/7/79/BBCF_Jubei_2B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
			
    @ju.command(name="2c", pass_context=False)  #  Jubei from blazblue
    async def _2c_ju(self):   
        """For fans of Santoryu"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[11]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2 + "```" 	
			
            embed = discord.Embed()
            embed.title = "2C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/e8/BBCF_Jubei_2C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
			
    @ju.command(name="6a", pass_context=False)  #  Jubei from blazblue
    async def _6a_ju(self):  
        """Talk to the hand"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[13]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```" 	
			
            embed = discord.Embed()
            embed.title = "6A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/f/f9/BBCF_Jubei_6A.png')
            embed.add_field(name="Catch Frame Data", value=tab)
            embed.add_field(name="Attack Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
			
    @ju.command(name="6b", pass_context=False)  #  Jubei from blazblue
    async def _6b_ju(self):  
        """I hope you know what you're doing when you press this"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[15]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "6B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/eb/BBCF_Jubei_6B.png')
            embed.add_field(name="Catch Frame Data", value=tab)
            embed.add_field(name="Attack Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")

    @ju.command(name="6c", pass_context=False)  #  Jubei from blazblue
    async def _6c_ju(self):  
        """For fans of Yontoryu"""				
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[17]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "6C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/2/2a/BBCF_Jubei_6C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ju.command(name="3c", pass_context=False)  #  Jubei from blazblue
    async def _3c_ju(self):   
        """Great at snipping feet"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[19]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "3C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/df/BBCF_Jubei_3C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
			
			
    @ju.command(name="ja", pass_context=False)  #  Jubei from blazblue
    async def _ja_ju(self): 
        """Look at those pads!"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[21]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed()
            embed.title = "J.A"
            embed.set_image(url='http://www.dustloop.com/wiki/images/8/80/BBCF_Jubei_j.A.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)			
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
			
			
    @ju.command(name="jb", pass_context=False)  #  Jubei from blazblue
    async def _jb_ju(self):   
        """The calisthenics of a hero"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[23]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]

            Data = [head.get_text() for head in headers.find_all('td')]			
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```"
			
            embed = discord.Embed()
            embed.title = "J.B"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4d/BBCF_Jubei_j.B.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
						
    @ju.command(name="jc", pass_context=False)  #  Jubei from blazblue
    async def _jc_ju(self): 
        #"""Insert Text Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[25]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "J.C"
            embed.set_image(url='http://www.dustloop.com/wiki/images/9/9a/BBCF_Jubei_j.C.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
			
    @ju.command(name="j2c", pass_context=False)  #  Jubei from blazblue
    async def _j2c_ju(self): 
        """Back and face scratcher"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[27]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
			
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "```"  
            mpB = "```" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"  	
		
            embed = discord.Embed()
            embed.title = "J.2C"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed()
            embed1.title = "J.2C Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/3/37/BBCF_Jubei_j.2C.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
			
    @ju.command(name="5d", pass_context=False)  #  Jubei from blazblue
    async def _5d_ju(self): 
        """You can't see heroes"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[29]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "```"  
            mpB = "```" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"           
			
            embed = discord.Embed()
            embed.title = "5D"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed()
            embed1.title = "5D Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b3/BBCF_Jubei_5D.png')
            embed1.add_field(name="Attack Props. Cont.", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
			
    @ju.command(name="jd", pass_context=False)  #  Jubei from blazblue
    async def _jd_ju(self): 
        #"""Insert Text Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[31]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "```"  
            mpB = "```" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"           
			
            embed = discord.Embed()
            embed.title = "J.D"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed()
            embed1.title = "J.D Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b3/BBCF_Jubei_5D.png')
            embed1.add_field(name="Attack Props. Cont.", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
			
    @ju.command(name="j6d", pass_context=False)  #  Jubei from blazblue
    async def _j6d_ju(self): 
        #"""Insert Text Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[33]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "```"  
            mpB = "```" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```"           
			
            embed = discord.Embed()
            embed.title = "J.6D"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="OD Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed()
            embed1.title = "J.6D Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/b/b3/BBCF_Jubei_5D.png')
            embed1.add_field(name="Attack Props. Cont.", value=mpB)
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
		
    @ju.command(name="sh", pass_context=False)  #  Jubei from blazblue
    async def _sh_ju(self): 
        """Shiranui Hagane: D~X after Fudō: Sharenjin, Air OK"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[35]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
			
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp2[0] + "```" 
            mpB = "```" + "*" + mp2[1] + "\n" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp1[5] + "\n" + "*" + mp1[6] + "\n" + "*" + mp1[7] + "\n" + "*" + mp1[8] + "\n" + "*" + mp1[9] + "\n" + "*" + mp1[10] + "\n" + "*" + mp1[11] + "\n" + "*" + mp2[2] +"```" 
			
            embed = discord.Embed(description="D~X after Fudō: Sharenjin, Air OK")
            embed.title = "Shiranui Hagane"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed()
            embed1.title = "Shiranui Hagane Cont."
            #embed.set_image(url='http://www.dustloop.com/wiki/images/a/a3/BBCF_Arakune_BBugs.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
			
    @ju.command(name="ft", pass_context=False)  #  Jubei from blazblue
    async def _ft_ju(self):   
        """Forward Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[37]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed()
            embed.title = "Forward Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/6/6d/BBCF_Jubei_GroundThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
			
    @ju.command(name="bt", pass_context=False)  #  Jubei from blazblue
    async def _bt_ju(self):   
        """Back Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[39]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"  
			
            embed = discord.Embed()
            embed.title = "Back Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/1/16/BBCF_Jubei_BackThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
			
    @ju.command(name="at", pass_context=False)  #  Jubei from blazblue
    async def _at_ju(self):   
        """Air Throw"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[41]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"  
			
            embed = discord.Embed()
            embed.title = "Air Throw"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/09/BBCF_Jubei_AirThrow.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
			
    @ju.command(name="ca", pass_context=False)  #  Jubei from blazblue
    async def _ca_ju(self):   
        """Counter Assault"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[43]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = info.find('li').get_text()
            #mp2 = info.find('p').get_text()	

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"  
			
            embed = discord.Embed()
            embed.title = "Counter Assault"
            embed.set_image(url='http://www.dustloop.com/wiki/images/e/ea/BBCF_Jubei_5B.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	

    @ju.command(name="ct", pass_context=False)  #  Jubei from blazblue
    async def _ct_ju(self):   
        """Crush Trigger"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[45]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = info.find('p').get_text()				

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"  
			
            embed = discord.Embed()
            embed.title = "Crush Trigger"
            embed.set_image(url='http://www.dustloop.com/wiki/images/3/39/BBCF_Jubei_Crush_Trigger.png')
            embed.add_field(name="Frame Data", value=tab)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")

    @rek.command(name="236a", aliases=["236236a"], pass_context=False)  #  Jubei from blazblue
    async def _reka_ju(self):   
        """Fury Swipes Hit 3 time(s)!"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[47]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed(description="236a/236236a, Air OK")
            embed.title = "Rekkōzan"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/4a/BBCF_Jubei_Rekk%C5%8Dzan.png')
            embed.add_field(name="236a Frame Data", value=tab)
            embed.add_field(name="236236a Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	

    @rek.command(name="a", pass_context=False)  #  Jubei from blazblue
    async def _rek1_ju(self):   
        """Build-A-236A Workshop"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[49]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]


            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "```" 
            mpB = "```" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```" 
			
            embed = discord.Embed(description='A after Rekkōzan, Air OK')
            embed.title = "Tsuika Kōgeki"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed()
            embed1.title = "Tsuika Kōgeki Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/d/da/BBCF_Jubei_Tsuika_K%C5%8Dgeki.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")

    @rek.command(name="b", pass_context=False)  #  Jubei from blazblue
    async def _rek2_ju(self):   
        """Surfing up the claw wave"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[51]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]


            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
			
            embed = discord.Embed(description='B after Rekkōzan, Air OK')
            embed.title = "Uchiage"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ad/BBCF_Jubei_Uchiage.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")

    @rek.command(name="6b", pass_context=False)  #  Jubei from blazblue
    async def _rek3_ju(self):   
        """Grandpa says no mashing"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
            mpB = "```" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```" 
			
            embed = discord.Embed(description='6B after Rekkōzan, Air OK')
            embed.title = "Ichi no Kata: Kage Ōkami"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed()
            embed1.title = "Ichi no Kata: Kage Ōkami Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/9d/BBCF_Jubei_Ichi_no_Kata_Kage_%C5%8Ckami.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')		
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")

    @ju.command(name="236b", pass_context=False)  #  Jubei from blazblue
    async def _s1_ju(self):   
        """Grandpa says no mashing"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[53]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
            mpB = "```" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```" 
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Ichi no Kata: Kage Ōkami"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed()
            embed1.title = "Ichi no Kata: Kage Ōkami Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/9/9d/BBCF_Jubei_Ichi_no_Kata_Kage_%C5%8Ckami.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')		
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")

    @rek.command(name="4b", pass_context=False)  #  Jubei from blazblue
    async def _rek4_ju(self):   
        """GRANDPA SAID NO MASHING"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
            mpB = "```" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```" 
			
            embed = discord.Embed(description='4B after Rekkōzan, Air OK')
            embed.title = "Ni no Kata: Oni Gitsune"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed()
            embed1.title = "Ni no Kata: Oni Gitsune Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/5/56/BBCF_Jubei_Ni_no_Kata_Oni_Gitsune.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")

    @ju.command(name="214b", pass_context=False)  #  Jubei from blazblue
    async def _s2_ju(self):   
        """GRANDPA SAID NO MASHING"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[55]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
            mpB = "```" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```" 
			
            embed = discord.Embed(description='Air OK')
            embed.title = "Ni no Kata: Oni Gitsune"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	

            embed1 = discord.Embed()
            embed1.title = "Ni no Kata: Oni Gitsune Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/5/56/BBCF_Jubei_Ni_no_Kata_Oni_Gitsune.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")

    @rek.command(name="c", pass_context=False)  #  Jubei from blazblue
    async def _rek5_ju(self):   
        """Pleasehitpleasehitpleasehit"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2[0] + "```"  
            mpB = "```" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```" 
            mpC = "```" + "*" + mp2[3] + "```"  
			
            embed = discord.Embed(description='C after Rekkōzan, Air OK')
            embed.title = "San no Kata: Ranjishi"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed()
            embed1.title = "San no Kata: Ranjishi Cont."
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	

            embed2 = discord.Embed()
            embed2.title = "San no Kata: Ranjishi Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/f/f9/BBCF_Jubei_San_no_Kata_Ranjishi.png')
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")

    @ju.command(name="214c", pass_context=False)  #  Jubei from blazblue
    async def _s3_ju(self):   
        """Pleasehitpleasehitpleasehit"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[57]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp1[4] + "\n" + "*" + mp2[0] + "```"  
            mpB = "```" + "*" + mp2[1] + "\n" + "*" + mp2[2] + "```" 
            mpC = "```" + "*" + mp2[3] + "```"  
			
            embed = discord.Embed(description='Air OK')
            embed.title = "San no Kata: Ranjishi"
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')

            embed1 = discord.Embed()
            embed1.title = "San no Kata: Ranjishi Cont."
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	

            embed2 = discord.Embed()
            embed2.title = "San no Kata: Ranjishi Cont."
            embed2.set_image(url='http://www.dustloop.com/wiki/images/f/f9/BBCF_Jubei_San_no_Kata_Ranjishi.png')
            embed2.add_field(name="Attack Props:", value=mpC, inline='true')			
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
            await self.bot.say(embed=embed2)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")

    @rek.command(name="646c", pass_context=False)  #  Jubei from blazblue
    async def _rek6_ju(self):   
        """X marks the unblockable fatal"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
            mpB = "```" + "*" + mp2[2] + "```" 
			
            embed = discord.Embed(description='646c after Rekkōzan')
            embed.title = "Shi no Kata: Kuro Hyō"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCF_Jubei_Shi_no_Kata_Kuro_Hy%C5%8D.png')
            embed.add_field(name="No Charge Frame Data", value=tab)
            embed.add_field(name="Full Charge Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed()
            embed1.title = "Shi no Kata: Kuro Hyō Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/1a/BBCF_Jubei_Shi_no_Kata_Kuro_Hy%C5%8D2.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")

    @ju.command(name="632146c", pass_context=False)  #  Jubei from blazblue
    async def _s4_ju(self):   
        """X marks the unblockable fatal"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[59]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info =  table_body.find_all('tr')[3]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
            mpB = "```" + "*" + mp2[2] + "```" 
			
            embed = discord.Embed()
            embed.title = "Shi no Kata: Kuro Hyō"
            embed.set_image(url='http://www.dustloop.com/wiki/images/b/b8/BBCF_Jubei_Shi_no_Kata_Kuro_Hy%C5%8D.png')
            embed.add_field(name="No Charge Frame Data", value=tab)
            embed.add_field(name="Full Charge Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed()
            embed1.title = "Shi no Kata: Kuro Hyō Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/1/1a/BBCF_Jubei_Shi_no_Kata_Kuro_Hy%C5%8D2.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	
			
            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")

    @rek.command(name="6d", aliases=["4d"], pass_context=False)  #  Jubei from blazblue
    async def _rek7_ju(self):   
        """As free as a cat now"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
            mpB = "```" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```" 	
		
            embed = discord.Embed(description="4d/6d during Rekkōzan")
            embed.title = "Shitenjin"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/02/BBCF_Jubei_Shitenjin.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed()
            embed1.title = "Shitenjin"
            embed1.set_image(url='http://www.dustloop.com/wiki/images/5/5d/BBCF_Jubei_Shitenjin2.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")

    @ju.command(name="j236d", aliases=["j214d"], pass_context=False)  #  Jubei from blazblue
    async def _s5_ju(self):   
        """As free as a cat now"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[61]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = [po.get_text() for po in info.find_all('p')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2[0] + "\n" + "*" + mp2[1] + "```" 
            mpB = "```" + "*" + mp2[2] + "\n" + "*" + mp2[3] + "```" 	
		
            embed = discord.Embed()
            embed.title = "Shitenjin"
            embed.set_image(url='http://www.dustloop.com/wiki/images/0/02/BBCF_Jubei_Shitenjin.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		

            embed1 = discord.Embed()
            embed1.title = "Shitenjin Cont."
            embed1.set_image(url='http://www.dustloop.com/wiki/images/5/5d/BBCF_Jubei_Shitenjin2.png')
            embed1.add_field(name="Attack Props:", value=mpB, inline='true')	

            await self.bot.say(embed=embed)
            await self.bot.say(embed=embed1)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")

    @ju.command(name="236c", pass_context=False)  #  Jubei from blazblue
    async def _s6_ju(self):   
        """(Air OK)The little fireball that could"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[63]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "\n" + "*" + mp2 + "```" 
			
            embed = discord.Embed(description="Air OK")
            embed.title = "Gishōkyū"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a3/BBCF_Jubei_Gish%C5%8Dky%C5%AB.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')		
			
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
			
    @ju.command(name="236236d", pass_context=False)  #  Jubei from blazblue
    async def _dd1_ju(self):
        #"""Insert Text Here"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[65]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[4]
            headers3 = table_body.find_all('tr')[5]
            info =  table_body.find_all('tr')[3]
            info1 =  table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Senju: Todoroki Setsura"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/ae/BBCF_Jubei_Senju_Todoroki_Setsura.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Shiranui Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab2)
            embed.add_field(name="Shiranui OD Frame Data", value=tab3)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")

    @ju.command(name="j236236d", pass_context=False)  #  Jubei from blazblue
    async def _dd2_ju(self):
        #"""Insert Text Here"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[67]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            headers2 = table_body.find_all('tr')[4]
            headers3 = table_body.find_all('tr')[5]
            info =  table_body.find_all('tr')[3]
            info1 =  table_body.find_all('tr')[6]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            Data2 = [head2.get_text() for head2 in headers2.find_all('td')]
            Data3 = [head3.get_text() for head3 in headers3.find_all('td')]
            #mp1 = [op.get_text() for op in info.find_all('li')]
            #mp2 = info.find('p').get_text()
            vrs = headers.find('th').get_text()
            vrs1 = headers1.find('th').get_text()
            vrs2 = headers2.find('th').get_text()
            vrs3 = headers3.find('th').get_text()

            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            tab2 = tabulate([["Version", vrs2], ["Damage", Data2[0]], ["Guard", Data2[1]], ["Startup", Data2[2]], ["Active", Data2[3]], ["Recovery", Data2[4]], ["Frame Adv.", Data2[5]], ["Attribute", Data2[6]]], tablefmt='simple', stralign='left')
            tab3 = tabulate([["Version", vrs3], ["Damage", Data3[0]], ["Guard", Data3[1]], ["Startup", Data3[2]], ["Active", Data3[3]], ["Recovery", Data3[4]], ["Frame Adv.", Data3[5]], ["Attribute", Data3[6]]], tablefmt='simple', stralign='left')
            #mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Niō: Kigantotsu"
            embed.set_image(url='http://www.dustloop.com/wiki/images/d/d8/BBCF_Jubei_Ni%C5%8D_Kigantotsu.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Shiranui Frame Data", value=tab1)
            #embed.add_field(name="Attack Props:", value=mpA, inline='true')
            embed.add_field(name="OD Frame Data", value=tab2)
            embed.add_field(name="Shiranui OD Frame Data", value=tab3)
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")				

    @ju.command(name="360a", pass_context=False)  #  Jubei from blazblue
    async def _dd3_ju(self):
        """TIME TO GO HA.. I MEAN FISH"""	
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[69]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info =  table_body.find_all('tr')[2]
			
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = [po.get_text() for po in info.find_all('li')]

            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp1[2] + "\n" + "*" + mp1[3] + "```"
			
            embed = discord.Embed()
            embed.title = "Fudō: Sharenjin"
            embed.set_image(url='http://www.dustloop.com/wiki/images/4/41/BBCF_Jubei_Fud%C5%8D_Sharenjin.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')	
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ju.command(name="abcd", pass_context=False)  #  Jubei from blazblue
    async def _abcd_ju(self): 
        """Exceed Accel"""		
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[71]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            headers1 = table_body.find_all('tr')[2]
            info = table_body.find_all('tr')[3]
            
            vrs = headers.find('th').get_text()
            Data = [head.get_text() for head in headers.find_all('td')]
            vrs1 = headers1.find('th').get_text()
            Data1 = [head1.get_text() for head1 in headers1.find_all('td')]
            mp1 = [op.get_text() for op in info.find_all('li')]
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Version", vrs], ["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            tab1 = tabulate([["Version", vrs1], ["Damage", Data1[0]], ["Guard", Data1[1]], ["Startup", Data1[2]], ["Active", Data1[3]], ["Recovery", Data1[4]], ["Frame Adv.", Data1[5]], ["Attribute", Data1[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1[0] + "\n" + "*" + mp1[1] + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Miroku: Rinshunrō"
            embed.set_image(url='http://www.dustloop.com/wiki/images/a/a2/BBCF_Jubei_Miroku_Rinshunr%C5%8D.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Active Flow Frame Data", value=tab1)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")		
			
    @ju.command(name="6321463214c", pass_context=False)  #  Jubei from blazblue
    async def _astral_ju(self):   
        """Astral Heat"""
        url = "http://www.dustloop.com/wiki/index.php/BBCF/Jubei"  # they allow spaces so I had to add underscore as a temporary resolution
        async with aiohttp.get(url) as response:
            soupObject = BeautifulSoup(await response.text(), "html.parser")
        try:
            table = soupObject.find_all('table', attrs={'class': 'wikitable'})
            my_table = table[73]
            table_body = my_table.find("table")
            headers = table_body.find_all('tr')[1]
            info = table_body.find_all('tr')[2]
            
            Data = [head.get_text() for head in headers.find_all('td')]
            mp1 = info.find('li').get_text()
            mp2 = info.find('p').get_text()
       
            tab = tabulate([["Damage", Data[0]], ["Guard", Data[1]], ["Startup", Data[2]], ["Active", Data[3]], ["Recovery", Data[4]], ["Frame Adv.", Data[5]], ["Attribute", Data[6]]], tablefmt='simple', stralign='left')
            mpA = "```" + "*" + mp1 + "\n" + "*" + mp2 + "```"
			
            embed = discord.Embed()
            embed.title = "Ashura: Hōrai Burenshō"
            embed.set_image(url='http://www.dustloop.com/wiki/images/5/55/BBCF_Jubei_AH2.png')
            embed.add_field(name="Frame Data", value=tab)
            embed.add_field(name="Attack Props:", value=mpA, inline='true')
            
            await self.bot.say(embed=embed)
        except discord.errors.HTTPException:
            await self.bot.say("Character Limit reached, unable to post frame data....")
        except IndexError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")
        except KeyError:
            await self.bot.say("Unexpected Error occurred retrieving frame data, please report issue here: https://github.com/Mojotroll/Mojo-Cogs/issues")	
###################################################################################################################################################################################################
def setup(bot):
    if soupAvailable is False:
        raise RuntimeError("You don't have BeautifulSoup installed, run\n```pip3 install bs4```And try again")
        return
    if tabulateAvailable is False:
        raise RuntimeError("You don't have tabulate installed, run\n```pip3 install tabulate```And try again")
        return
    bot.add_cog(bbcf(bot))
